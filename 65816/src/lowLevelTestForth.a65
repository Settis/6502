.include "../include/std.inc"
.include "../include/forth.inc"
.include "../include/uartImport.inc"
.include "../include/uartDebugMsg.inc"

; Libs: uart, delay, uartDebugMsg, forth

.export UART_ADDR = UART_51
.export D0_INIT_VALUE = $7000

.zeropage
TESTS:
    .res 1
FAILS:
    .res 1
OK:
    .res 1
RESULT:
    .res 1

REUSLT_OK = $AA
SP_HEAD = $F0 ; assuming that I have some space in ZP

.code

.macro DEC_INC memory
    LDA memory
    JSR INC_DECIMAL
    STA memory
.endmacro

.proc INC_DECIMAL
    SED
    CLC
    ADC #1
    CLD
    RTS
.endproc

.export MAIN
.proc MAIN
    A8_IND8

    JSR UART_PRINT_STRING
    .asciiz "Tests: "

    STZ TESTS
    STZ FAILS
    STZ OK
    LDX #0
@LOOP:
    STZ RESULT
    PHX
    A16_IND16
    LDA #SP_HEAD
    STA SP
    JSR (TEST_LIST,X)
    A8_IND8
    DEC_INC TESTS
    LDA RESULT
    CMP #REUSLT_OK
        BNE @NOT_OK
        DEC_INC OK
        LDA #'.'
        JSR UART_WRITE
        BRA @LOOP_TAIL
@NOT_OK:
    DEC_INC FAILS
    LDA #'F'
    JSR UART_WRITE

@LOOP_TAIL:
    PLX
    INX
    INX
    CPX #(TEST_LIST_END-TEST_LIST)
    BCC @LOOP

    JSR UART_PRINT_NEW_LINE

    JSR UART_PRINT_STRING
    .asciiz "Tests total: "
    LDA TESTS
    JSR UART_PRINT_HEX
    JSR UART_PRINT_NEW_LINE

    JSR UART_PRINT_STRING
    .asciiz "OK: "
    LDA OK
    JSR UART_PRINT_HEX
    JSR UART_PRINT_NEW_LINE

    JSR UART_PRINT_STRING
    .asciiz "FAILS: "
    LDA FAILS
    JSR UART_PRINT_HEX
    JSR UART_PRINT_NEW_LINE

    RTS
.endproc

TEST_LIST:
.word TEST_FORTH_WORD_CALLING
.word TEST_FORTH_WORD_LIT
.word TEST_FORTH_NESTED_WORDS
.word TEST_FORTH_WORD_EXCL
.word TEST_FORTH_WORD_AT
.word TEST_FORTH_WORD_CEXCL
.word TEST_FORTH_WORD_CAT
.word TEST_FORTH_WORD_R
.word TEST_FORTH_WORD_PLUS
.word TEST_FORTH_WORD_2MUL
.word TEST_FORTH_WORD_DROP
.word TEST_FORTH_WORD_DUP
.word TEST_FORTH_WORD_SWAP
.word TEST_FORTH_WORD_OVER
.word TEST_FORTH_WORD_ROT
.word TEST_FORTH_WORD_NOT
.word TEST_FORTH_WORD_OR
.word TEST_FORTH_WORD_AND
.word TEST_FORTH_WORD_XOR
.word TEST_FORTH_WORD_0EQ_FALSE
.word TEST_FORTH_WORD_0EQ_TRUE
.word TEST_FORTH_BRANCH_THEN
.word TEST_FORTH_BRANCH_ELSE
.word TEST_FORTH_FIND_FIRST_WORD
.word TEST_FORTH_FIND_SECOND_WORD_SAME_LENGTH
.word TEST_FORTH_FIND_DIFF_LENGTH_WORD
.word TEST_FORTH_FIND_SKIP_SMUDGE_WORD
.word TEST_FORTH_FIND_NOTHING
.word TEST_FORTH_FIND_READ_WORD
.word TEST_DO_LOOP
.word TEST_DO_LOOP_LEAVE
.word TEST_CONSTANT_CALLING
.word TEST_CONSTANT
.word TEST_VARIABLE
.word TEST_CMOVE
TEST_LIST_END:

.A16
.I16
.proc MARK_TEST_PASSED
    A8
    LDA #REUSLT_OK
    STA RESULT
    A16
    RTS
.endproc

.proc RETURN_TO_TEST
    .word @CODE
@CODE:
    RTS
.endproc

.proc EXECUTE_FORTH_FOR_TEST
    JSR PUSH_DS
    PLA
    INC A
    STA RETURN_ADDRESS
    LDA #RETURN_PTR
    STA IP
    JMP (FORTH_WORD_EXECUTE)
.endproc
RETURN_PTR:
    .word RETURN_ADDRESS
RETURN_ADDRESS:
    .word 0

.macro FAIL_IF_NOT_EQ
.scope
    BEQ @PASS
    RTS
@PASS:
.endscope
.endmacro

.macro CHECK_SP
    LDA SP
    CMP #SP_HEAD
    FAIL_IF_NOT_EQ
.endmacro

.proc TEST_FORTH_WORD_CALLING
    LDA #SIPMLE_FORTH_WORD ; function just exits
    JSR EXECUTE_FORTH_FOR_TEST
    CHECK_SP  ; we are here & this is success. And data stack is not touched
    JMP MARK_TEST_PASSED
.endproc
.proc SIPMLE_FORTH_WORD
    .word DOCOL
    .word FORTH_WORD_DOSEMICOL
.endproc

.proc TEST_FORTH_WORD_LIT
    LDA #T_PUSH_5A
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 55AA
    CMP #$55AA
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc
.proc T_PUSH_5A
    .word DOCOL
    .word FORTH_WORD_LIT
    .word $55AA
    .word FORTH_WORD_DOSEMICOL
.endproc

.proc TEST_FORTH_NESTED_WORDS
    LDA #T_REUSE_PUSH_5A
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 55AA, 55AA
    CMP #$55AA
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$55AA
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc
.proc T_REUSE_PUSH_5A
    .word DOCOL
    .word T_PUSH_5A ; Call FORTH word from another FORTH word
    .word T_PUSH_5A 
    .word FORTH_WORD_DOSEMICOL
.endproc

TWO_BYTES_OF_MEMORY:
.word 0
.proc TEST_FORTH_WORD_EXCL
    STZ TWO_BYTES_OF_MEMORY
    LDA #$FFAA 
    JSR PUSH_DS
    LDA #TWO_BYTES_OF_MEMORY
    JSR PUSH_DS
    LDA #FORTH_WORD_EXCL ; DataStack: FFAA, ADDR
    JSR EXECUTE_FORTH_FOR_TEST
    CHECK_SP ; data stack is empty
    LDA TWO_BYTES_OF_MEMORY
    CMP #$FFAA
    FAIL_IF_NOT_EQ
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_AT
    LDA #$BCDE
    STA TWO_BYTES_OF_MEMORY
    LDA #TWO_BYTES_OF_MEMORY
    JSR PUSH_DS
    LDA #FORTH_WORD_AT ; DataStack: ADDR
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: BCDE
    CMP #$BCDE
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_CEXCL
    LDA #$1234
    STA TWO_BYTES_OF_MEMORY
    LDA #$5678
    JSR PUSH_DS
    LDA #TWO_BYTES_OF_MEMORY
    JSR PUSH_DS ; DataStack: 5678, ADDR
    LDA #FORTH_WORD_CEXCL
    JSR EXECUTE_FORTH_FOR_TEST
    CHECK_SP ; Data stack is empty
    LDA TWO_BYTES_OF_MEMORY
    CMP #$1278 ; but only lower byte was updated
    FAIL_IF_NOT_EQ
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_CAT
    LDA #$BCDE
    STA TWO_BYTES_OF_MEMORY
    LDA #TWO_BYTES_OF_MEMORY
    JSR PUSH_DS ; DataStack: ADDR
    LDA #FORTH_WORD_CAT
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 00DE
    CMP #$00DE ; Because only one byte was readed
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_R
    LDA #$BEEF
    JSR PUSH_DS
    LDA #T_R_CHECK ; DataStack: BEEF
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 1111, BEEF, 2222, BEEF
    CMP #$BEEF
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$2222
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$BEEF
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$1111
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc
.proc T_R_CHECK ; N -- 1111 N 2222 N
    .word DOCOL
    .word FORTH_WORD_GTR
    .word FORTH_WORD_LIT
    .word $1111
    .word FORTH_WORD_R
    .word FORTH_WORD_LIT
    .word $2222
    .word FORTH_WORD_RGT
    .word FORTH_WORD_DOSEMICOL
.endproc

.proc TEST_FORTH_WORD_PLUS
    LDA #$1234
    JSR PUSH_DS
    LDA #$4321
    JSR PUSH_DS
    LDA #FORTH_WORD_PLUS ; DataStack: 1234, 4321
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 5555
    CMP #$5555
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_2MUL
    LDA #$1234
    JSR PUSH_DS
    LDA #FORTH_WORD_2MUL ; DataStack: 1234
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 2468
    CMP #$2468
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_DROP
    LDA #$1234
    JSR PUSH_DS
    LDA #FORTH_WORD_DROP ; DataStack: 1234
    JSR EXECUTE_FORTH_FOR_TEST
    CHECK_SP ; Data stack is empty
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_DUP
    LDA #$1234
    JSR PUSH_DS
    LDA #FORTH_WORD_DUP ; DataStack: 1234
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 1234, 1234
    CMP #$1234
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$1234
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_SWAP
    LDA #$1234
    JSR PUSH_DS
    LDA #$4321
    JSR PUSH_DS
    LDA #FORTH_WORD_SWAP ; DataStack: 1234, 4321
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 4321, 1234
    CMP #$1234
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$4321
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_OVER
    LDA #$1234
    JSR PUSH_DS
    LDA #$4321
    JSR PUSH_DS
    LDA #FORTH_WORD_OVER ; DataStack: 1234, 4321
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 1234, 4321, 1234
    CMP #$1234
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$4321
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$1234
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_ROT
    LDA #$1111
    JSR PUSH_DS
    LDA #$2222
    JSR PUSH_DS
    LDA #$3333
    JSR PUSH_DS
    LDA #FORTH_WORD_ROT ; DataStack: 1111, 2222, 3333
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 2222, 3333, 1111
    CMP #$1111
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$3333
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$2222
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_NOT
    LDA #$5500
    JSR PUSH_DS
    LDA #FORTH_WORD_NOT ; DataStack: 5500
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: AAFF
    CMP #$AAFF
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_OR
    LDA #$5500
    JSR PUSH_DS
    LDA #$00FA
    JSR PUSH_DS
    LDA #FORTH_WORD_OR ; DataStack: 5500, 00FA
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 55FA
    CMP #$55FA
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_AND
    LDA #$55FA
    JSR PUSH_DS
    LDA #$0F0F
    JSR PUSH_DS
    LDA #FORTH_WORD_AND ; DataStack: 55FA, 0F0F
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 050A
    CMP #$050A
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_XOR
    LDA #$55AA
    JSR PUSH_DS
    LDA #$0F0F
    JSR PUSH_DS
    LDA #FORTH_WORD_XOR ; DataStack: 55AA, 0F0F
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 5AA5
    CMP #$5AA5
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_0EQ_FALSE
    LDA #1
    JSR PUSH_DS
    LDA #FORTH_WORD_0EQ ; DataStack: 1
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 0
    CMP #0
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_WORD_0EQ_TRUE
    LDA #0
    JSR PUSH_DS
    LDA #FORTH_WORD_0EQ ; DataStack: 0
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: FFFF
    CMP #$FFFF
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_BRANCH_THEN
    LDA #1
    JSR PUSH_DS
    LDA #T_BRANCH ; DataStack: 1
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 1111
    CMP #$1111
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED  
.endproc
.proc T_BRANCH
    .word DOCOL
    .word FORTH_WORD_0BRANCH
    .word @ZERO
    .word FORTH_WORD_LIT
    .word $1111
    .word FORTH_WORD_BRANCH
    .word @END
@ZERO:
    .word FORTH_WORD_LIT
    .word $2222
@END:
    .word FORTH_WORD_DOSEMICOL
.endproc

.proc TEST_FORTH_BRANCH_ELSE
    LDA #0
    JSR PUSH_DS
    LDA #T_BRANCH ; DataStack: 0
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: 2222
    CMP #$2222
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED 
.endproc

; TEST Dict
T_FIRST_WORD_FOO:
.byte $80 | 3 
.byte "FOO"
.word 0

T_WORD_FOO:
.byte 3
.byte "FOO"
.proc TEST_FORTH_FIND_FIRST_WORD
    LDA #T_WORD_FOO
    JSR PUSH_DS
    LDA #T_FIRST_WORD_FOO
    JSR PUSH_DS
CHECK:
    LDA #FORTH_WORD_O_PARFINDC_PAR ; DataStack: nameAddr, dictAddr
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: CFA, NFA byte, True
    CMP #$FFFF
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$0083
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #T_WORD_FOO
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

T_SECOND_WORD:
.byte $80 | 3
.byte "BAR"
.word T_FIRST_WORD_FOO
.proc TEST_FORTH_FIND_SECOND_WORD_SAME_LENGTH
    LDA #T_WORD_FOO
    JSR PUSH_DS
    LDA #T_SECOND_WORD
    JSR PUSH_DS
    JMP TEST_FORTH_FIND_FIRST_WORD::CHECK
.endproc

T_SHORT_WORD:
.byte $80 | 1
.byte "R"
.word T_FIRST_WORD_FOO
.proc TEST_FORTH_FIND_DIFF_LENGTH_WORD
    LDA #T_WORD_FOO
    JSR PUSH_DS
    LDA #T_SHORT_WORD
    JSR PUSH_DS
    JMP TEST_FORTH_FIND_FIRST_WORD::CHECK
.endproc

T_SMUDGE_WORD:
.byte $80 | $20 | 3
.byte "FOO"
.word T_FIRST_WORD_FOO
.proc TEST_FORTH_FIND_SKIP_SMUDGE_WORD
    LDA #T_WORD_FOO
    JSR PUSH_DS
    LDA #T_SMUDGE_WORD
    JSR PUSH_DS
    JMP TEST_FORTH_FIND_FIRST_WORD::CHECK
.endproc

EXECUTE_WORD:
.byte 7
.byte "EXECUTE"
.proc TEST_FORTH_FIND_NOTHING
    LDA #EXECUTE_WORD
    JSR PUSH_DS
    LDA #T_SHORT_WORD
    JSR PUSH_DS
    LDA #FORTH_WORD_O_PARFINDC_PAR ; DataStack: nameAddr, dictAddr
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: false
    CMP #0
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_FORTH_FIND_READ_WORD
    LDA #EXECUTE_WORD
    JSR PUSH_DS
    LDA #LAST_WORD
    JSR PUSH_DS
    LDA #FORTH_WORD_O_PARFINDC_PAR ; DataStack: nameAddr, dictAddr
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: CFA, NFA byte, True
    CMP #$FFFF
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #$0087
    FAIL_IF_NOT_EQ
    JSR PULL_DS
    CMP #FORTH_WORD_EXECUTE
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

; : TEST_FUNCTION ( BOUNDARY INDEX -- SUM )
;     0 ROT ROT \ for stack: sum boundary index
;     DO
;       1 +
;       I $FFFA + IF LEAVE THEN
;       1 +
;     LOOP
;
.proc T_DO_LOOP
    .word DOCOL
    .word FORTH_WORD_LIT
    .word 0
    .word FORTH_WORD_ROT
    .word FORTH_WORD_ROT
    .word FORTH_WORD_O_PARDOC_PAR
    .word @AFTER_LOOP
@LOOP_START:
    .word FORTH_WORD_LIT
    .word 1
    .word FORTH_WORD_PLUS
    .word FORTH_WORD_I
    .word FORTH_WORD_LIT
    .word $FFFA
    .word FORTH_WORD_PLUS
    .word FORTH_WORD_0EQ
    .word FORTH_WORD_0BRANCH
    .word @PROCEED
    .word FORTH_WORD_LEAVE
@PROCEED:
    .word FORTH_WORD_LIT
    .word 1
    .word FORTH_WORD_PLUS
    .word FORTH_WORD_O_PARLOOPC_PAR
    .word @LOOP_START
@AFTER_LOOP:
    .word FORTH_WORD_DOSEMICOL
.endproc
.proc TEST_DO_LOOP
    LDA #4
    JSR PUSH_DS
    LDA #0
    JSR PUSH_DS
    LDA #T_DO_LOOP ; DataStack: 4, 0
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: SUM
    CMP #8
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc TEST_DO_LOOP_LEAVE
    LDA #$A
    JSR PUSH_DS
    LDA #4
    JSR PUSH_DS
    LDA #T_DO_LOOP ; DataStack: A, 4
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: SUM
    CMP #5
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

.proc T_CALL_CONSTANT
    .word DOCOL
    .word T_SIMPLE_CONSTANT
    .word FORTH_WORD_DOSEMICOL
.endproc
.proc T_SIMPLE_CONSTANT
    .word DOCON
    .word $FA34
.endproc
.proc TEST_CONSTANT
    LDA #T_SIMPLE_CONSTANT
RUN_AND_CHECK:
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: FA34
    CMP #$FA34
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc
.proc TEST_CONSTANT_CALLING
    LDA #T_CALL_CONSTANT
    JMP TEST_CONSTANT::RUN_AND_CHECK
.endproc

.proc T_SIMPLE_VARIABLE
    .word DOVAR
VAR_ADDR:
    .word $FA34
.endproc
.proc TEST_VARIABLE
    LDA #T_SIMPLE_VARIABLE
    JSR EXECUTE_FORTH_FOR_TEST
    JSR PULL_DS ; DataStack: ADDR
    CMP #T_SIMPLE_VARIABLE::VAR_ADDR
    FAIL_IF_NOT_EQ
    CHECK_SP
    JMP MARK_TEST_PASSED
.endproc

CMOVE_DIST:
    .byte 0, 0, 0, 0, 0
.proc TEST_CMOVE
    LDA #T_WORD_FOO
    JSR PUSH_DS
    LDA #CMOVE_DIST
    JSR PUSH_DS
    LDA #4
    JSR PUSH_DS
    LDA #FORTH_WORD_CMOVE
    JSR EXECUTE_FORTH_FOR_TEST
    CHECK_SP
    A8_IND8
    LDX #0
    LDA CMOVE_DIST
    CMP #3
    BEQ @NEXT_1
    INX
@NEXT_1:

    LDA CMOVE_DIST+1
    CMP #'F'
    BEQ @NEXT_2
    INX
@NEXT_2:

    LDA CMOVE_DIST+2
    CMP #'O'
    BEQ @NEXT_3
    INX
@NEXT_3:

    LDA CMOVE_DIST+3
    CMP #'O'
    BEQ @NEXT_4
    INX
@NEXT_4:

    LDA CMOVE_DIST+4
    BEQ @NEXT_5
    INX
@NEXT_5:
    A16_IND16
    TXA
    BEQ @OK
    RTS
@OK:
    JMP MARK_TEST_PASSED
.endproc

.proc PRINT_STACK
    A8_IND8
    JSR UART_PRINT_STRING
    .asciiz "Stack: "
    LDY #1
    LDA (SP),Y
    JSR UART_PRINT_HEX
    LDA (SP)
    JSR UART_PRINT_HEX
    JSR UART_PRINT_NEW_LINE
    A16_IND16
    RTS
.endproc
