.include "../include/std.inc"
.include "../include/uartImport.inc"

; Memory map:
;   0000..00FF pseudo registers
;   0100..D0-1  Return stack `R0` & `RP` 
;    D0 ..      dictionary `DP`
;       ..       PAD
;       ..??FF data stack `S0` & `SP`
;              Line input buffer
;              SD card buffer
;              UART/keyboard buffer
;       .. ??  User variables

.A16
.I16

.zeropage
.exportzp SP
SP: 
    .res 2
.exportzp IP
IP:
    .res 2
W:
    .res 2
ENCLOSE_ADDR:
NAME_ADDR:
DIV_LOW:
    .res 2
DIV_HIGH:
NFA_ADDR:
    .res 2
DIV_MOD:
    .res 2
TMP_WORD_LENGTH:
    .res 1
USER_IO_BUFFER_START:
    .res 1
USER_IO_BUFFER_END:
    .res 1

R0_INIT_VALUE = $1FF ; for return stack
; in case of running from RAM nere will be the code
.import D0_INIT_VALUE ; for Dictionary
S0_INIT_VALUE = LINE_INPUT_BUFFER - 1 ; for Data stack
LINE_INPUT_BUFFER = SD_CARD_BUFFER - 200
SD_CARD_BUFFER = USER_VARIABLES - 512
USER_VARIABLES = USER_IO_BUFFER - (END_INITIAL_USER_VARIABLES - INITIAL_USER_VARIABLES)
USER_IO_BUFFER = MAX_RAM - $20
MAX_RAM = $8000

USER_IO_BUFFER_MASK = $1F

.code

INITIAL_USER_VARIABLES:
UV_R0:
    .word R0_INIT_VALUE
UV_S0:
    .word S0_INIT_VALUE
UV_LIB:
    .word LINE_INPUT_BUFFER
UV_SD_BUF:
    .word SD_CARD_BUFFER
UV_KEY:
    .word FORTH_WORD_UART_KEY ; UART input reader
UV_EMIT:
    .word FORTH_WORD_UART_EMIT ; UART emitter
UV_STATE:
    .word 0
UV_IN:
    .word 0
UV_CURRENT:
    .word 0
UV_CONTEXT:
    .word 0
UV_FORTH_LINK:
    .word LAST_WORD
UV_ERROR:
    .word FORTH_WORD_CURRENT
UV_DP:
    .word D0_INIT_VALUE
UV_HLD:
    .word 0
UV_BASE:
    .word 10
END_INITIAL_USER_VARIABLES:

.export FORTH_MAIN
.proc FORTH_MAIN
    ENABNE_NATIVE_MODE
    A16_IND16

    CLI

    LDA #FORTH_WORD_COLD+2
    STA W
    JMP (FORTH_WORD_COLD)
.endproc

.import UART_ADDR
.export FORTH_INTERRUPT_HANDLER
.proc FORTH_INTERRUPT_HANDLER
    A16_IND16
    PHA
    PHX

    A8_IND8

    BIT UART_ADDR + W65C51::statusReg
    BPL @END
    LDX USER_IO_BUFFER_END
    LDA UART_ADDR + W65C51::dataReg
    STA USER_IO_BUFFER,X

    INX
    TXA
    AND #USER_IO_BUFFER_MASK
    STA USER_IO_BUFFER_END

@END:
    A16_IND16
    PLX
    PLA
    RTI
.endproc
.A16
.I16

.export DOCOL
.proc DOCOL
    LDA IP
    PHA
    LDA W
    STA IP
    ; JMP NEXT 
    ; this is the next procedure
.endproc
.proc NEXT
    LDA (IP)
    LDX IP
    INX
    INX
    STX IP
    TAX
    INC A
    INC A
    STA W
    JMP (0,X)
.endproc

.export PULL_DS
.proc PULL_DS ; data in A
    LDA (SP)  ; 6
    LDX SP    ; 4
    INX       ; 2
    INX       ; 2
    STX SP    ; 4
    RTS       ; 6 + 6 for JSR
.endproc      ; total 30

.export PUSH_DS
.proc PUSH_DS ; data in A
    LDX SP    ; 4
    DEX       ; 2
    DEX       ; 2
    STX SP    ; 4
    STA (SP)  ; 6
    RTS       ; 6 + 6 for JSR
.endproc      ; total 30

.export DOCON
.proc DOCON
    LDA (W)
    JSR PUSH_DS
    JMP NEXT
.endproc

.export DOVAR
.proc DOVAR
    LDA W
    JSR PUSH_DS
    JMP NEXT
.endproc

.feature string_escapes
.include "../forth/core.a65"
.export FORTH_WORD_DOSEMICOL
.export FORTH_WORD_LIT
.export FORTH_WORD_EXECUTE
.export FORTH_WORD_EXCL
.export FORTH_WORD_AT
.export FORTH_WORD_CEXCL
.export FORTH_WORD_CAT
.export FORTH_WORD_RGT
.export FORTH_WORD_R
.export FORTH_WORD_GTR
.export FORTH_WORD_PLUS
.export FORTH_WORD_2MUL
.export FORTH_WORD_DROP
.export FORTH_WORD_DUP
.export FORTH_WORD_SWAP
.export FORTH_WORD_OVER
.export FORTH_WORD_ROT
.export FORTH_WORD_NOT
.export FORTH_WORD_OR
.export FORTH_WORD_AND
.export FORTH_WORD_XOR
.export LAST_WORD
.export FORTH_WORD_0EQ
.export FORTH_WORD_BRANCH
.export FORTH_WORD_0BRANCH
.export FORTH_WORD_O_PARFINDC_PAR
.export FORTH_WORD_O_PARLOOPC_PAR
.export FORTH_WORD_LEAVE
.export FORTH_WORD_I
.export FORTH_WORD_O_PARDOC_PAR
.export FORTH_WORD_CMOVE
.export FORTH_WORD_PLUSEXCL
.export FORTH_WORD_EQ
.export FORTH_WORD_LT
.export FORTH_WORD_MINUS
.export FORTH_WORD_2DROP
.export FORTH_WORD_2DUP
.export FORTH_WORD_ENCLOSE
.export FORTH_WORD_MDIVMOD
