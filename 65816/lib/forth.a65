.include "../include/std.inc"
.include "../include/uartImport.inc"
.include "../include/charDisplayImport.inc"

; FORTH_TRACE = 1
.ifdef FORTH_TRACE
    .include "../include/uartDebugMsg.inc"
    .debuginfo      +
.endif

; Memory map:
;   0000..00FF pseudo registers
;   0100..D0-1  Return stack `R0` & `RP` 
;    D0 ..      dictionary `DP`
;       ..       PAD
;       ..??FF data stack `S0` & `SP`
;              Line input buffer
;              SD card buffer
;              UART/keyboard buffer
;       .. ??  User variables

.A16
.I16

.import DISPLAY_PCR
.import TIMER_MS_VIA
.import TICKS_IN_MS

.zeropage
.exportzp SP
SP: 
    .res 2
.exportzp IP
IP:
    .res 2
W:
    .res 2

FORTH_TMP_1:
    .res 2
FORTH_TMP_2:
    .res 2
FORTH_TMP_3:
    .res 2
FORTH_TMP_4:
    .res 2

USER_IO_BUFFER_START:
    .res 1
USER_IO_BUFFER_END:
    .res 1
PC_2_BUFFER_START:
    .res 1
PC_2_BUFFER_END:
    .res 1

.ifdef FORTH_TRACE
DEBUG_INIT_STATUS:
    .res 2
.endif

TIMER_MS:
    .res 4

.code
R0_INIT_VALUE = $1FF ; for return stack
; in case of running from RAM nere will be the code
.import D0_INIT_VALUE ; for Dictionary
S0_INIT_VALUE = LINE_INPUT_BUFFER - 1 ; for Data stack
LINE_INPUT_BUFFER = SD_CARD_BUFFER_BLOCK - 200
SD_CARD_BUFFER_BLOCK = SD_CARD_BUFFER - 4
SD_CARD_BUFFER = USER_VARIABLES - 512
USER_VARIABLES = PC_2_BUFFER - (END_INITIAL_USER_VARIABLES - INITIAL_USER_VARIABLES)
PC_2_BUFFER = USER_IO_BUFFER - $20
USER_IO_BUFFER = MAX_RAM - $20
MAX_RAM = $8000

PC_2_BUFFER_MASK = $1F
USER_IO_BUFFER_MASK = $1F

.export USER_IO_BUFFER
.exportzp USER_IO_BUFFER_START
.exportzp USER_IO_BUFFER_END

.macro  FString Arg
        .byte   .strlen(Arg), Arg
.endmacro

INITIAL_USER_VARIABLES:
; todo separate variables with inital value and one that can be zeroed
UV_R0:
    .word R0_INIT_VALUE
UV_S0:
    .word S0_INIT_VALUE
UV_LIB:
    .word LINE_INPUT_BUFFER
UV_SD_BUF:
    .word SD_CARD_BUFFER
UV_KEY:
    .word FORTH_WORD_ANY_KEY
    ; .word FORTH_WORD_UART_KEY ; UART input reader
UV_EMIT:
    .word FORTH_WORD_EMIT_BOTH ; UART emitter
    ; .word FORTH_WORD_UART_EMIT ; UART emitter
UV_STATE:
    .word 0
UV_IN:
    .word 0
UV_CURRENT:
    .word 0
UV_CONTEXT:
    .word 0
UV_FORTH_LINK:
    .word LAST_WORD
UV_ERROR:
    .word FORTH_WORD_ERROR
UV_DP:
    .word D0_INIT_VALUE
UV_HLD:
    .word 0
UV_BASE:
    .word 10
UV_WIDTH:
    .word 31
UV_DPL:
    .word 0
UV_CSP:
    .word 0
UV_DISP_LINE: ; delete when I can properly read from display
    .word 0
UV_PC2_STATUS:
    .word 0
UV_FAT_SEC_IN_CLUS:
    .word 0
UV_FAT_ROOT_CLUS:
    .word 0, 0
UV_FAT_SECTOR:
    .word 0, 0
UV_FAT_DATA_SEC:
    .word 0, 0
UV_FAT_CUR_CLUSTER:
    .word 0, 0
UV_FAT_CUR_SEC_IN_CLUSTER:
    .word 0
UV_FAT_CUR_FILE_SIZE:
    .word 0, 0
END_INITIAL_USER_VARIABLES:

; Error messages:
MSG_WRONG_NUMBER:
    FString "wrong number format"
MSG_STACK_UNDERFLOW:
    FString "stack underflow"
MSG_STACK_OVERFLOW:
    FString "stack overflow"
MSG_NOT_COMPILING:
    FString "not compiling"
MSG_WRONG_STACK_POINT:
    FString "stack pointer was changed"
MSG_NOT_EXEC:
    FString "not executing"
MSG_NOT_PAIRS:
    FString "code block do not closed"
MSG_COMPILE_NOT_FOUND:
    FString "can't find word"
MSG_FILE_NOT_FOUND:
    FString "file not found"

; Error codes:
SD_ERROR_BUSY = 1
SD_ERROR_CMD0 = 2
SD_ERROR_CMD8 = 3
SD_ERROR_CMD41 = 4
SD_ERROR_CMD_READ = 5
SD_ERROR_READ_NO_START_MARKER = 6
SD_ERROR_READ_WRONG_START_MARKER = 7
SD_ERROR_WRONG_BOOT_SECTOR_SIGNATURE = 8
SD_ERROR_WRONG_PARTITION_TYPE = 9
SD_ERROR_WRONG_FAT_BYTES_PER_LOGICAL_SECTOR = 10
SD_ERROR_WRONG_FATS_NUMBER = 11
SD_ERROR_WRONG_FAT_MEDIA_DESCRIPTOR = 12
SD_ERROR_FAT_ZERO_SECTORS_PER_CLUSTER = 13

KEYMAP:
    .incbin "keymap.bin"

.export FORTH_MAIN
.proc FORTH_MAIN
    ENABNE_NATIVE_MODE
    A16_IND16

.ifdef FORTH_TRACE
    LDA $FF
    STA DEBUG_INIT_STATUS
.endif

    LDA #FORTH_WORD_COLD+2
    STA W
    JMP (FORTH_WORD_COLD)
.endproc

.import UART_ADDR
.export FORTH_INTERRUPT_HANDLER
.proc FORTH_INTERRUPT_HANDLER
    PHA
    PHX
    PHY
    PHP

    A8_IND8

    LDA TIMER_MS_VIA + W65C22::IFR
    AND #%01000000
    BEQ @KEYBOARD
    LDA TIMER_MS_VIA + W65C22::T1C_L
    A16
    INC TIMER_MS
    BNE @END
    INC TIMER_MS+2
    BRA @END

.a8
@KEYBOARD:
    LDA VIA_22_SECOND + W65C22::IFR
    AND #2
    BEQ @UART
    LDX PC_2_BUFFER_END
    LDA VIA_22_SECOND + W65C22::RA
    STA PC_2_BUFFER,X
    INX
    TXA
    AND #PC_2_BUFFER_MASK
    STA PC_2_BUFFER_END
    BRA @END

@UART:
    LDA UART_ADDR + W65C51::statusReg
    AND #8
    BEQ @END
    LDX USER_IO_BUFFER_END
    LDA UART_ADDR + W65C51::dataReg
    STA USER_IO_BUFFER,X

    INX
    TXA
    AND #USER_IO_BUFFER_MASK
    STA USER_IO_BUFFER_END

@END:
    PLP
    PLY
    PLX
    PLA
    RTI
.endproc
.A16
.I16

.ifdef FORTH_TRACE
.macro PRINT_WORD ADDR
    LDA ADDR+1
    JSR UART_PRINT_HEX
    LDA ADDR
    JSR UART_PRINT_HEX
.endmacro

.macro PRINT_WORD_HOP ADDR
    LDY #1
    LDA (ADDR),Y
    JSR UART_PRINT_HEX
    LDA (ADDR)
    JSR UART_PRINT_HEX
.endmacro
.endif

.export DOCOL
.proc DOCOL
    LDA IP
    PHA
    LDA W
    STA IP
    ; JMP NEXT 
    ; this is the next procedure
.endproc
.proc NEXT
.ifdef FORTH_TRACE
    A8_IND8
    LDA DEBUG_INIT_STATUS
    BNE @SKIP

    LDA #'N'
    JSR UART_WRITE
    PRINT_WORD IP
    PRINT_WORD_HOP IP
    PRINT_WORD W
    PRINT_WORD_HOP W
    PRINT_WORD SP
    PRINT_WORD_HOP SP
    PRINT_WORD USER_VARIABLES-INITIAL_USER_VARIABLES+UV_DP
    LDA USER_IO_BUFFER_START
    JSR UART_PRINT_HEX
    LDA USER_IO_BUFFER_END
    JSR UART_PRINT_HEX
    TSC
    JSR UART_PRINT_HEX
    JSR UART_PRINT_NEW_LINE

@SKIP:
    A16_IND16
.endif

    LDA (IP)
    LDX IP
    INX
    INX
    STX IP
    TAX
    INC A
    INC A
    STA W
    JMP (0,X)
.endproc

.export PULL_DS
.proc PULL_DS ; data in A
    LDA (SP)  ; 6
    LDX SP    ; 4
    INX       ; 2
    INX       ; 2
    STX SP    ; 4
    RTS       ; 6 + 6 for JSR
.endproc      ; total 30

.export PUSH_DS
.proc PUSH_DS ; data in A
    LDX SP    ; 4
    DEX       ; 2
    DEX       ; 2
    STX SP    ; 4
    STA (SP)  ; 6
    RTS       ; 6 + 6 for JSR
.endproc      ; total 30

.export DOCON
.proc DOCON
    LDA (W)
    JSR PUSH_DS
    JMP NEXT
.endproc

.proc DO2CON
    LDA (W)
    JSR PUSH_DS
    LDY #2
    LDA (W),Y
    JSR PUSH_DS
    JMP NEXT
.endproc

.export DOVAR
.proc DOVAR
    LDA W
    JSR PUSH_DS
    JMP NEXT
.endproc

.proc WAIT_FOR_SD_SHIFT ; should be 8 bit for A
    .A8
    LDA #%00000100
@loop:
    BIT VIA_22_FIRST + W65C22::IFR
    BEQ @loop
    STA VIA_22_FIRST + W65C22::IFR
    RTS
    .A16
.endproc

SD_CMD_0:
    .byte ( 0 | $40 ), 0, 0, 0, 0, $95
SD_CMD_8:
    .byte ( 8 | $40 ), 0, 0, 1, $AA, $87
SD_CMD_55:
    .byte ( 55 | $40 ), 0, 0, 0, 0, $65
SD_CMD_41:
    .byte ( 41 | $40 ), $40, 0, 0, 0, $77

.feature string_escapes
.include "../forth/core.a65"

.export USER_IO_BUFFER_START
.export USER_IO_BUFFER_END


.export FORTH_WORD_DOSEMICOL
.export FORTH_WORD_LIT
.export FORTH_WORD_EXECUTE
.export FORTH_WORD_EXCL
.export FORTH_WORD_AT
.export FORTH_WORD_CEXCL
.export FORTH_WORD_CAT
.export FORTH_WORD_RGT
.export FORTH_WORD_R
.export FORTH_WORD_GTR
.export FORTH_WORD_PLUS
.export FORTH_WORD_2MUL
.export FORTH_WORD_DROP
.export FORTH_WORD_DUP
.export FORTH_WORD_SWAP
.export FORTH_WORD_OVER
.export FORTH_WORD_ROT
.export FORTH_WORD_NOT
.export FORTH_WORD_OR
.export FORTH_WORD_AND
.export FORTH_WORD_XOR
.export LAST_WORD
.export FORTH_WORD_0EQ
.export FORTH_WORD_BRANCH
.export FORTH_WORD_0BRANCH
.export FORTH_WORD_O_PARFINDC_PAR
.export FORTH_WORD_O_PARLOOPC_PAR
.export FORTH_WORD_LEAVE
.export FORTH_WORD_I
.export FORTH_WORD_O_PARDOC_PAR
.export FORTH_WORD_CMOVE
.export FORTH_WORD_PLUSEXCL
.export FORTH_WORD_EQ
.export FORTH_WORD_LT
.export FORTH_WORD_MINUS_OP
.export FORTH_WORD_2DROP
.export FORTH_WORD_2DUP
.export FORTH_WORD_ENCLOSE
.export FORTH_WORD_MDIVMOD
.export FORTH_WORD_UMUL
.export FORTH_WORD_UDIV
.export FORTH_WORD_DPLUS
.export FORTH_WORD_DIGIT
