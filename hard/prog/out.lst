------- FILE keyboard2.asm LEVEL 1 PASS 1
      1  0000					      INCDIR	"std"
------- FILE std.asm LEVEL 2 PASS 1
      0  0000 ????				      INCLUDE	"std.asm"
      1  0000 ????				      PROCESSOR	6502
------- FILE via_macro.asm LEVEL 3 PASS 1
      0  0000 ????				      INCLUDE	"via_macro.asm"
      1  0000 ????						; Add VIA registers
      2  0000 ????						; {1} = name
      3  0000 ????						; {2} = address
      4  0000 ????				      MAC	define_via
      5  0000 ????			   VIA_{1}_RB =	{2}
      6  0000 ????			   VIA_{1}_RA =	{2}+1
      7  0000 ????			   VIA_{1}_DDRB =	{2}+2
      8  0000 ????			   VIA_{1}_DDRA =	{2}+3
      9  0000 ????			   VIA_{1}_T1C_L =	{2}+4
     10  0000 ????			   VIA_{1}_T1C_H =	{2}+5
     11  0000 ????			   VIA_{1}_T1L_L =	{2}+6
     12  0000 ????			   VIA_{1}_T1L_H =	{2}+7
     13  0000 ????			   VIA_{1}_T2C_L =	{2}+8
     14  0000 ????			   VIA_{1}_T2C_H =	{2}+9
     15  0000 ????			   VIA_{1}_SR =	{2}+$A
     16  0000 ????			   VIA_{1}_ACR =	{2}+$B
     17  0000 ????			   VIA_{1}_PCR =	{2}+$C
     18  0000 ????			   VIA_{1}_IFR =	{2}+$D
     19  0000 ????			   VIA_{1}_IER =	{2}+$E
     20  0000 ????			   VIA_{1}_ORA =	{2}+$F
     21  0000 ????				      ENDM
------- FILE std.asm
      3  0000 ????
      0  0000 ????				      DEFINE_VIA	FIRST, %1000000000010000
      1  0000 ????	       80 10	   VIA_FIRST_RB =	%1000000000010000
      2  0000 ????	       80 11	   VIA_FIRST_RA =	%1000000000010000+1
      3  0000 ????	       80 12	   VIA_FIRST_DDRB =	%1000000000010000+2
      4  0000 ????	       80 13	   VIA_FIRST_DDRA =	%1000000000010000+3
      5  0000 ????	       80 14	   VIA_FIRST_T1C_L =	%1000000000010000+4
      6  0000 ????	       80 15	   VIA_FIRST_T1C_H =	%1000000000010000+5
      7  0000 ????	       80 16	   VIA_FIRST_T1L_L =	%1000000000010000+6
      8  0000 ????	       80 17	   VIA_FIRST_T1L_H =	%1000000000010000+7
      9  0000 ????	       80 18	   VIA_FIRST_T2C_L =	%1000000000010000+8
     10  0000 ????	       80 19	   VIA_FIRST_T2C_H =	%1000000000010000+9
     11  0000 ????	       80 1a	   VIA_FIRST_SR =	%1000000000010000+$A
     12  0000 ????	       80 1b	   VIA_FIRST_ACR =	%1000000000010000+$B
     13  0000 ????	       80 1c	   VIA_FIRST_PCR =	%1000000000010000+$C
     14  0000 ????	       80 1d	   VIA_FIRST_IFR =	%1000000000010000+$D
     15  0000 ????	       80 1e	   VIA_FIRST_IER =	%1000000000010000+$E
     16  0000 ????	       80 1f	   VIA_FIRST_ORA =	%1000000000010000+$F
      5  0000 ????
      6  0000 ????						; Writes two bytes into memory
      7  0000 ????						; {1} - data
      8  0000 ????						; {2} - addr
      9  0000 ????				      MAC	write_word
     10  0000 ????				      LDA	#<{1}
     11  0000 ????				      STA	{2}
     12  0000 ????				      LDA	#>{1}
     13  0000 ????				      STA	{2}+1
     14  0000 ????				      ENDM
     15  0000 ????
     16  0000 ????						; Setup reset vector
     17  0000 ????						; {1} - reset
     18  0000 ????						; {2} - IRQ
     19  0000 ????						; {3} - NMI
     20  0000 ????				      MAC	reset_vector
     21  0000 ????				      ORG	$FFFA
     22  0000 ????				      DC.W	{3}
     23  0000 ????				      ORG	$FFFC
     24  0000 ????				      DC.W	{1}
     25  0000 ????				      ORG	$FFFE
     26  0000 ????				      DC.W	{2}
     27  0000 ????				      ENDM
     28  0000 ????
     29  0c00					      ORG	$0C00
------- FILE keyboard2.asm
      3  0c00
      4  0c00		       00 05	   buf_ind    =	5
      5  0c00		       00 0a	   buf_start  =	10
      6  0c00
      7  0c00				   start
      8  0c00							; Enable CA1 interrupt
      9  0c00		       a9 82		      LDA	#$82
     10  0c02		       8d 1e 80 	      STA	VIA_FIRST_IER
     11  0c05
     12  0c05							; Disable latch
     13  0c05		       a9 00		      LDA	#$00
     14  0c07		       8d 1b 80 	      STA	VIA_FIRST_ACR
     15  0c0a
     16  0c0a							; CA1 interrupts on positive edge
     17  0c0a		       a9 01		      LDA	#$01
     18  0c0c		       8d 1c 80 	      STA	VIA_FIRST_PCR
     19  0c0f
     20  0c0f							; Setup port directions
     21  0c0f		       a9 00		      LDA	#$00
     22  0c11		       8d 13 80 	      STA	VIA_FIRST_DDRA
     23  0c14
     24  0c14		       ad 1d 80 	      LDA	VIA_FIRST_IFR
     25  0c17		       ad 11 80 	      LDA	VIA_FIRST_RA
     26  0c1a
     27  0c1a		       58		      CLI
     28  0c1b
     29  0c1b		       a0 05		      LDY	#$05
     30  0c1d
     31  0c1d				   loop
     32  0c1d		       c4 05		      CPY	buf_ind
     33  0c1f		       90 05		      BCC	end
     34  0c21		       4c 1d 0c 	      JMP	loop
     35  0c24
     36  0c24				   read_kb
     37  0c24		       ad 1d 80 	      LDA	VIA_FIRST_IFR
     38  0c27		       a6 05		      LDX	buf_ind
     39  0c29		       ad 11 80 	      LDA	VIA_FIRST_RA
     40  0c2c		       95 0a		      STA	buf_start,X
     41  0c2e		       e8		      INX
     42  0c2f		       86 05		      STX	buf_ind
     43  0c31		       40		      RTI
     44  0c32
     45  0c32				   end
     46  0c32
      0  0c32					      RESET_VECTOR	start, read_kb, start
      1  fffa					      ORG	$FFFA
      2  fffa		       00 0c		      DC.W	start
      3  fffc					      ORG	$FFFC
      4  fffc		       00 0c		      DC.W	start
      5  fffe					      ORG	$FFFE
      6  fffe		       24 0c		      DC.W	read_kb
------- FILE keyboard2.asm LEVEL 1 PASS 2
      1  fffe					      INCDIR	"std"
------- FILE std.asm LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"std.asm"
      1  10000 ????				       PROCESSOR	6502
------- FILE via_macro.asm LEVEL 3 PASS 2
      0  10000 ????				       INCLUDE	"via_macro.asm"
      1  10000 ????						; Add VIA registers
      2  10000 ????						; {1} = name
      3  10000 ????						; {2} = address
      4  10000 ????				       MAC	define_via
      5  10000 ????			    VIA_{1}_RB =	{2}
      6  10000 ????			    VIA_{1}_RA =	{2}+1
      7  10000 ????			    VIA_{1}_DDRB =	{2}+2
      8  10000 ????			    VIA_{1}_DDRA =	{2}+3
      9  10000 ????			    VIA_{1}_T1C_L =	{2}+4
     10  10000 ????			    VIA_{1}_T1C_H =	{2}+5
     11  10000 ????			    VIA_{1}_T1L_L =	{2}+6
     12  10000 ????			    VIA_{1}_T1L_H =	{2}+7
     13  10000 ????			    VIA_{1}_T2C_L =	{2}+8
     14  10000 ????			    VIA_{1}_T2C_H =	{2}+9
     15  10000 ????			    VIA_{1}_SR =	{2}+$A
     16  10000 ????			    VIA_{1}_ACR =	{2}+$B
     17  10000 ????			    VIA_{1}_PCR =	{2}+$C
     18  10000 ????			    VIA_{1}_IFR =	{2}+$D
     19  10000 ????			    VIA_{1}_IER =	{2}+$E
     20  10000 ????			    VIA_{1}_ORA =	{2}+$F
     21  10000 ????				       ENDM
------- FILE std.asm
      3  10000 ????
      0  10000 ????				       DEFINE_VIA	FIRST, %1000000000010000
      1  10000 ????		80 10	    VIA_FIRST_RB =	%1000000000010000
      2  10000 ????		80 11	    VIA_FIRST_RA =	%1000000000010000+1
      3  10000 ????		80 12	    VIA_FIRST_DDRB =	%1000000000010000+2
      4  10000 ????		80 13	    VIA_FIRST_DDRA =	%1000000000010000+3
      5  10000 ????		80 14	    VIA_FIRST_T1C_L =	%1000000000010000+4
      6  10000 ????		80 15	    VIA_FIRST_T1C_H =	%1000000000010000+5
      7  10000 ????		80 16	    VIA_FIRST_T1L_L =	%1000000000010000+6
      8  10000 ????		80 17	    VIA_FIRST_T1L_H =	%1000000000010000+7
      9  10000 ????		80 18	    VIA_FIRST_T2C_L =	%1000000000010000+8
     10  10000 ????		80 19	    VIA_FIRST_T2C_H =	%1000000000010000+9
     11  10000 ????		80 1a	    VIA_FIRST_SR =	%1000000000010000+$A
     12  10000 ????		80 1b	    VIA_FIRST_ACR =	%1000000000010000+$B
     13  10000 ????		80 1c	    VIA_FIRST_PCR =	%1000000000010000+$C
     14  10000 ????		80 1d	    VIA_FIRST_IFR =	%1000000000010000+$D
     15  10000 ????		80 1e	    VIA_FIRST_IER =	%1000000000010000+$E
     16  10000 ????		80 1f	    VIA_FIRST_ORA =	%1000000000010000+$F
      5  10000 ????
      6  10000 ????						; Writes two bytes into memory
      7  10000 ????						; {1} - data
      8  10000 ????						; {2} - addr
      9  10000 ????				       MAC	write_word
     10  10000 ????				       LDA	#<{1}
     11  10000 ????				       STA	{2}
     12  10000 ????				       LDA	#>{1}
     13  10000 ????				       STA	{2}+1
     14  10000 ????				       ENDM
     15  10000 ????
     16  10000 ????						; Setup reset vector
     17  10000 ????						; {1} - reset
     18  10000 ????						; {2} - IRQ
     19  10000 ????						; {3} - NMI
     20  10000 ????				       MAC	reset_vector
     21  10000 ????				       ORG	$FFFA
     22  10000 ????				       DC.W	{3}
     23  10000 ????				       ORG	$FFFC
     24  10000 ????				       DC.W	{1}
     25  10000 ????				       ORG	$FFFE
     26  10000 ????				       DC.W	{2}
     27  10000 ????				       ENDM
     28  10000 ????
     29  0c00					      ORG	$0C00
------- FILE keyboard2.asm
      3  0c00
      4  0c00		       00 05	   buf_ind    =	5
      5  0c00		       00 0a	   buf_start  =	10
      6  0c00
      7  0c00				   start
      8  0c00							; Enable CA1 interrupt
      9  0c00		       a9 82		      LDA	#$82
     10  0c02		       8d 1e 80 	      STA	VIA_FIRST_IER
     11  0c05
     12  0c05							; Disable latch
     13  0c05		       a9 00		      LDA	#$00
     14  0c07		       8d 1b 80 	      STA	VIA_FIRST_ACR
     15  0c0a
     16  0c0a							; CA1 interrupts on positive edge
     17  0c0a		       a9 01		      LDA	#$01
     18  0c0c		       8d 1c 80 	      STA	VIA_FIRST_PCR
     19  0c0f
     20  0c0f							; Setup port directions
     21  0c0f		       a9 00		      LDA	#$00
     22  0c11		       8d 13 80 	      STA	VIA_FIRST_DDRA
     23  0c14
     24  0c14		       ad 1d 80 	      LDA	VIA_FIRST_IFR
     25  0c17		       ad 11 80 	      LDA	VIA_FIRST_RA
     26  0c1a
     27  0c1a		       58		      CLI
     28  0c1b
     29  0c1b		       a0 05		      LDY	#$05
     30  0c1d
     31  0c1d				   loop
     32  0c1d		       c4 05		      CPY	buf_ind
     33  0c1f		       90 11		      BCC	end
     34  0c21		       4c 1d 0c 	      JMP	loop
     35  0c24
     36  0c24				   read_kb
     37  0c24		       ad 1d 80 	      LDA	VIA_FIRST_IFR
     38  0c27		       a6 05		      LDX	buf_ind
     39  0c29		       ad 11 80 	      LDA	VIA_FIRST_RA
     40  0c2c		       95 0a		      STA	buf_start,X
     41  0c2e		       e8		      INX
     42  0c2f		       86 05		      STX	buf_ind
     43  0c31		       40		      RTI
     44  0c32
     45  0c32				   end
     46  0c32
      0  0c32					      RESET_VECTOR	start, read_kb, start
      1  fffa					      ORG	$FFFA
      2  fffa		       00 0c		      DC.W	start
      3  fffc					      ORG	$FFFC
      4  fffc		       00 0c		      DC.W	start
      5  fffe					      ORG	$FFFE
      6  fffe		       24 0c		      DC.W	read_kb
