------- FILE bootloader.asm LEVEL 1 PASS 3
      1 U8000					      PROCESSOR	6502
      2 U8000		       f9 00	   CODE_START =	$F900
      3 U8000		       7e 00	   UPPER_RAM_START =	$7E00
------- FILE ../std/std.asm LEVEL 2 PASS 3
      0 U8000 ????				      INCLUDE	"../std/std.asm"
      1 U8000 ????				      PROCESSOR	6502
      2 U8000 ????
      3 U8000 ????				      INCDIR	"../std"
      4 U8000 ????				      INCDIR	"../std/dasm-structure-macros/lib"
      5 U8000 ????
------- FILE initSegments.asm LEVEL 3 PASS 3
      0 U8000 ????				      INCLUDE	initSegments.asm
      1 U003a ????				      SEG.U	zpVars
      2 U0000					      ORG	$0
      3 U0000
      4 U0000				  -	      IFNCONST	CODE_START
      5 U0000				  -CODE_START =	$200
      6 U0000					      ENDIF
      7 U0000
      8  10000 ????				       SEG	code
      9  f900					      ORG	CODE_START
     10  f900
     11  f900				  -	      IFNCONST	UPPER_RAM_START
     12  f900				  -UPPER_RAM_START =	$7FFF
     13  f900					      ENDIF
     14  f900
     15 U8000 ????				      SEG.U	upperRam
     16 U7e00					      ORG	UPPER_RAM_START
------- FILE ../std/std.asm
------- FILE STRUCMAC.ASM LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	STRUCMAC.ASM
     22 U7e00					      LIST	ON
     23 U7e00
     24 U7e00				   _STRUC_MAC_I SET	1
     25 U7e00
     26 U7e00							; Arguments
     27 U7e00		       00 01	   IS_SET     =	1
     28 U7e00		       00 02	   IS_CLEAR   =	2
     29 U7e00		       00 01	   IS_HIGH    =	1
     30 U7e00		       00 02	   IS_LOW     =	2
     31 U7e00		       00 03	   UP_TO      =	3
     32 U7e00		       00 04	   DOWN_TO    =	4
     33 U7e00		       00 05	   IS_POS     =	5
     34 U7e00		       00 06	   IS_NEG     =	6
     35 U7e00		       00 07	   IS_0       =	7
     36 U7e00		       00 08	   IS_NON_0   =	8
     37 U7e00
     38 U7e00		       01 01	   NEG_NRs    =	$101
     39 U7e00		       01 02	   POS_NRs    =	$102
     40 U7e00		       01 04	   ACCUM      =	$104
     41 U7e00		       01 05	   X_REG      =	$105
     42 U7e00		       01 03	   Y_REG      =	$103
     43 U7e00
     44 U7e00							;			   +--------------------------+
     45 U7e00							;			   |  IF_xx...ELSE_...END_IF  |
     46 U7e00							;			   +==========================+
     47 U7e00					      MACRO	if_eq
     48 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     49 U7e00					      BNE	.tmp
     50 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     51 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     52 U7e00					      INCLUDE	"STACKPUSH.ASM"
     53 U7e00					      ENDM
     54 U7e00							;----------------
     55 U7e00
     56 U7e00					      MACRO	else_
     57 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     58 U7e00					      JMP	.tmp
     59 U7e00				   _STRUCT_MAC_LABEL_0
     60 U7e00				   _STK_LVL_1 SET	_STRUC_MAC_I
     61 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     62 U7e00					      ENDM
     63 U7e00							;----------------
     64 U7e00
     65 U7e00					      MACRO	end_if
     66 U7e00				   _STRUCT_MAC_LABEL_0
     67 U7e00					      INCLUDE	"STACKPOP.ASM"
     68 U7e00					      ENDM
     69 U7e00							;----------------
     70 U7e00
     71 U7e00					      MACRO	if_zero
     72 U7e00					      IF_EQ
     73 U7e00					      ENDM
     74 U7e00							;----------------
     75 U7e00
     76 U7e00					      MACRO	if_neq
     77 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     78 U7e00					      BEQ	.tmp
     79 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     80 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     81 U7e00					      INCLUDE	"STACKPUSH.ASM"
     82 U7e00					      ENDM
     83 U7e00							;----------------
     84 U7e00
     85 U7e00					      MACRO	if_not_zero
     86 U7e00					      IF_NEQ
     87 U7e00					      ENDM
     88 U7e00							;----------------
     89 U7e00
     90 U7e00					      MACRO	if_plus
     91 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     92 U7e00					      BMI	.tmp
     93 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     94 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     95 U7e00					      INCLUDE	"STACKPUSH.ASM"
     96 U7e00					      ENDM
     97 U7e00							;----------------
     98 U7e00
     99 U7e00					      MACRO	if_minus
    100 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    101 U7e00					      BPL	.tmp
    102 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    103 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    104 U7e00					      INCLUDE	"STACKPUSH.ASM"
    105 U7e00					      ENDM
    106 U7e00							;----------------
    107 U7e00
    108 U7e00					      MACRO	if_neg
    109 U7e00					      IF_MINUS
    110 U7e00					      ENDM
    111 U7e00							;----------------
    112 U7e00
    113 U7e00					      MACRO	if_c_set
    114 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    115 U7e00					      BCC	.tmp
    116 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    117 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    118 U7e00					      INCLUDE	"STACKPUSH.ASM"
    119 U7e00					      ENDM
    120 U7e00							;----------------
    121 U7e00
    122 U7e00					      MACRO	if_c_clr
    123 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    124 U7e00					      BCS	.tmp
    125 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    126 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    127 U7e00					      INCLUDE	"STACKPUSH.ASM"
    128 U7e00					      ENDM
    129 U7e00							;----------------
    130 U7e00
    131 U7e00					      MACRO	if_ge
    132 U7e00					      IF_C_SET
    133 U7e00					      ENDM
    134 U7e00							;----------------
    135 U7e00
    136 U7e00					      MACRO	if_lt
    137 U7e00					      IF_C_CLR
    138 U7e00					      ENDM
    139 U7e00							;----------------
    140 U7e00
    141 U7e00					      MACRO	if_v_set
    142 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    143 U7e00					      BVC	.tmp
    144 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    145 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    146 U7e00					      INCLUDE	"STACKPUSH.ASM"
    147 U7e00					      ENDM
    148 U7e00							;----------------
    149 U7e00
    150 U7e00					      MACRO	if_v_clr
    151 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    152 U7e00					      BVS	.tmp
    153 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    154 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    155 U7e00					      INCLUDE	"STACKPUSH.ASM"
    156 U7e00					      ENDM
    157 U7e00							;----------------
    158 U7e00
    159 U7e00					      MACRO	if_flag_var
    160 U7e00					      IF	![ {2} == IS_SET || {2} == IS_CLEAR ]
    161 U7e00					      ECHO	"Condition must be: IS_SET or IS_CLEAR"
    162 U7e00					      ERR
    163 U7e00					      ENDIF
    164 U7e00					      BIT	{1}
    165 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    166 U7e00					      IF	{2} == IS_SET
    167 U7e00					      BPL	.tmp
    168 U7e00					      ELSE
    169 U7e00					      BMI	.tmp
    170 U7e00					      ENDIF
    171 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    172 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    173 U7e00					      INCLUDE	"STACKPUSH.ASM"
    174 U7e00					      ENDM
    175 U7e00							;----------------
    176 U7e00
    177 U7e00					      MACRO	if_bit
    178 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    179 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    180 U7e00					      ERR
    181 U7e00					      ENDIF
    182 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    183 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    184 U7e00					      ERR
    185 U7e00					      ENDIF
    186 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    187 U7e00					      IF	[ {2} < 6 ]
    188 U7e00					      LDA	#[1 << {2}]
    189 U7e00					      BIT	{1}
    190 U7e00					      IF	[ {3} == IS_HIGH ]
    191 U7e00					      BEQ	.tmp
    192 U7e00					      ELSE
    193 U7e00					      BNE	.tmp
    194 U7e00					      ENDIF
    195 U7e00					      ELSE
    196 U7e00					      BIT	{1}
    197 U7e00					      IF	[ {2} == 7 ]
    198 U7e00					      IF	[ {3} == IS_HIGH ]
    199 U7e00					      BPL	.tmp
    200 U7e00					      ELSE
    201 U7e00					      BMI	.tmp
    202 U7e00					      ENDIF
    203 U7e00					      ELSE
    204 U7e00					      IF	[ {3} == IS_HIGH ]
    205 U7e00					      BVC	.tmp
    206 U7e00					      ELSE
    207 U7e00					      BVS	.tmp
    208 U7e00					      ENDIF
    209 U7e00					      ENDIF
    210 U7e00					      ENDIF
    211 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    212 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    213 U7e00					      INCLUDE	"STACKPUSH.ASM"
    214 U7e00					      ENDM
    215 U7e00							;----------------
    216 U7e00
    217 U7e00					      MACRO	if_mem_byte_neg
    218 U7e00					      BIT	{1}
    219 U7e00					      IF_MINUS
    220 U7e00					      ENDM
    221 U7e00							;----------------
    222 U7e00
    223 U7e00					      MACRO	if_mem_byte_pos
    224 U7e00					      BIT	{1}
    225 U7e00					      IF_PLUS
    226 U7e00					      ENDM
    227 U7e00							;----------------
    228 U7e00
    229 U7e00
    230 U7e00							;			  +--------------------------+
    231 U7e00							;			  |	 BEGIN...AGAIN	     |
    232 U7e00							;			  |	 BEGIN...UNTIL	     |
    233 U7e00							;			  |  BEGIN...WHILE...REPEAT  |
    234 U7e00							;			  +==========================+
    235 U7e00
    236 U7e00					      MACRO	begin
    237 U7e00				   _STRUCT_MAC_LABEL_1
    238 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    239 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    240 U7e00					      INCLUDE	"STACKPUSH.ASM"
    241 U7e00					      ENDM
    242 U7e00							;----------------
    243 U7e00
    244 U7e00					      MACRO	again
    245 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    246 U7e00					      JMP	.tmp
    247 U7e00					      INCLUDE	"STACKPOP.ASM"
    248 U7e00					      ENDM
    249 U7e00							;----------------
    250 U7e00
    251 U7e00					      MACRO	while_eq
    252 U7e00					      IF_EQ
    253 U7e00					      ENDM
    254 U7e00							;----------------
    255 U7e00
    256 U7e00					      MACRO	repeat_
    257 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
    258 U7e00					      JMP	.tmp
    259 U7e00				   _STRUCT_MAC_LABEL_0
    260 U7e00					      INCLUDE	"STACKPOP2.ASM"
    261 U7e00					      ENDM
    262 U7e00							;----------------
    263 U7e00
    264 U7e00					      MACRO	while_neq
    265 U7e00					      IF_NEQ
    266 U7e00					      ENDM
    267 U7e00							;----------------
    268 U7e00
    269 U7e00					      MACRO	while_zero
    270 U7e00					      IF_EQ
    271 U7e00					      ENDM
    272 U7e00							;----------------
    273 U7e00
    274 U7e00					      MACRO	while_not_zero
    275 U7e00					      IF_NEQ
    276 U7e00					      ENDM
    277 U7e00							;----------------
    278 U7e00
    279 U7e00					      MACRO	while_plus
    280 U7e00					      IF_PLUS
    281 U7e00					      ENDM
    282 U7e00							;----------------
    283 U7e00
    284 U7e00					      MACRO	while_minus
    285 U7e00					      IF_MINUS
    286 U7e00					      ENDM
    287 U7e00							;----------------
    288 U7e00
    289 U7e00					      MACRO	while_neg
    290 U7e00					      IF_MINUS
    291 U7e00					      ENDM
    292 U7e00							;----------------
    293 U7e00
    294 U7e00					      MACRO	while_c_clr
    295 U7e00					      IF_C_CLR
    296 U7e00					      ENDM
    297 U7e00							;----------------
    298 U7e00
    299 U7e00					      MACRO	while_c_set
    300 U7e00					      IF_C_SET
    301 U7e00					      ENDM
    302 U7e00							;----------------
    303 U7e00
    304 U7e00					      MACRO	while_ge
    305 U7e00					      IF_C_SET
    306 U7e00					      ENDM
    307 U7e00							;----------------
    308 U7e00
    309 U7e00					      MACRO	while_lt
    310 U7e00					      IF_C_CLR
    311 U7e00					      ENDM
    312 U7e00							;----------------
    313 U7e00
    314 U7e00					      MACRO	while_v_clr
    315 U7e00					      IF_V_CLR
    316 U7e00					      ENDM
    317 U7e00							;----------------
    318 U7e00
    319 U7e00					      MACRO	while_v_set
    320 U7e00					      IF_V_SET
    321 U7e00					      ENDM
    322 U7e00							;----------------
    323 U7e00
    324 U7e00					      MACRO	while_bit
    325 U7e00					      IF_BIT	{1}, {2}, {3}
    326 U7e00					      ENDM
    327 U7e00							;----------------
    328 U7e00
    329 U7e00					      MACRO	until_eq
    330 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    331 U7e00					      BNE	.tmp
    332 U7e00					      INCLUDE	"STACKPOP.ASM"
    333 U7e00					      ENDM
    334 U7e00							;----------------
    335 U7e00
    336 U7e00					      MACRO	until_zero
    337 U7e00					      UNTIL_EQ
    338 U7e00					      ENDM
    339 U7e00							;----------------
    340 U7e00
    341 U7e00					      MACRO	until_neq
    342 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    343 U7e00					      BEQ	.tmp
    344 U7e00					      INCLUDE	"STACKPOP.ASM"
    345 U7e00					      ENDM
    346 U7e00							;----------------
    347 U7e00
    348 U7e00					      MACRO	until_not_zero
    349 U7e00					      UNTIL_NEQ
    350 U7e00					      ENDM
    351 U7e00							;----------------
    352 U7e00
    353 U7e00					      MACRO	until_plus
    354 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    355 U7e00					      BMI	.tmp
    356 U7e00					      INCLUDE	"STACKPOP.ASM"
    357 U7e00					      ENDM
    358 U7e00							;----------------
    359 U7e00
    360 U7e00					      MACRO	until_minus
    361 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    362 U7e00					      BPL	.tmp
    363 U7e00					      INCLUDE	"STACKPOP.ASM"
    364 U7e00					      ENDM
    365 U7e00							;----------------
    366 U7e00
    367 U7e00					      MACRO	until_neg
    368 U7e00					      UNTIL_MINUS
    369 U7e00					      ENDM
    370 U7e00							;----------------
    371 U7e00
    372 U7e00					      MACRO	until_c_clr
    373 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    374 U7e00					      BCS	.tmp
    375 U7e00					      INCLUDE	"STACKPOP.ASM"
    376 U7e00					      ENDM
    377 U7e00							;----------------
    378 U7e00
    379 U7e00					      MACRO	until_c_set
    380 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    381 U7e00					      BCC	.tmp
    382 U7e00					      INCLUDE	"STACKPOP.ASM"
    383 U7e00					      ENDM
    384 U7e00							;----------------
    385 U7e00
    386 U7e00					      MACRO	until_ge
    387 U7e00					      UNTIL_C_SET
    388 U7e00					      ENDM
    389 U7e00							;----------------
    390 U7e00
    391 U7e00					      MACRO	until_lt
    392 U7e00					      UNTIL_C_CLR
    393 U7e00					      ENDM
    394 U7e00							;----------------
    395 U7e00
    396 U7e00					      MACRO	until_v_clr
    397 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    398 U7e00					      BVS	.tmp
    399 U7e00					      INCLUDE	"STACKPOP.ASM"
    400 U7e00					      ENDM
    401 U7e00							;----------------
    402 U7e00
    403 U7e00					      MACRO	until_v_set
    404 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    405 U7e00					      BVC	.tmp
    406 U7e00					      INCLUDE	"STACKPOP.ASM"
    407 U7e00					      ENDM
    408 U7e00							;----------------
    409 U7e00
    410 U7e00					      MACRO	until_bit
    411 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    412 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    413 U7e00					      ERR
    414 U7e00					      ENDIF
    415 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    416 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    417 U7e00					      ERR
    418 U7e00					      ENDIF
    419 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    420 U7e00					      IF	[ {2} < 6 ]
    421 U7e00					      LDA	#[1 << {2}]
    422 U7e00					      BIT	{1}
    423 U7e00					      IF	[ {3} == IS_HIGH ]
    424 U7e00					      BEQ	.tmp
    425 U7e00					      ELSE
    426 U7e00					      BNE	.tmp
    427 U7e00					      ENDIF
    428 U7e00					      ELSE
    429 U7e00					      BIT	{1}
    430 U7e00					      IF	[ {2} == 7 ]
    431 U7e00					      IF	[ {3} == IS_HIGH ]
    432 U7e00					      BPL	.tmp
    433 U7e00					      ELSE
    434 U7e00					      BMI	.tmp
    435 U7e00					      ENDIF
    436 U7e00					      ELSE
    437 U7e00					      IF	[ {3} == IS_HIGH ]
    438 U7e00					      BVC	.tmp
    439 U7e00					      ELSE
    440 U7e00					      BVS	.tmp
    441 U7e00					      ENDIF
    442 U7e00					      ENDIF
    443 U7e00					      ENDIF
    444 U7e00					      INCLUDE	"STACKPOP.ASM"
    445 U7e00					      ENDM
    446 U7e00							;----------------
    447 U7e00
    448 U7e00							;			  +--------------------+
    449 U7e00							;			  |   CASE statement   |
    450 U7e00							;			  +====================+
    451 U7e00
    452 U7e00					      MACRO	case
    453 U7e00					      IF	![ {1} == ACCUM || {1} == X_REG || {1} == Y_REG ]
    454 U7e00					      ECHO	"Register must be one of: ACCUM, X_REG or Y_REG"
    455 U7e00					      ERR
    456 U7e00					      ENDIF
    457 U7e00				   _TO_PUSH_1 SET	{1}
    458 U7e00				   _TO_PUSH_2 SET	_STRUC_MAC_I
    459 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    460 U7e00					      INCLUDE	"STKPUSH2.ASM"
    461 U7e00					      ENDM
    462 U7e00							;----------------
    463 U7e00
    464 U7e00					      MACRO	case_of
    465 U7e00					      IF	[ _STK_LVL_1 == ACCUM ]
    466 U7e00					      CMP	#{1}
    467 U7e00					      ENDIF
    468 U7e00					      IF	[ _STK_LVL_1 == X_REG ]
    469 U7e00					      CPX	#{1}
    470 U7e00					      ENDIF
    471 U7e00					      IF	[ _STK_LVL_1 == Y_REG ]
    472 U7e00					      CPY	#{1}
    473 U7e00					      ENDIF
    474 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    475 U7e00					      BNE	.tmp
    476 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    477 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    478 U7e00					      INCLUDE	"STACKPUSH.ASM"
    479 U7e00					      ENDM
    480 U7e00							;----------------
    481 U7e00
    482 U7e00					      MACRO	end_of
    483 U7e00				   .case_end  set	_STRUCT_MAC_LABEL_,_STK_LVL_3
    484 U7e00					      JMP	.case_end
    485 U7e00				   _STRUCT_MAC_LABEL_0
    486 U7e00					      INCLUDE	"STACKPOP.ASM"
    487 U7e00					      ENDM
    488 U7e00							;----------------
    489 U7e00
    490 U7e00					      MACRO	end_case
    491 U7e00				   _STRUCT_MAC_LABEL_0
    492 U7e00					      INCLUDE	"STACKPOP2.ASM"
    493 U7e00					      ENDM
    494 U7e00							;----------------
    495 U7e00
    496 U7e00							;			 +--------------------+
    497 U7e00							;			 |     FOR...NEXT     |
    498 U7e00							;			 +====================+
    499 U7e00
    500 U7e00					      MACRO	for
    501 U7e00					      LDA	#[ {2} & $FF ]
    502 U7e00					      STA	{1}
    503 U7e00					      LDA	#[ ({2} >> 8) & $FF ]
    504 U7e00					      STA	{1}+1
    505 U7e00				   _TO_PUSH_3 SET	{1}
    506 U7e00				   _TO_PUSH_2 SET	{4}
    507 U7e00				   _STRUCT_MAC_LABEL_1
    508 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    509 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    510 U7e00					      INCLUDE	"STKPUSH3.ASM"
    511 U7e00					      ENDM
    512 U7e00							;----------------
    513 U7e00
    514 U7e00					      MACRO	next
    515 U7e00					      INC	_STK_LVL_3
    516 U7e00					      BNE	.check_condition
    517 U7e00					      INC	_STK_LVL_3+1
    518 U7e00				   .check_condition
    519 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    520 U7e00					      LDA	_STK_LVL_3
    521 U7e00					      CMP	#[ (_STK_LVL_2+1) & $FF ]
    522 U7e00					      BNE	.tmp
    523 U7e00					      LDA	_STK_LVL_3+1
    524 U7e00					      CMP	#[ ((_STK_LVL_2+1) >> 8) & $FF ]
    525 U7e00					      BNE	.tmp
    526 U7e00					      INCLUDE	"STACKPOP3.ASM"
    527 U7e00					      ENDM
    528 U7e00							;----------------
    529 U7e00
    530 U7e00							;			  +--------------------+
    531 U7e00							;			  |   FOR_X...NEXT_X   |
    532 U7e00							;			  +====================+
    533 U7e00
    534 U7e00					      MACRO	for_x
    535 U7e00					      IF	[ !({1} == ACCUM || {1} == X_REG || {1} == Y_REG || {1} < $100) ]
    536 U7e00					      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
    537 U7e00					      ERR
    538 U7e00					      ENDIF
    539 U7e00					      IF	[ !({2} == UP_TO || {2} == DOWN_TO) ]
    540 U7e00					      ECHO	"Direction must be UP_TO or DOWN_TO"
    541 U7e00					      ERR
    542 U7e00					      ENDIF
    543 U7e00					      IF	[ {1} == ACCUM ]
    544 U7e00					      TAX
    545 U7e00					      ELSE
    546 U7e00					      IF	[ {1} == Y_REG ]
    547 U7e00					      PHA
    548 U7e00					      TYA
    549 U7e00					      TAX
    550 U7e00					      PLA
    551 U7e00					      ELSE
    552 U7e00					      IF	[ {1} != X_REG ]
    553 U7e00					      LDX	#{1}
    554 U7e00					      ENDIF
    555 U7e00					      ENDIF
    556 U7e00					      ENDIF
    557 U7e00				   _TO_PUSH_3 SET	{3}
    558 U7e00				   _TO_PUSH_2 SET	{2}
    559 U7e00				   _STRUCT_MAC_LABEL_1
    560 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    561 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    562 U7e00					      INCLUDE	"STKPUSH3.ASM"
    563 U7e00					      ENDM
    564 U7e00							;----------------
    565 U7e00
    566 U7e00					      MACRO	next_x
    567 U7e00				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    568 U7e00					      IF	[ _STK_LVL_2 == DOWN_TO ]
    569 U7e00					      DEX
    570 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    571 U7e00					      BNE	.loop
    572 U7e00					      ELSE
    573 U7e00					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
    574 U7e00					      BPL	.loop
    575 U7e00					      ELSE
    576 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    577 U7e00					      BMI	.loop
    578 U7e00					      ELSE
    579 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    580 U7e00					      CPX	_STK_LVL_3
    581 U7e00					      ELSE
    582 U7e00					      CPX	#_STK_LVL_3
    583 U7e00					      ENDIF
    584 U7e00					      BNE	.loop
    585 U7e00					      ENDIF
    586 U7e00					      ENDIF
    587 U7e00					      ENDIF
    588 U7e00					      ELSE		; UP_TO
    589 U7e00					      INX
    590 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    591 U7e00					      BNE	.loop
    592 U7e00					      ELSE
    593 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    594 U7e00					      BMI	.loop
    595 U7e00					      ELSE
    596 U7e00					      IF	[ _STK_LVL_3 == NEG_NRs ]
    597 U7e00					      BPL	.loop
    598 U7e00					      ELSE
    599 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    600 U7e00					      CPX	_STK_LVL_3
    601 U7e00					      ELSE
    602 U7e00					      CPX	#_STK_LVL_3
    603 U7e00					      ENDIF
    604 U7e00					      BNE	.loop
    605 U7e00					      ENDIF
    606 U7e00					      ENDIF
    607 U7e00					      ENDIF
    608 U7e00					      ENDIF
    609 U7e00					      INCLUDE	"STACKPOP3.ASM"
    610 U7e00					      ENDM
    611 U7e00							;----------------
    612 U7e00
    613 U7e00							;			  +--------------------+
    614 U7e00							;			  |   FOR_Y...NEXT_Y   |
    615 U7e00							;			  +====================+
    616 U7e00
    617 U7e00					      MACRO	for_y
    618 U7e00					      IF	[ !({1} == ACCUM || {1} == X_REG || {1} == Y_REG || {1} < $100) ]
    619 U7e00					      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
    620 U7e00					      ERR
    621 U7e00					      ENDIF
    622 U7e00					      IF	[ !({2} == UP_TO || {2} == DOWN_TO) ]
    623 U7e00					      ECHO	"Direction must be UP_TO or DOWN_TO"
    624 U7e00					      ERR
    625 U7e00					      ENDIF
    626 U7e00					      IF	[ {1} == ACCUM ]
    627 U7e00					      TAY
    628 U7e00					      ELSE
    629 U7e00					      IF	[ {1} == X_REG ]
    630 U7e00					      PHA
    631 U7e00					      TXA
    632 U7e00					      TAY
    633 U7e00					      PLA
    634 U7e00					      ELSE
    635 U7e00					      IF	[ {1} != Y_REG ]
    636 U7e00					      LDY	#{1}
    637 U7e00					      ENDIF
    638 U7e00					      ENDIF
    639 U7e00					      ENDIF
    640 U7e00				   _TO_PUSH_3 SET	{3}
    641 U7e00				   _TO_PUSH_2 SET	{2}
    642 U7e00				   _STRUCT_MAC_LABEL_1
    643 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    644 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    645 U7e00					      INCLUDE	"STKPUSH3.ASM"
    646 U7e00					      ENDM
    647 U7e00							;----------------
    648 U7e00
    649 U7e00					      MACRO	next_y
    650 U7e00				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    651 U7e00					      IF	[ _STK_LVL_2 == DOWN_TO ]
    652 U7e00					      DEY
    653 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    654 U7e00					      BNE	.loop
    655 U7e00					      ELSE
    656 U7e00					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
    657 U7e00					      BPL	.loop
    658 U7e00					      ELSE
    659 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    660 U7e00					      BMI	.loop
    661 U7e00					      ELSE
    662 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    663 U7e00					      CPY	_STK_LVL_3
    664 U7e00					      ELSE
    665 U7e00					      CPY	#_STK_LVL_3
    666 U7e00					      ENDIF
    667 U7e00					      BNE	.loop
    668 U7e00					      ENDIF
    669 U7e00					      ENDIF
    670 U7e00					      ENDIF
    671 U7e00					      ELSE		; UP_TO
    672 U7e00					      INY
    673 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    674 U7e00					      BNE	.loop
    675 U7e00					      ELSE
    676 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    677 U7e00					      BMI	.loop
    678 U7e00					      ELSE
    679 U7e00					      IF	[ _STK_LVL_3 == NEG_NRs ]
    680 U7e00					      BPL	.loop
    681 U7e00					      ELSE
    682 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    683 U7e00					      CPY	_STK_LVL_3
    684 U7e00					      ELSE
    685 U7e00					      CPY	#_STK_LVL_3
    686 U7e00					      ENDIF
    687 U7e00					      BNE	.loop
    688 U7e00					      ENDIF
    689 U7e00					      ENDIF
    690 U7e00					      ENDIF
    691 U7e00					      ENDIF
    692 U7e00					      INCLUDE	"STACKPOP3.ASM"
    693 U7e00					      ENDM
    694 U7e00							;----------------
    695 U7e00
    696 U7e00							;			 +--------------------+
    697 U7e00							;			 |     Accessories    |
    698 U7e00							;			 +====================+
    699 U7e00
    700 U7e00					      MACRO	rts_if_eq
    701 U7e00					      BNE	.tmp
    702 U7e00					      RTS
    703 U7e00				   .tmp
    704 U7e00					      ENDM
    705 U7e00							;----------------
    706 U7e00
    707 U7e00					      MACRO	rts_if_ne
    708 U7e00					      BEQ	.tmp
    709 U7e00					      RTS
    710 U7e00				   .tmp
    711 U7e00					      ENDM
    712 U7e00							;----------------
    713 U7e00
    714 U7e00					      MACRO	rts_if_plus
    715 U7e00					      BMI	.tmp
    716 U7e00					      RTS
    717 U7e00				   .tmp
    718 U7e00					      ENDM
    719 U7e00							;----------------
    720 U7e00
    721 U7e00					      MACRO	rts_if_minus
    722 U7e00					      BPL	.tmp
    723 U7e00					      RTS
    724 U7e00				   .tmp
    725 U7e00					      ENDM
    726 U7e00							;----------------
    727 U7e00
    728 U7e00					      MACRO	rts_if_flag_var
    729 U7e00					      IF	![ {2} == IS_SET || {2} == IS_CLEAR ]
    730 U7e00					      ECHO	"Condition must be: IS_SET or IS_CLEAR"
    731 U7e00					      ERR
    732 U7e00					      ENDIF
    733 U7e00					      BIT	{1}
    734 U7e00					      IF	[ {2} == IS_SET ]
    735 U7e00					      BPL	.tmp
    736 U7e00					      ELSE
    737 U7e00					      BMI	.tmp
    738 U7e00					      ENDIF
    739 U7e00					      RTS
    740 U7e00				   .tmp
    741 U7e00					      ENDM
    742 U7e00							;----------------
    743 U7e00
    744 U7e00					      MACRO	rts_if_bit
    745 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    746 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    747 U7e00					      ERR
    748 U7e00					      ENDIF
    749 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    750 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    751 U7e00					      ERR
    752 U7e00					      ENDIF
    753 U7e00					      IF	[ {2} < 6 ]
    754 U7e00					      LDA	#[ 1 << {2} ]
    755 U7e00					      BIT	{1}
    756 U7e00					      IF	[ {3} == IS_HIGH ]
    757 U7e00					      BEQ	.tmp
    758 U7e00					      ELSE
    759 U7e00					      BNE	.tmp
    760 U7e00					      ENDIF
    761 U7e00					      ELSE
    762 U7e00					      BIT	{1}
    763 U7e00					      IF	[ {2} == 7 ]
    764 U7e00					      IF	[ {3} == IS_HIGH ]
    765 U7e00					      BPL	.tmp
    766 U7e00					      ELSE
    767 U7e00					      BMI	.tmp
    768 U7e00					      ENDIF
    769 U7e00					      ELSE
    770 U7e00					      IF	[ {3} == IS_HIGH ]
    771 U7e00					      BVC	.tmp
    772 U7e00					      ELSE
    773 U7e00					      BVS	.tmp
    774 U7e00					      ENDIF
    775 U7e00					      ENDIF
    776 U7e00					      ENDIF
    777 U7e00					      RTS
    778 U7e00				   .tmp
    779 U7e00					      ENDM
    780 U7e00							;----------------
    781 U7e00
    782 U7e00					      MACRO	rts_if_mem_loc
    783 U7e00					      IF	![ {2} == IS_POS || {2} == IS_NEG || {2} == IS_0 || {2} == IS_NON_0 ]
    784 U7e00					      ECHO	"Condition must be: IS_POS, IS_NEG, IS_0 or IS_NON_0"
    785 U7e00					      ERR
    786 U7e00					      ENDIF
    787 U7e00					      IF	[ {2} == IS_POS ]
    788 U7e00					      BIT	{1}
    789 U7e00					      BMI	.tmp
    790 U7e00					      ENDIF
    791 U7e00					      IF	[ {2} == IS_NEG ]
    792 U7e00					      BIT	{1}
    793 U7e00					      BPL	.tmp
    794 U7e00					      ENDIF
    795 U7e00					      IF	[ {2} == IS_0 ]
    796 U7e00					      LDY	{1}
    797 U7e00					      BNE	.tmp
    798 U7e00					      ENDIF
    799 U7e00					      IF	[ {2} == IS_NON_0 ]
    800 U7e00					      LDY	{1}
    801 U7e00					      BEQ	.tmp
    802 U7e00					      ENDIF
    803 U7e00					      RTS
    804 U7e00				   .tmp
    805 U7e00					      ENDM
    806 U7e00							;----------------
------- FILE ../std/std.asm
------- FILE macroses.asm LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	macroses.asm
      1 U7e00							; Writes two bytes into memory
      2 U7e00							; {1} - data
      3 U7e00							; {2} - addr
      4 U7e00					      MAC	write_word
      5 U7e00					      LDA	#<{1}
      6 U7e00					      STA	{2}
      7 U7e00					      LDA	#>{1}
      8 U7e00					      STA	{2}+1
      9 U7e00					      ENDM
     10 U7e00
     11 U7e00							; Copy two bytes from one memory location to another
     12 U7e00							; {1} - src location
     13 U7e00							; {2} - dst location
     14 U7e00					      MACRO	copy_2
     15 U7e00					      LDA	{1}
     16 U7e00					      STA	{2}
     17 U7e00					      LDA	{1}+1
     18 U7e00					      STA	{2}+1
     19 U7e00					      ENDM
     20 U7e00
     21 U7e00							; Copy four bytes from one memory location to another
     22 U7e00							; {1} - src location
     23 U7e00							; {2} - dst location
     24 U7e00					      MACRO	copy_4
     25 U7e00					      LDA	{1}
     26 U7e00					      STA	{2}
     27 U7e00					      LDA	{1}+1
     28 U7e00					      STA	{2}+1
     29 U7e00					      LDA	{1}+2
     30 U7e00					      STA	{2}+2
     31 U7e00					      LDA	{1}+3
     32 U7e00					      STA	{2}+3
     33 U7e00					      ENDM
     34 U7e00
     35 U7e00							; Setup reset vector
     36 U7e00							; {1} - reset
     37 U7e00							; {2} - IRQ
     38 U7e00							; {3} - NMI
     39 U7e00					      MAC	reset_vector
     40 U7e00					      ORG	$FFFA
     41 U7e00					      DC.W	{3}
     42 U7e00					      ORG	$FFFC
     43 U7e00					      DC.W	{1}
     44 U7e00					      ORG	$FFFE
     45 U7e00					      DC.W	{2}
     46 U7e00					      ENDM
     47 U7e00
     48 U7e00					      MAC	string
     49 U7e00					      DC	{1}
     50 U7e00					      DC	$0
     51 U7e00					      ENDM
------- FILE ../std/std.asm
------- FILE hardware.asm LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	hardware.asm
------- FILE viaMacro.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	viaMacro.asm
      1 U7e00							; Add VIA registers
      2 U7e00							; {1} = name
      3 U7e00							; {2} = address
      4 U7e00					      MAC	define_via
      5 U7e00				   VIA_{1}_RB =	{2}
      6 U7e00				   VIA_{1}_RA =	{2}+1
      7 U7e00				   VIA_{1}_DDRB =	{2}+2
      8 U7e00				   VIA_{1}_DDRA =	{2}+3
      9 U7e00				   VIA_{1}_T1C_L =	{2}+4
     10 U7e00				   VIA_{1}_T1C_H =	{2}+5
     11 U7e00				   VIA_{1}_T1L_L =	{2}+6
     12 U7e00				   VIA_{1}_T1L_H =	{2}+7
     13 U7e00				   VIA_{1}_T2C_L =	{2}+8
     14 U7e00				   VIA_{1}_T2C_H =	{2}+9
     15 U7e00				   VIA_{1}_SR =	{2}+$A
     16 U7e00				   VIA_{1}_ACR =	{2}+$B
     17 U7e00				   VIA_{1}_PCR =	{2}+$C
     18 U7e00				   VIA_{1}_IFR =	{2}+$D
     19 U7e00				   VIA_{1}_IER =	{2}+$E
     20 U7e00				   VIA_{1}_ORA =	{2}+$F
     21 U7e00					      ENDM
------- FILE hardware.asm
      0 U7e00					      DEFINE_VIA	FIRST, %1000000000010000
      1 U7e00		       80 10	   VIA_FIRST_RB =	%1000000000010000
      2 U7e00		       80 11	   VIA_FIRST_RA =	%1000000000010000+1
      3 U7e00		       80 12	   VIA_FIRST_DDRB =	%1000000000010000+2
      4 U7e00		       80 13	   VIA_FIRST_DDRA =	%1000000000010000+3
      5 U7e00		       80 14	   VIA_FIRST_T1C_L =	%1000000000010000+4
      6 U7e00		       80 15	   VIA_FIRST_T1C_H =	%1000000000010000+5
      7 U7e00		       80 16	   VIA_FIRST_T1L_L =	%1000000000010000+6
      8 U7e00		       80 17	   VIA_FIRST_T1L_H =	%1000000000010000+7
      9 U7e00		       80 18	   VIA_FIRST_T2C_L =	%1000000000010000+8
     10 U7e00		       80 19	   VIA_FIRST_T2C_H =	%1000000000010000+9
     11 U7e00		       80 1a	   VIA_FIRST_SR =	%1000000000010000+$A
     12 U7e00		       80 1b	   VIA_FIRST_ACR =	%1000000000010000+$B
     13 U7e00		       80 1c	   VIA_FIRST_PCR =	%1000000000010000+$C
     14 U7e00		       80 1d	   VIA_FIRST_IFR =	%1000000000010000+$D
     15 U7e00		       80 1e	   VIA_FIRST_IER =	%1000000000010000+$E
     16 U7e00		       80 1f	   VIA_FIRST_ORA =	%1000000000010000+$F
      0 U7e00					      DEFINE_VIA	SECOND, %1000000001000000
      1 U7e00		       80 40	   VIA_SECOND_RB =	%1000000001000000
      2 U7e00		       80 41	   VIA_SECOND_RA =	%1000000001000000+1
      3 U7e00		       80 42	   VIA_SECOND_DDRB =	%1000000001000000+2
      4 U7e00		       80 43	   VIA_SECOND_DDRA =	%1000000001000000+3
      5 U7e00		       80 44	   VIA_SECOND_T1C_L =	%1000000001000000+4
      6 U7e00		       80 45	   VIA_SECOND_T1C_H =	%1000000001000000+5
      7 U7e00		       80 46	   VIA_SECOND_T1L_L =	%1000000001000000+6
      8 U7e00		       80 47	   VIA_SECOND_T1L_H =	%1000000001000000+7
      9 U7e00		       80 48	   VIA_SECOND_T2C_L =	%1000000001000000+8
     10 U7e00		       80 49	   VIA_SECOND_T2C_H =	%1000000001000000+9
     11 U7e00		       80 4a	   VIA_SECOND_SR =	%1000000001000000+$A
     12 U7e00		       80 4b	   VIA_SECOND_ACR =	%1000000001000000+$B
     13 U7e00		       80 4c	   VIA_SECOND_PCR =	%1000000001000000+$C
     14 U7e00		       80 4d	   VIA_SECOND_IFR =	%1000000001000000+$D
     15 U7e00		       80 4e	   VIA_SECOND_IER =	%1000000001000000+$E
     16 U7e00		       80 4f	   VIA_SECOND_ORA =	%1000000001000000+$F
      4 U7e00
------- FILE uartChip.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	uartChip.asm
      1 U7e00		       80 20	   UART_ADDR  =	%1000000000100000
      2 U7e00		       80 20	   UART_DATA_REG =	UART_ADDR
      3 U7e00		       80 21	   UART_STATUS_REG =	UART_ADDR + 1
      4 U7e00		       80 22	   UART_COMMAND_REG =	UART_ADDR + 2
      5 U7e00		       80 23	   UART_CONTROL_REG =	UART_ADDR + 3
      6 U7e00
      7 U7e00		       00 80	   UART_STATUS_INTERRUPT =	$80
      8 U7e00		       00 40	   UART_STATUS_DATA_SET_READY =	$40
      9 U7e00		       00 20	   UART_STATUS_DATA_CARRIER_DETECT =	$20
     10 U7e00		       00 10	   UART_STATUS_TRANSMITTER_DATA_REGISTER_EMPTY =	$10
     11 U7e00		       00 08	   UART_STATUS_RECEIVER_DATA_REGISTER_FULL =	$08
     12 U7e00		       00 04	   UART_STATUS_OVERRUN =	$04
     13 U7e00		       00 02	   UART_STATUS_FRAMING_ERROR =	$02
     14 U7e00		       00 01	   UART_STATUS_PARITY_ERROR =	$01
     15 U7e00
     16 U7e00							; 1 stop bit & parity, 8 bits word length, internal baud rate, 9600
     17 U7e00		       00 9e	   UART_CONTROL_DEFAULT =	%10011110
     18 U7e00
     19 U7e00		       00 00	   UART_COMMAND_RECEIVER_ODD_PARITY_CHECKED =	$00
     20 U7e00		       00 40	   UART_COMMAND_RECEIVER_EVEN_PARITY_CHECKED =	$40
     21 U7e00		       00 c0	   UART_COMMAND_RECEIVER_PARITY_CHECK_DISABLED =	$C0
     22 U7e00		       00 20	   UART_COMMAND_PARITY_MOD_ENABLED =	$20
     23 U7e00		       00 00	   UART_COMMAND_PARITY_MOD_DISABLED =	$0
     24 U7e00		       00 00	   UART_COMMAND_RECEIVER_NOMRAL_MOD =	$0
     25 U7e00		       00 10	   UART_COMMAND_RECEIVER_ECHO_MOD =	$10
     26 U7e00		       00 00	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED_FOR_ECHO =	0
     27 U7e00		       00 04	   UART_COMMAND_TRANSMIT_INTERRUPT_ENABLED =	$04
     28 U7e00		       00 08	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED =	$08
     29 U7e00		       00 0c	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED_BREAK_ON_TXD =	$0C
     30 U7e00		       00 00	   UART_COMMAND_RECEIVER_INTERRUPT_REQUEST_ENABLED =	0
     31 U7e00		       00 02	   UART_COMMAND_RECEIVER_INTERRUPT_REQUEST_DISABLED =	$02
     32 U7e00		       00 01	   UART_COMMAND_DATA_TERMINAL_READY =	$01
     33 U7e00		       00 00	   UART_COMMAND_DATA_TERMINAL_NOT_READY =	0
------- FILE hardware.asm
------- FILE ../std/std.asm
------- FILE bootloader.asm
------- FILE fat.asm LEVEL 2 PASS 3
      0 U7e00					      INCLUDE	"fat.asm"
------- FILE sd_card.asm LEVEL 3 PASS 3
      0 U7e00					      include	sd_card.asm
------- FILE io_errors.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	"io_errors.asm"
      1 U7e00		       00 00	   IO_OK      =	$0
      2 U7e00		       00 01	   IO_END_OF_FILE =	$1
      3 U7e00		       00 02	   IO_FILE_NOT_FOUND =	$2
      4 U7e00		       00 03	   IO_INVALID_FILENAME_FORMAT =	$3
      5 U7e00		       00 04	   IO_SD_BUSY_BEFORE_GO_IDLE_STATE =	$4
      6 U7e00		       00 05	   IO_SD_BUSY_AFTER_GO_IDLE_STATE =	$5
      7 U7e00		       00 06	   IO_SD_NOT_IDLE_AFTER_GO_IDLE_STATE =	$6
      8 U7e00		       00 07	   IO_SD_BUSY_BEFORE_SEND_IF_COND =	$7
      9 U7e00		       00 08	   IO_SD_BUSY_AFTER_SEND_IF_COND =	$8
     10 U7e00		       00 09	   IO_SD_NOT_IDLE_AFTER_SEND_IF_COND =	$9
     11 U7e00		       00 0a	   IO_SD_BUSY_BEFORE_APP_CMD =	$A
     12 U7e00		       00 0b	   IO_SD_BUSY_AFTER_APP_CMD =	$B
     13 U7e00		       00 0c	   IO_SD_BUSY_BEFORE_APP_SEND_OP_COND =	$C
     14 U7e00		       00 0d	   IO_SD_BUSY_AFTER_APP_SEND_OP_COND =	$D
     15 U7e00		       00 0e	   IO_SD_ERROR_AFTER_APP_SEND_OP_COND =	$E
     16 U7e00		       00 0f	   IO_SD_BUSY_BEFORE_READ_SECTOR =	$F
     17 U7e00		       00 10	   IO_SD_BUSY_AFTER_READ_SECTOR =	$10
     18 U7e00		       00 11	   IO_SD_ERROR_AFTER_READ_SECTOR =	$11
     19 U7e00		       00 12	   IO_SD_DATA_TOKEN_DID_NOT_RECEIVED_AFTER_READ_SECTOR =	$12
     20 U7e00		       00 13	   IO_WRONG_BOOT_SIGNATURE =	$13
     21 U7e00		       00 14	   IO_WRONG_PARTITION_TYPE =	$14
     22 U7e00		       00 15	   IO_WRONG_BYTES_PER_LOGICAL_SECTOR =	$15
     23 U7e00		       00 16	   IO_WRONG_FATS_NUMBER =	$16
     24 U7e00		       00 17	   IO_WRONG_FAT_MEDIA_DESCRIPTOR =	$17
     25 U7e00		       00 18	   IO_ZERO_SECTORS_PER_CLUSTER =	$18
     26 U7e00		       00 19	   IO_FAT_END_OF_CLUSTERS =	$19
------- FILE sd_card.asm
      2 U7e00
      3 U7e00							; SD conntected to port B
      4 U7e00							; CS	- P7
      5 U7e00							; SCK	- CB1 / controlled by shift register
      6 U7e00							;   IO - CB2 / controlled by shift register
      7 U7e00							; MOSI - P7 = 0 / to SD
      8 U7e00							; MISO - P6 = 0 / from SD$A0
      9 U7e00
     10 U7e00							; 111XXXXX - disable SD
     11 U7e00							; 0XXXXXXX - enable SD
     12 U7e00							; X01XXXXX - read from SD
     13 U7e00							; X10XXXXX - write to SD
     14 U7e00
     15 U0000					      SEG.U	zpVars
     16 U0000		       00	   _response  ds	1
     17 U0001		       00	   _sendByte  ds	1
     18 U0002							; They must be sequential from CRC to CMD
     19 U0002		       00	   _crc       ds	1
     20 U0003		       00 00 00 00 _arg       ds	4
     21 U0003		       00 03	   sdSector   =	_arg
     22 U0003		       00 03	   _sdHalfPageStart =	_arg	; 2 bytes
     23 U0007		       00	   _cmd       ds	1
     24 U0008
     25 U7e00					      SEG.U	upperRam
     26 U7e00		       00 00 00 00*sdPageStart ds	512
     27 U8000
     28  f900					      SEG	code
     29  f900							; Changes X and Y
     30  f900				   INIT_SD
     31  f900							; Disable all interrupts
     32  f900							; I need a timer for uart logs
     33  f900							; LDA #$7F
     34  f900							; STA VIA_FIRST_IER
     35  f900							; Setup output pins
     36  f900		       a9 e0		      LDA	#%11100000
     37  f902		       8d 12 80 	      STA	VIA_FIRST_DDRB
     38  f905
     39  f905							; enable shift interrups
     40  f905		       a9 84		      LDA	#%10000100
     41  f907		       8d 1e 80 	      STA	VIA_FIRST_IER
     42  f90a
     43  f90a							; Disable SD
     44  f90a		       a9 e0		      LDA	#%11100000
     45  f90c		       8d 10 80 	      STA	VIA_FIRST_RB
     46  f90f							; Set CLOCK divider it's ~ 24
     47  f90f		       a9 14		      LDA	#20
     48  f911		       8d 18 80 	      STA	VIA_FIRST_T2C_L
     49  f914							; Wait > 1ms after power up
     50  f914		       20 ec f9 	      JSR	_WAIT
      0  f917					      FOR_Y	0, UP_TO, $10
      1  f917				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f917				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f917				  -	      ERR
      4  f917					      ENDIF
      5  f917				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f917				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f917				  -	      ERR
      8  f917					      ENDIF
      9  f917				  -	      IF	[ 0 == ACCUM ]
     10  f917				  -	      TAY
     11  f917					      ELSE
     12  f917				  -	      IF	[ 0 == X_REG ]
     13  f917				  -	      PHA
     14  f917				  -	      TXA
     15  f917				  -	      TAY
     16  f917				  -	      PLA
     17  f917					      ELSE
     18  f917					      IF	[ 0 != Y_REG ]
     19  f917		       a0 00		      LDY	#0
     20  f919					      ENDIF
     21  f919					      ENDIF
     22  f919					      ENDIF
     23  f919				   _TO_PUSH_3 SET	$10
     24  f919				   _TO_PUSH_2 SET	UP_TO
     25  f919				   _STRUCT_MAC_LABEL_1
     26  f919				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f919				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f919					      INCLUDE	"STKPUSH3.ASM"
     22  f919					      LIST	ON
------- FILE for_y
     52  f919		       20 04 fa 	      JSR	_DUMMY_CLOCK_WITH_DISABLED_CARD
      0  f91c					      NEXT_Y
      1  f91c				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f91c				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f91c				  -	      DEY
      4  f91c				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f91c				  -	      BNE	.loop
      6  f91c				  -	      ELSE
      7  f91c				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f91c				  -	      BPL	.loop
      9  f91c				  -	      ELSE
     10  f91c				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f91c				  -	      BMI	.loop
     12  f91c				  -	      ELSE
     13  f91c				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f91c				  -	      CPY	_STK_LVL_3
     15  f91c				  -	      ELSE
     16  f91c				  -	      CPY	#_STK_LVL_3
     17  f91c				  -	      ENDIF
     18  f91c				  -	      BNE	.loop
     19  f91c				  -	      ENDIF
     20  f91c				  -	      ENDIF
     21  f91c				  -	      ENDIF
     22  f91c					      ELSE
     23  f91c		       c8		      INY
     24  f91d				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f91d				  -	      BNE	.loop
     26  f91d					      ELSE
     27  f91d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f91d				  -	      BMI	.loop
     29  f91d					      ELSE
     30  f91d				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f91d				  -	      BPL	.loop
     32  f91d					      ELSE
     33  f91d				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f91d				  -	      CPY	_STK_LVL_3
     35  f91d					      ELSE
     36  f91d		       c0 10		      CPY	#_STK_LVL_3
     37  f91f					      ENDIF
     38  f91f		       d0 f8		      BNE	.loop
     39  f921					      ENDIF
     40  f921					      ENDIF
     41  f921					      ENDIF
     42  f921					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f921					      INCLUDE	"STACKPOP3.ASM"
     19  f921					      LIST	ON
------- FILE next_y
     54  f921							; ===== CMD0 with retry =====
     55  f921							; Try to switch it into idle several times
     56  f921		       a9 f0		      LDA	#$f0
     57  f923		       48		      PHA
      0  f924					      BEGIN
      1  f924				   _STRUCT_MAC_LABEL_2
      2  f924				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f924				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f924					      INCLUDE	"STACKPUSH.ASM"
     22  f924					      LIST	ON
------- FILE begin
     59  f924		       20 21 fa 	      JSR	_CMD_GO_IDLE_STATE
     60  f927		       f0 0a		      BEQ	.sdIsIdle
     61  f929		       a8		      TAY		; We need to save A for return
     62  f92a							; Decrement counter in the stack
     63  f92a		       ba		      TSX
     64  f92b		       de 01 01 	      DEC	$101,X
      0  f92e					      UNTIL_ZERO
      0  f92e					      UNTIL_EQ
      1  f92e				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f92e		       d0 f4		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f930					      INCLUDE	"STACKPOP.ASM"
     21  f930					      LIST	ON
------- FILE until_eq
     66  f930		       68		      PLA		; pull retry counter back
     67  f931		       98		      TYA		; restore command exit code
     68  f932		       60		      RTS
     69  f933				   .sdIsIdle
     70  f933		       68		      PLA		; pull retry counter back
     71  f934							; ===== CMD8 with retry =====
     72  f934							; It seems that I need to retry everything
     73  f934		       a9 f0		      LDA	#$f0
     74  f936		       48		      PHA
      0  f937					      BEGIN
      1  f937				   _STRUCT_MAC_LABEL_3
      2  f937				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f937				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f937					      INCLUDE	"STACKPUSH.ASM"
     22  f937					      LIST	ON
------- FILE begin
     76  f937		       20 55 fa 	      JSR	_CMD_SEND_IF_COND
     77  f93a		       f0 0a		      BEQ	.turnOn
     78  f93c		       a8		      TAY
     79  f93d		       ba		      TSX
     80  f93e		       de 01 01 	      DEC	$101,X
      0  f941					      UNTIL_ZERO
      0  f941					      UNTIL_EQ
      1  f941				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f941		       d0 f4		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f943					      INCLUDE	"STACKPOP.ASM"
     21  f943					      LIST	ON
------- FILE until_eq
     82  f943		       68		      PLA		; pull retry counter back
     83  f944		       98		      TYA		; restore command exit code
     84  f945		       60		      RTS
     85  f946				   .turnOn
     86  f946		       68		      PLA		; pull retry counter back
     87  f947							; ===== ACMD41 with retry =====
     88  f947							; Try is several times
     89  f947		       a9 f0		      LDA	#$f0
     90  f949		       48		      PHA
      0  f94a					      BEGIN
      1  f94a				   _STRUCT_MAC_LABEL_4
      2  f94a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f94a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f94a					      INCLUDE	"STACKPUSH.ASM"
     22  f94a					      LIST	ON
------- FILE begin
     92  f94a		       20 97 fa 	      JSR	_CMD_APP_SEND_OP_COND
      0  f94d					      IF_ZERO
      0  f94d					      IF_EQ
      1  f94d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f94d		       d0 09		      BNE	.tmp
      3  f94d				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f94d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f94f					      INCLUDE	"STACKPUSH.ASM"
     22  f94f					      LIST	ON
------- FILE if_eq
     94  f94f		       a8		      TAY
     95  f950							; It's initialized. I can speed up
     96  f950		       a9 00		      LDA	#0
     97  f952		       8d 18 80 	      STA	VIA_FIRST_T2C_L
     98  f955		       68		      PLA
     99  f956		       98		      TYA
    100  f957		       60		      RTS
      0  f958					      END_IF
      1  f958				   _STRUCT_MAC_LABEL_5
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f958					      INCLUDE	"STACKPOP.ASM"
     21  f958					      LIST	ON
------- FILE end_if
    102  f958		       48		      PHA
    103  f959		       20 ec f9 	      JSR	_WAIT
    104  f95c		       68		      PLA
    105  f95d		       a8		      TAY		; We need to save A for return
    106  f95e							; Decrement counter in the stack
    107  f95e		       ba		      TSX
    108  f95f		       de 01 01 	      DEC	$101,X
      0  f962					      UNTIL_ZERO
      0  f962					      UNTIL_EQ
      1  f962				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f962		       d0 e6		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f964					      INCLUDE	"STACKPOP.ASM"
     21  f964					      LIST	ON
------- FILE until_eq
    110  f964		       68		      PLA		; pull retry counter back
    111  f965		       98		      TYA		; restore command exit code
    112  f966		       60		      RTS
    113  f967
    114  f967							; You must have prepared sdSector
    115  f967							; Changes X and Y
    116  f967				   READ_SD_SECTOR
    117  f967		       a9 f0		      LDA	#$F0	; retry everything
    118  f969		       48		      PHA
      0  f96a					      BEGIN
      1  f96a				   _STRUCT_MAC_LABEL_6
      2  f96a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f96a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f96a					      INCLUDE	"STACKPUSH.ASM"
     22  f96a					      LIST	ON
------- FILE begin
    120  f96a		       20 7c f9 	      JSR	_READ_SD_SECTOR_INSIDE_RETRY
    121  f96d		       a8		      TAY
      0  f96e					      IF_ZERO
      0  f96e					      IF_EQ
      1  f96e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f96e		       d0 03		      BNE	.tmp
      3  f96e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f96e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f970					      INCLUDE	"STACKPUSH.ASM"
     22  f970					      LIST	ON
------- FILE if_eq
    123  f970		       68		      PLA		; pull retry counter
    124  f971		       98		      TYA		; restore zero for return
    125  f972		       60		      RTS
      0  f973					      END_IF
      1  f973				   _STRUCT_MAC_LABEL_7
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f973					      INCLUDE	"STACKPOP.ASM"
     21  f973					      LIST	ON
------- FILE end_if
    127  f973		       ba		      TSX
    128  f974		       de 01 01 	      DEC	$101,X
      0  f977					      UNTIL_ZERO
      0  f977					      UNTIL_EQ
      1  f977				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f977		       d0 f1		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f979					      INCLUDE	"STACKPOP.ASM"
     21  f979					      LIST	ON
------- FILE until_eq
    130  f979		       68		      PLA		; pull retry counter back
    131  f97a		       98		      TYA		; restore command exit code
    132  f97b		       60		      RTS
    133  f97c
    134  f97c				   _READ_SD_SECTOR_INSIDE_RETRY
    135  f97c		       a9 51		      LDA	#[ 17 | $40 ]
    136  f97e		       85 07		      STA	_cmd
    137  f980							; _arg is prepared
    138  f980							; _crc is not checked, so I don't care
    139  f980		       20 e1 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
      0  f983					      IF_NEQ
      1  f983				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f983		       f0 0f		      BEQ	.tmp
      3  f983				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f983				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f985					      INCLUDE	"STACKPUSH.ASM"
     22  f985					      LIST	ON
------- FILE if_neq
    141  f985		       48		      PHA
    142  f986		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    143  f989		       68		      PLA
      0  f98a					      IF_NEG
      0  f98a					      IF_MINUS
      1  f98a				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f98a		       10 05		      BPL	.tmp
      3  f98a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f98a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f98c					      INCLUDE	"STACKPUSH.ASM"
     22  f98c					      LIST	ON
------- FILE if_minus
    145  f98c		       a9 10		      LDA	#IO_SD_BUSY_AFTER_READ_SECTOR
      0  f98e					      ELSE_
      1  f98e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f98e		       4c 93 f9 	      JMP	.tmp
      3  f991				   _STRUCT_MAC_LABEL_9
      4  f991				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  f991				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    147  f991		       a9 0f		      LDA	#IO_SD_BUSY_BEFORE_READ_SECTOR
      0  f993					      END_IF
      1  f993				   _STRUCT_MAC_LABEL_10
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f993					      INCLUDE	"STACKPOP.ASM"
     21  f993					      LIST	ON
------- FILE end_if
    149  f993		       60		      RTS
      0  f994					      END_IF
      1  f994				   _STRUCT_MAC_LABEL_8
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f994					      INCLUDE	"STACKPOP.ASM"
     21  f994					      LIST	ON
------- FILE end_if
    151  f994		       a5 00		      LDA	_response
      0  f996					      IF_NEQ
      1  f996				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f996		       f0 06		      BEQ	.tmp
      3  f996				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f996				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f998					      INCLUDE	"STACKPUSH.ASM"
     22  f998					      LIST	ON
------- FILE if_neq
    153  f998		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    154  f99b		       a9 11		      LDA	#IO_SD_ERROR_AFTER_READ_SECTOR
    155  f99d		       60		      RTS
      0  f99e					      END_IF
      1  f99e				   _STRUCT_MAC_LABEL_11
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f99e					      INCLUDE	"STACKPOP.ASM"
     21  f99e					      LIST	ON
------- FILE end_if
    157  f99e							; Wait for data token
    158  f99e		       20 18 fb 	      JSR	_READ_BYTE_SD	; I have to trigger shift reading
    159  f9a1					      SUBROUTINE
      0  f9a1					      FOR_X	0, UP_TO, $F0
      1  f9a1				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9a1				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9a1				  -	      ERR
      4  f9a1					      ENDIF
      5  f9a1				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9a1				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9a1				  -	      ERR
      8  f9a1					      ENDIF
      9  f9a1				  -	      IF	[ 0 == ACCUM ]
     10  f9a1				  -	      TAX
     11  f9a1					      ELSE
     12  f9a1				  -	      IF	[ 0 == Y_REG ]
     13  f9a1				  -	      PHA
     14  f9a1				  -	      TYA
     15  f9a1				  -	      TAX
     16  f9a1				  -	      PLA
     17  f9a1					      ELSE
     18  f9a1					      IF	[ 0 != X_REG ]
     19  f9a1		       a2 00		      LDX	#0
     20  f9a3					      ENDIF
     21  f9a3					      ENDIF
     22  f9a3					      ENDIF
     23  f9a3				   _TO_PUSH_3 SET	$F0
     24  f9a3				   _TO_PUSH_2 SET	UP_TO
     25  f9a3				   _STRUCT_MAC_LABEL_12
     26  f9a3				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9a3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9a3					      INCLUDE	"STKPUSH3.ASM"
     22  f9a3					      LIST	ON
------- FILE for_x
    161  f9a3		       8a		      TXA
    162  f9a4		       48		      PHA
      0  f9a5					      FOR_Y	0, UP_TO, $F0
      1  f9a5				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9a5				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9a5				  -	      ERR
      4  f9a5					      ENDIF
      5  f9a5				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9a5				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9a5				  -	      ERR
      8  f9a5					      ENDIF
      9  f9a5				  -	      IF	[ 0 == ACCUM ]
     10  f9a5				  -	      TAY
     11  f9a5					      ELSE
     12  f9a5				  -	      IF	[ 0 == X_REG ]
     13  f9a5				  -	      PHA
     14  f9a5				  -	      TXA
     15  f9a5				  -	      TAY
     16  f9a5				  -	      PLA
     17  f9a5					      ELSE
     18  f9a5					      IF	[ 0 != Y_REG ]
     19  f9a5		       a0 00		      LDY	#0
     20  f9a7					      ENDIF
     21  f9a7					      ENDIF
     22  f9a7					      ENDIF
     23  f9a7				   _TO_PUSH_3 SET	$F0
     24  f9a7				   _TO_PUSH_2 SET	UP_TO
     25  f9a7				   _STRUCT_MAC_LABEL_13
     26  f9a7				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9a7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9a7					      INCLUDE	"STKPUSH3.ASM"
     22  f9a7					      LIST	ON
------- FILE for_y
    164  f9a7		       20 18 fb 	      JSR	_READ_BYTE_SD
    165  f9aa		       a5 00		      LDA	_response
    166  f9ac		       c9 fe		      CMP	#$FE	; Data token for CMD 17/18/24
    167  f9ae		       f0 12		      BEQ	.dataTokenReceived
      0  f9b0					      NEXT_Y
      1  f9b0				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9b0				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9b0				  -	      DEY
      4  f9b0				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9b0				  -	      BNE	.loop
      6  f9b0				  -	      ELSE
      7  f9b0				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9b0				  -	      BPL	.loop
      9  f9b0				  -	      ELSE
     10  f9b0				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9b0				  -	      BMI	.loop
     12  f9b0				  -	      ELSE
     13  f9b0				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9b0				  -	      CPY	_STK_LVL_3
     15  f9b0				  -	      ELSE
     16  f9b0				  -	      CPY	#_STK_LVL_3
     17  f9b0				  -	      ENDIF
     18  f9b0				  -	      BNE	.loop
     19  f9b0				  -	      ENDIF
     20  f9b0				  -	      ENDIF
     21  f9b0				  -	      ENDIF
     22  f9b0					      ELSE
     23  f9b0		       c8		      INY
     24  f9b1				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9b1				  -	      BNE	.loop
     26  f9b1					      ELSE
     27  f9b1				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9b1				  -	      BMI	.loop
     29  f9b1					      ELSE
     30  f9b1				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9b1				  -	      BPL	.loop
     32  f9b1					      ELSE
     33  f9b1				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9b1				  -	      CPY	_STK_LVL_3
     35  f9b1					      ELSE
     36  f9b1		       c0 f0		      CPY	#_STK_LVL_3
     37  f9b3					      ENDIF
     38  f9b3		       d0 f2		      BNE	.loop
     39  f9b5					      ENDIF
     40  f9b5					      ENDIF
     41  f9b5					      ENDIF
     42  f9b5					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9b5					      INCLUDE	"STACKPOP3.ASM"
     19  f9b5					      LIST	ON
------- FILE next_y
    169  f9b5		       68		      PLA
    170  f9b6		       aa		      TAX
      0  f9b7					      NEXT_X
      1  f9b7				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9b7				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9b7				  -	      DEX
      4  f9b7				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9b7				  -	      BNE	.loop
      6  f9b7				  -	      ELSE
      7  f9b7				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9b7				  -	      BPL	.loop
      9  f9b7				  -	      ELSE
     10  f9b7				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9b7				  -	      BMI	.loop
     12  f9b7				  -	      ELSE
     13  f9b7				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9b7				  -	      CPX	_STK_LVL_3
     15  f9b7				  -	      ELSE
     16  f9b7				  -	      CPX	#_STK_LVL_3
     17  f9b7				  -	      ENDIF
     18  f9b7				  -	      BNE	.loop
     19  f9b7				  -	      ENDIF
     20  f9b7				  -	      ENDIF
     21  f9b7				  -	      ENDIF
     22  f9b7					      ELSE
     23  f9b7		       e8		      INX
     24  f9b8				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9b8				  -	      BNE	.loop
     26  f9b8					      ELSE
     27  f9b8				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9b8				  -	      BMI	.loop
     29  f9b8					      ELSE
     30  f9b8				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9b8				  -	      BPL	.loop
     32  f9b8					      ELSE
     33  f9b8				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9b8				  -	      CPX	_STK_LVL_3
     35  f9b8					      ELSE
     36  f9b8		       e0 f0		      CPX	#_STK_LVL_3
     37  f9ba					      ENDIF
     38  f9ba		       d0 e7		      BNE	.loop
     39  f9bc					      ENDIF
     40  f9bc					      ENDIF
     41  f9bc					      ENDIF
     42  f9bc					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9bc					      INCLUDE	"STACKPOP3.ASM"
     19  f9bc					      LIST	ON
------- FILE next_x
    172  f9bc		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    173  f9bf		       a9 12		      LDA	#IO_SD_DATA_TOKEN_DID_NOT_RECEIVED_AFTER_READ_SECTOR
    174  f9c1		       60		      RTS
    175  f9c2				   .dataTokenReceived
    176  f9c2		       68		      PLA		; pull the stored X
      0  f9c3					      WRITE_WORD	sdPageStart, _sdHalfPageStart
      1  f9c3		       a9 00		      LDA	#<sdPageStart
      2  f9c5		       85 03		      STA	_sdHalfPageStart
      3  f9c7		       a9 7e		      LDA	#>sdPageStart
      4  f9c9		       85 04		      STA	_sdHalfPageStart+1
    178  f9cb		       20 df f9 	      JSR	_READ_A_PAGE_FROM_SD
    179  f9ce		       e6 04		      INC	_sdHalfPageStart+1
    180  f9d0		       20 df f9 	      JSR	_READ_A_PAGE_FROM_SD
    181  f9d3							; reading CRC
    182  f9d3		       20 18 fb 	      JSR	_READ_BYTE_SD
    183  f9d6		       20 18 fb 	      JSR	_READ_BYTE_SD
    184  f9d9
    185  f9d9		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    186  f9dc		       a9 00		      LDA	#IO_OK
    187  f9de		       60		      RTS
    188  f9df
    189  f9df				   _READ_A_PAGE_FROM_SD
      0  f9df					      FOR_Y	0, UP_TO, 0
      1  f9df				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9df				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9df				  -	      ERR
      4  f9df					      ENDIF
      5  f9df				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9df				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9df				  -	      ERR
      8  f9df					      ENDIF
      9  f9df				  -	      IF	[ 0 == ACCUM ]
     10  f9df				  -	      TAY
     11  f9df					      ELSE
     12  f9df				  -	      IF	[ 0 == X_REG ]
     13  f9df				  -	      PHA
     14  f9df				  -	      TXA
     15  f9df				  -	      TAY
     16  f9df				  -	      PLA
     17  f9df					      ELSE
     18  f9df					      IF	[ 0 != Y_REG ]
     19  f9df		       a0 00		      LDY	#0
     20  f9e1					      ENDIF
     21  f9e1					      ENDIF
     22  f9e1					      ENDIF
     23  f9e1				   _TO_PUSH_3 SET	0
     24  f9e1				   _TO_PUSH_2 SET	UP_TO
     25  f9e1				   _STRUCT_MAC_LABEL_14
     26  f9e1				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9e1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9e1					      INCLUDE	"STKPUSH3.ASM"
     22  f9e1					      LIST	ON
------- FILE for_y
    191  f9e1		       20 18 fb 	      JSR	_READ_BYTE_SD
    192  f9e4		       a5 00		      LDA	_response
    193  f9e6		       91 03		      STA	(_sdHalfPageStart),Y
      0  f9e8					      NEXT_Y
      1  f9e8				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9e8				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9e8				  -	      DEY
      4  f9e8				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9e8				  -	      BNE	.loop
      6  f9e8				  -	      ELSE
      7  f9e8				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9e8				  -	      BPL	.loop
      9  f9e8				  -	      ELSE
     10  f9e8				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9e8				  -	      BMI	.loop
     12  f9e8				  -	      ELSE
     13  f9e8				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9e8				  -	      CPY	_STK_LVL_3
     15  f9e8				  -	      ELSE
     16  f9e8				  -	      CPY	#_STK_LVL_3
     17  f9e8				  -	      ENDIF
     18  f9e8				  -	      BNE	.loop
     19  f9e8				  -	      ENDIF
     20  f9e8				  -	      ENDIF
     21  f9e8				  -	      ENDIF
     22  f9e8					      ELSE
     23  f9e8		       c8		      INY
     24  f9e9					      IF	[ _STK_LVL_3 == 0 ]
     25  f9e9		       d0 f6		      BNE	.loop
     26  f9eb				  -	      ELSE
     27  f9eb				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9eb				  -	      BMI	.loop
     29  f9eb				  -	      ELSE
     30  f9eb				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9eb				  -	      BPL	.loop
     32  f9eb				  -	      ELSE
     33  f9eb				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9eb				  -	      CPY	_STK_LVL_3
     35  f9eb				  -	      ELSE
     36  f9eb				  -	      CPY	#_STK_LVL_3
     37  f9eb				  -	      ENDIF
     38  f9eb				  -	      BNE	.loop
     39  f9eb				  -	      ENDIF
     40  f9eb				  -	      ENDIF
     41  f9eb					      ENDIF
     42  f9eb					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9eb					      INCLUDE	"STACKPOP3.ASM"
     19  f9eb					      LIST	ON
------- FILE next_y
    195  f9eb		       60		      RTS
    196  f9ec
    197  f9ec							; Changes X and Y
    198  f9ec				   _WAIT
      0  f9ec					      FOR_X	0, UP_TO, 95
      1  f9ec				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9ec				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9ec				  -	      ERR
      4  f9ec					      ENDIF
      5  f9ec				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9ec				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9ec				  -	      ERR
      8  f9ec					      ENDIF
      9  f9ec				  -	      IF	[ 0 == ACCUM ]
     10  f9ec				  -	      TAX
     11  f9ec					      ELSE
     12  f9ec				  -	      IF	[ 0 == Y_REG ]
     13  f9ec				  -	      PHA
     14  f9ec				  -	      TYA
     15  f9ec				  -	      TAX
     16  f9ec				  -	      PLA
     17  f9ec					      ELSE
     18  f9ec					      IF	[ 0 != X_REG ]
     19  f9ec		       a2 00		      LDX	#0
     20  f9ee					      ENDIF
     21  f9ee					      ENDIF
     22  f9ee					      ENDIF
     23  f9ee				   _TO_PUSH_3 SET	95
     24  f9ee				   _TO_PUSH_2 SET	UP_TO
     25  f9ee				   _STRUCT_MAC_LABEL_15
     26  f9ee				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9ee				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9ee					      INCLUDE	"STKPUSH3.ASM"
     22  f9ee					      LIST	ON
------- FILE for_x
      0  f9ee					      FOR_Y	0, UP_TO, 100
      1  f9ee				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9ee				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9ee				  -	      ERR
      4  f9ee					      ENDIF
      5  f9ee				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9ee				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9ee				  -	      ERR
      8  f9ee					      ENDIF
      9  f9ee				  -	      IF	[ 0 == ACCUM ]
     10  f9ee				  -	      TAY
     11  f9ee					      ELSE
     12  f9ee				  -	      IF	[ 0 == X_REG ]
     13  f9ee				  -	      PHA
     14  f9ee				  -	      TXA
     15  f9ee				  -	      TAY
     16  f9ee				  -	      PLA
     17  f9ee					      ELSE
     18  f9ee					      IF	[ 0 != Y_REG ]
     19  f9ee		       a0 00		      LDY	#0
     20  f9f0					      ENDIF
     21  f9f0					      ENDIF
     22  f9f0					      ENDIF
     23  f9f0				   _TO_PUSH_3 SET	100
     24  f9f0				   _TO_PUSH_2 SET	UP_TO
     25  f9f0				   _STRUCT_MAC_LABEL_16
     26  f9f0				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9f0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9f0					      INCLUDE	"STKPUSH3.ASM"
     22  f9f0					      LIST	ON
------- FILE for_y
    201  f9f0							; nothing
      0  f9f0					      NEXT_Y
      1  f9f0				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9f0				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9f0				  -	      DEY
      4  f9f0				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9f0				  -	      BNE	.loop
      6  f9f0				  -	      ELSE
      7  f9f0				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9f0				  -	      BPL	.loop
      9  f9f0				  -	      ELSE
     10  f9f0				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9f0				  -	      BMI	.loop
     12  f9f0				  -	      ELSE
     13  f9f0				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9f0				  -	      CPY	_STK_LVL_3
     15  f9f0				  -	      ELSE
     16  f9f0				  -	      CPY	#_STK_LVL_3
     17  f9f0				  -	      ENDIF
     18  f9f0				  -	      BNE	.loop
     19  f9f0				  -	      ENDIF
     20  f9f0				  -	      ENDIF
     21  f9f0				  -	      ENDIF
     22  f9f0					      ELSE
     23  f9f0		       c8		      INY
     24  f9f1				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9f1				  -	      BNE	.loop
     26  f9f1					      ELSE
     27  f9f1				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9f1				  -	      BMI	.loop
     29  f9f1					      ELSE
     30  f9f1				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9f1				  -	      BPL	.loop
     32  f9f1					      ELSE
     33  f9f1				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9f1				  -	      CPY	_STK_LVL_3
     35  f9f1					      ELSE
     36  f9f1		       c0 64		      CPY	#_STK_LVL_3
     37  f9f3					      ENDIF
     38  f9f3		       d0 fb		      BNE	.loop
     39  f9f5					      ENDIF
     40  f9f5					      ENDIF
     41  f9f5					      ENDIF
     42  f9f5					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9f5					      INCLUDE	"STACKPOP3.ASM"
     19  f9f5					      LIST	ON
------- FILE next_y
      0  f9f5					      NEXT_X
      1  f9f5				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9f5				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9f5				  -	      DEX
      4  f9f5				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9f5				  -	      BNE	.loop
      6  f9f5				  -	      ELSE
      7  f9f5				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9f5				  -	      BPL	.loop
      9  f9f5				  -	      ELSE
     10  f9f5				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9f5				  -	      BMI	.loop
     12  f9f5				  -	      ELSE
     13  f9f5				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9f5				  -	      CPX	_STK_LVL_3
     15  f9f5				  -	      ELSE
     16  f9f5				  -	      CPX	#_STK_LVL_3
     17  f9f5				  -	      ENDIF
     18  f9f5				  -	      BNE	.loop
     19  f9f5				  -	      ENDIF
     20  f9f5				  -	      ENDIF
     21  f9f5				  -	      ENDIF
     22  f9f5					      ELSE
     23  f9f5		       e8		      INX
     24  f9f6				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9f6				  -	      BNE	.loop
     26  f9f6					      ELSE
     27  f9f6				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9f6				  -	      BMI	.loop
     29  f9f6					      ELSE
     30  f9f6				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9f6				  -	      BPL	.loop
     32  f9f6					      ELSE
     33  f9f6				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9f6				  -	      CPX	_STK_LVL_3
     35  f9f6					      ELSE
     36  f9f6		       e0 5f		      CPX	#_STK_LVL_3
     37  f9f8					      ENDIF
     38  f9f8		       d0 f4		      BNE	.loop
     39  f9fa					      ENDIF
     40  f9fa					      ENDIF
     41  f9fa					      ENDIF
     42  f9fa					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9fa					      INCLUDE	"STACKPOP3.ASM"
     19  f9fa					      LIST	ON
------- FILE next_x
    204  f9fa		       60		      RTS
    205  f9fb
    206  f9fb							; Changes X
    207  f9fb				   _DISABLE_SD_AFTER_OPERATION
    208  f9fb		       a5 00		      LDA	_response
    209  f9fd		       48		      PHA
    210  f9fe		       20 18 fb 	      JSR	_READ_BYTE_SD
    211  fa01		       68		      PLA
    212  fa02		       85 00		      STA	_response
    213  fa04							; proceed with dummy clock
    214  fa04
    215  fa04							; Changes Y
    216  fa04				   _DUMMY_CLOCK_WITH_DISABLED_CARD
    217  fa04		       a5 00		      LDA	_response
    218  fa06		       48		      PHA
    219  fa07							; CS = DI = HIGH
    220  fa07		       a9 e0		      LDA	#%11100000
    221  fa09		       8d 10 80 	      STA	VIA_FIRST_RB
    222  fa0c		       a9 04		      LDA	#%00000100
    223  fa0e		       8d 1b 80 	      STA	VIA_FIRST_ACR
    224  fa11		       78		      SEI
    225  fa12		       ad 1a 80 	      LDA	VIA_FIRST_SR	; trigger shifting
    226  fa15		       a9 01		      LDA	#1
    227  fa17		       85 08		      STA	_SHIFTING_FLAG
    228  fa19		       58		      CLI
    229  fa1a		       20 45 fb 	      JSR	_WAIT_FOR_SHIFTING
    230  fa1d		       68		      PLA
    231  fa1e		       85 00		      STA	_response
    232  fa20		       60		      RTS
    233  fa21
    234  fa21							; CMD 0
    235  fa21							; Changes X & Y
    236  fa21				   _CMD_GO_IDLE_STATE
    237  fa21		       a9 40		      LDA	#[ 0 | $40 ]
    238  fa23		       85 07		      STA	_cmd
    239  fa25		       a9 00		      LDA	#0
    240  fa27		       85 03		      STA	_arg
    241  fa29		       85 04		      STA	_arg+1
    242  fa2b		       85 05		      STA	_arg+2
    243  fa2d		       85 06		      STA	_arg+3
    244  fa2f		       a9 95		      LDA	#$95
    245  fa31		       85 02		      STA	_crc
    246  fa33		       20 e1 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    247  fa36		       48		      PHA
    248  fa37		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    249  fa3a		       68		      PLA
      0  fa3b					      IF_NEQ
      1  fa3b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa3b		       f0 0a		      BEQ	.tmp
      3  fa3b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa3b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa3d					      INCLUDE	"STACKPUSH.ASM"
     22  fa3d					      LIST	ON
------- FILE if_neq
      0  fa3d					      IF_NEG
      0  fa3d					      IF_MINUS
      1  fa3d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa3d		       10 05		      BPL	.tmp
      3  fa3d				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa3d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa3f					      INCLUDE	"STACKPUSH.ASM"
     22  fa3f					      LIST	ON
------- FILE if_minus
    252  fa3f		       a9 05		      LDA	#IO_SD_BUSY_AFTER_GO_IDLE_STATE
      0  fa41					      ELSE_
      1  fa41				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa41		       4c 46 fa 	      JMP	.tmp
      3  fa44				   _STRUCT_MAC_LABEL_18
      4  fa44				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa44				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    254  fa44		       a9 04		      LDA	#IO_SD_BUSY_BEFORE_GO_IDLE_STATE
      0  fa46					      END_IF
      1  fa46				   _STRUCT_MAC_LABEL_19
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa46					      INCLUDE	"STACKPOP.ASM"
     21  fa46					      LIST	ON
------- FILE end_if
    256  fa46		       60		      RTS
      0  fa47					      END_IF
      1  fa47				   _STRUCT_MAC_LABEL_17
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa47					      INCLUDE	"STACKPOP.ASM"
     21  fa47					      LIST	ON
------- FILE end_if
    258  fa47		       a5 00		      LDA	_response
    259  fa49		       c9 01		      CMP	#1	; R1 idle
      0  fa4b					      IF_EQ
      1  fa4b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa4b		       d0 05		      BNE	.tmp
      3  fa4b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa4b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa4d					      INCLUDE	"STACKPUSH.ASM"
     22  fa4d					      LIST	ON
------- FILE if_eq
    261  fa4d		       a9 00		      LDA	#_SD_OK
      0  fa4f					      ELSE_
      1  fa4f				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa4f		       4c 54 fa 	      JMP	.tmp
      3  fa52				   _STRUCT_MAC_LABEL_20
      4  fa52				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa52				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    263  fa52		       a9 06		      LDA	#IO_SD_NOT_IDLE_AFTER_GO_IDLE_STATE
      0  fa54					      END_IF
      1  fa54				   _STRUCT_MAC_LABEL_21
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa54					      INCLUDE	"STACKPOP.ASM"
     21  fa54					      LIST	ON
------- FILE end_if
    265  fa54		       60		      RTS
    266  fa55
    267  fa55							; CMD 8
    268  fa55							; Changes X & Y
    269  fa55				   _CMD_SEND_IF_COND
    270  fa55		       a9 48		      LDA	#[ 8 | $40 ]
    271  fa57		       85 07		      STA	_cmd
    272  fa59		       a9 aa		      LDA	#$AA
    273  fa5b		       85 03		      STA	_arg
    274  fa5d		       a9 01		      LDA	#1
    275  fa5f		       85 04		      STA	_arg+1
    276  fa61		       a9 87		      LDA	#$87
    277  fa63		       85 02		      STA	_crc
    278  fa65		       20 e1 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    279  fa68		       48		      PHA
    280  fa69		       a5 00		      LDA	_response
    281  fa6b		       48		      PHA
    282  fa6c							; Read 32 bits of data
      0  fa6c					      FOR_Y	0, UP_TO, 4
      1  fa6c				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fa6c				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fa6c				  -	      ERR
      4  fa6c					      ENDIF
      5  fa6c				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fa6c				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fa6c				  -	      ERR
      8  fa6c					      ENDIF
      9  fa6c				  -	      IF	[ 0 == ACCUM ]
     10  fa6c				  -	      TAY
     11  fa6c					      ELSE
     12  fa6c				  -	      IF	[ 0 == X_REG ]
     13  fa6c				  -	      PHA
     14  fa6c				  -	      TXA
     15  fa6c				  -	      TAY
     16  fa6c				  -	      PLA
     17  fa6c					      ELSE
     18  fa6c					      IF	[ 0 != Y_REG ]
     19  fa6c		       a0 00		      LDY	#0
     20  fa6e					      ENDIF
     21  fa6e					      ENDIF
     22  fa6e					      ENDIF
     23  fa6e				   _TO_PUSH_3 SET	4
     24  fa6e				   _TO_PUSH_2 SET	UP_TO
     25  fa6e				   _STRUCT_MAC_LABEL_22
     26  fa6e				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fa6e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fa6e					      INCLUDE	"STKPUSH3.ASM"
     22  fa6e					      LIST	ON
------- FILE for_y
    284  fa6e		       20 18 fb 	      JSR	_READ_BYTE_SD
      0  fa71					      NEXT_Y
      1  fa71				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fa71				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fa71				  -	      DEY
      4  fa71				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fa71				  -	      BNE	.loop
      6  fa71				  -	      ELSE
      7  fa71				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fa71				  -	      BPL	.loop
      9  fa71				  -	      ELSE
     10  fa71				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fa71				  -	      BMI	.loop
     12  fa71				  -	      ELSE
     13  fa71				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fa71				  -	      CPY	_STK_LVL_3
     15  fa71				  -	      ELSE
     16  fa71				  -	      CPY	#_STK_LVL_3
     17  fa71				  -	      ENDIF
     18  fa71				  -	      BNE	.loop
     19  fa71				  -	      ENDIF
     20  fa71				  -	      ENDIF
     21  fa71				  -	      ENDIF
     22  fa71					      ELSE
     23  fa71		       c8		      INY
     24  fa72				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fa72				  -	      BNE	.loop
     26  fa72					      ELSE
     27  fa72				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fa72				  -	      BMI	.loop
     29  fa72					      ELSE
     30  fa72				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fa72				  -	      BPL	.loop
     32  fa72					      ELSE
     33  fa72				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fa72				  -	      CPY	_STK_LVL_3
     35  fa72					      ELSE
     36  fa72		       c0 04		      CPY	#_STK_LVL_3
     37  fa74					      ENDIF
     38  fa74		       d0 f8		      BNE	.loop
     39  fa76					      ENDIF
     40  fa76					      ENDIF
     41  fa76					      ENDIF
     42  fa76					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fa76					      INCLUDE	"STACKPOP3.ASM"
     19  fa76					      LIST	ON
------- FILE next_y
    286  fa76		       68		      PLA
    287  fa77		       85 00		      STA	_response
    288  fa79		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    289  fa7c		       68		      PLA
      0  fa7d					      IF_NEQ
      1  fa7d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa7d		       f0 0a		      BEQ	.tmp
      3  fa7d				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa7d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa7f					      INCLUDE	"STACKPUSH.ASM"
     22  fa7f					      LIST	ON
------- FILE if_neq
      0  fa7f					      IF_NEG
      0  fa7f					      IF_MINUS
      1  fa7f				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa7f		       10 05		      BPL	.tmp
      3  fa7f				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa7f				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa81					      INCLUDE	"STACKPUSH.ASM"
     22  fa81					      LIST	ON
------- FILE if_minus
    292  fa81		       a9 08		      LDA	#IO_SD_BUSY_AFTER_SEND_IF_COND
      0  fa83					      ELSE_
      1  fa83				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa83		       4c 88 fa 	      JMP	.tmp
      3  fa86				   _STRUCT_MAC_LABEL_24
      4  fa86				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa86				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    294  fa86		       a9 07		      LDA	#IO_SD_BUSY_BEFORE_SEND_IF_COND
      0  fa88					      END_IF
      1  fa88				   _STRUCT_MAC_LABEL_25
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa88					      INCLUDE	"STACKPOP.ASM"
     21  fa88					      LIST	ON
------- FILE end_if
    296  fa88		       60		      RTS
      0  fa89					      END_IF
      1  fa89				   _STRUCT_MAC_LABEL_23
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa89					      INCLUDE	"STACKPOP.ASM"
     21  fa89					      LIST	ON
------- FILE end_if
    298  fa89		       a5 00		      LDA	_response
    299  fa8b		       c9 01		      CMP	#1	; R1 idle
      0  fa8d					      IF_EQ
      1  fa8d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa8d		       d0 05		      BNE	.tmp
      3  fa8d				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa8d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa8f					      INCLUDE	"STACKPUSH.ASM"
     22  fa8f					      LIST	ON
------- FILE if_eq
    301  fa8f		       a9 00		      LDA	#_SD_OK
      0  fa91					      ELSE_
      1  fa91				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa91		       4c 96 fa 	      JMP	.tmp
      3  fa94				   _STRUCT_MAC_LABEL_26
      4  fa94				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa94				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    303  fa94		       a9 09		      LDA	#IO_SD_NOT_IDLE_AFTER_SEND_IF_COND
      0  fa96					      END_IF
      1  fa96				   _STRUCT_MAC_LABEL_27
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa96					      INCLUDE	"STACKPOP.ASM"
     21  fa96					      LIST	ON
------- FILE end_if
    305  fa96		       60		      RTS
    306  fa97
    307  fa97							; CMD 41
    308  fa97				   _CMD_APP_SEND_OP_COND
    309  fa97							; Send CMD41 with leading CMD55
    310  fa97		       a9 77		      LDA	#[ 55 | $40 ]
    311  fa99		       85 07		      STA	_cmd
    312  fa9b		       a9 00		      LDA	#0
    313  fa9d		       85 03		      STA	_arg
    314  fa9f		       85 04		      STA	_arg+1
    315  faa1		       85 05		      STA	_arg+2
    316  faa3		       85 06		      STA	_arg+3
    317  faa5		       a9 65		      LDA	#$65
    318  faa7		       85 02		      STA	_crc
    319  faa9		       20 e1 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    320  faac		       48		      PHA
    321  faad							; JSR _DISABLE_SD_AFTER_OPERATION
    322  faad		       68		      PLA
      0  faae					      IF_NEQ
      1  faae				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  faae		       f0 0a		      BEQ	.tmp
      3  faae				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  faae				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fab0					      INCLUDE	"STACKPUSH.ASM"
     22  fab0					      LIST	ON
------- FILE if_neq
      0  fab0					      IF_NEG
      0  fab0					      IF_MINUS
      1  fab0				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fab0		       10 05		      BPL	.tmp
      3  fab0				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fab0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fab2					      INCLUDE	"STACKPUSH.ASM"
     22  fab2					      LIST	ON
------- FILE if_minus
    325  fab2		       a9 0b		      LDA	#IO_SD_BUSY_AFTER_APP_CMD
      0  fab4					      ELSE_
      1  fab4				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fab4		       4c b9 fa 	      JMP	.tmp
      3  fab7				   _STRUCT_MAC_LABEL_29
      4  fab7				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fab7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    327  fab7		       a9 0a		      LDA	#IO_SD_BUSY_BEFORE_APP_CMD
      0  fab9					      END_IF
      1  fab9				   _STRUCT_MAC_LABEL_30
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fab9					      INCLUDE	"STACKPOP.ASM"
     21  fab9					      LIST	ON
------- FILE end_if
    329  fab9		       60		      RTS
      0  faba					      END_IF
      1  faba				   _STRUCT_MAC_LABEL_28
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  faba					      INCLUDE	"STACKPOP.ASM"
     21  faba					      LIST	ON
------- FILE end_if
    331  faba
    332  faba		       a9 69		      LDA	#[ 41 | $40 ]
    333  fabc		       85 07		      STA	_cmd
    334  fabe		       a9 40		      LDA	#$40
    335  fac0		       85 06		      STA	_arg+3
    336  fac2		       a9 77		      LDA	#$77
    337  fac4		       85 02		      STA	_crc
    338  fac6		       20 e1 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    339  fac9		       48		      PHA
    340  faca		       20 fb f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    341  facd		       68		      PLA
      0  face					      IF_NEQ
      1  face				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  face		       f0 0a		      BEQ	.tmp
      3  face				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  face				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fad0					      INCLUDE	"STACKPUSH.ASM"
     22  fad0					      LIST	ON
------- FILE if_neq
      0  fad0					      IF_NEG
      0  fad0					      IF_MINUS
      1  fad0				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fad0		       10 05		      BPL	.tmp
      3  fad0				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fad0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fad2					      INCLUDE	"STACKPUSH.ASM"
     22  fad2					      LIST	ON
------- FILE if_minus
    344  fad2		       a9 0d		      LDA	#IO_SD_BUSY_AFTER_APP_SEND_OP_COND
      0  fad4					      ELSE_
      1  fad4				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fad4		       4c d9 fa 	      JMP	.tmp
      3  fad7				   _STRUCT_MAC_LABEL_32
      4  fad7				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fad7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    346  fad7		       a9 0c		      LDA	#IO_SD_BUSY_BEFORE_APP_SEND_OP_COND
      0  fad9					      END_IF
      1  fad9				   _STRUCT_MAC_LABEL_33
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fad9					      INCLUDE	"STACKPOP.ASM"
     21  fad9					      LIST	ON
------- FILE end_if
    348  fad9		       60		      RTS
      0  fada					      END_IF
      1  fada				   _STRUCT_MAC_LABEL_31
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fada					      INCLUDE	"STACKPOP.ASM"
     21  fada					      LIST	ON
------- FILE end_if
    350  fada		       a5 00		      LDA	_response
      0  fadc					      IF_NEQ
      1  fadc				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fadc		       f0 02		      BEQ	.tmp
      3  fadc				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fadc				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fade					      INCLUDE	"STACKPUSH.ASM"
     22  fade					      LIST	ON
------- FILE if_neq
    352  fade		       a9 0e		      LDA	#IO_SD_ERROR_AFTER_APP_SEND_OP_COND
      0  fae0					      END_IF
      1  fae0				   _STRUCT_MAC_LABEL_34
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fae0					      INCLUDE	"STACKPOP.ASM"
     21  fae0					      LIST	ON
------- FILE end_if
    354  fae0		       60		      RTS
    355  fae1
    356  fae1		       00 00	   _SD_OK     =	0
    357  fae1		       00 01	   _SD_BUSY_BEFORE_COMMAND =	1
    358  fae1							; For negative flag
    359  fae1		       00 ff	   _SD_BUSY_AFTER_COMMAND =	$FF
    360  fae1							; Changes X and Y
    361  fae1				   _SEND_SD_COMMAND_AND_WAIT_R1
    362  fae1					      SUBROUTINE
      0  fae1					      FOR_Y	0, UP_TO, $F0
      1  fae1				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fae1				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fae1				  -	      ERR
      4  fae1					      ENDIF
      5  fae1				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fae1				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fae1				  -	      ERR
      8  fae1					      ENDIF
      9  fae1				  -	      IF	[ 0 == ACCUM ]
     10  fae1				  -	      TAY
     11  fae1					      ELSE
     12  fae1				  -	      IF	[ 0 == X_REG ]
     13  fae1				  -	      PHA
     14  fae1				  -	      TXA
     15  fae1				  -	      TAY
     16  fae1				  -	      PLA
     17  fae1					      ELSE
     18  fae1					      IF	[ 0 != Y_REG ]
     19  fae1		       a0 00		      LDY	#0
     20  fae3					      ENDIF
     21  fae3					      ENDIF
     22  fae3					      ENDIF
     23  fae3				   _TO_PUSH_3 SET	$F0
     24  fae3				   _TO_PUSH_2 SET	UP_TO
     25  fae3				   _STRUCT_MAC_LABEL_35
     26  fae3				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fae3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fae3					      INCLUDE	"STKPUSH3.ASM"
     22  fae3					      LIST	ON
------- FILE for_y
    364  fae3		       20 18 fb 	      JSR	_READ_BYTE_SD
    365  fae6		       a5 00		      LDA	_response
    366  fae8		       c9 ff		      CMP	#$FF
    367  faea		       f0 08		      BEQ	.notBusy
      0  faec					      NEXT_Y
      1  faec				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  faec				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  faec				  -	      DEY
      4  faec				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  faec				  -	      BNE	.loop
      6  faec				  -	      ELSE
      7  faec				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  faec				  -	      BPL	.loop
      9  faec				  -	      ELSE
     10  faec				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  faec				  -	      BMI	.loop
     12  faec				  -	      ELSE
     13  faec				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  faec				  -	      CPY	_STK_LVL_3
     15  faec				  -	      ELSE
     16  faec				  -	      CPY	#_STK_LVL_3
     17  faec				  -	      ENDIF
     18  faec				  -	      BNE	.loop
     19  faec				  -	      ENDIF
     20  faec				  -	      ENDIF
     21  faec				  -	      ENDIF
     22  faec					      ELSE
     23  faec		       c8		      INY
     24  faed				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  faed				  -	      BNE	.loop
     26  faed					      ELSE
     27  faed				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  faed				  -	      BMI	.loop
     29  faed					      ELSE
     30  faed				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  faed				  -	      BPL	.loop
     32  faed					      ELSE
     33  faed				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  faed				  -	      CPY	_STK_LVL_3
     35  faed					      ELSE
     36  faed		       c0 f0		      CPY	#_STK_LVL_3
     37  faef					      ENDIF
     38  faef		       d0 f2		      BNE	.loop
     39  faf1					      ENDIF
     40  faf1					      ENDIF
     41  faf1					      ENDIF
     42  faf1					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  faf1					      INCLUDE	"STACKPOP3.ASM"
     19  faf1					      LIST	ON
------- FILE next_y
    369  faf1		       a9 01		      LDA	#_SD_BUSY_BEFORE_COMMAND
    370  faf3		       60		      RTS
    371  faf4				   .notBusy
    372  faf4							; JSR _DISABLE_SD_AFTER_OPERATION
    373  faf4							; It's ready. Sending command, arg and crc
    374  faf4							; They are sequential in RAM
      0  faf4					      FOR_Y	5, DOWN_TO, NEG_NRs
      1  faf4				  -	      IF	[ !(5 == ACCUM || 5 == X_REG || 5 == Y_REG || 5 < $100) ]
      2  faf4				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  faf4				  -	      ERR
      4  faf4					      ENDIF
      5  faf4				  -	      IF	[ !(DOWN_TO == UP_TO || DOWN_TO == DOWN_TO) ]
      6  faf4				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  faf4				  -	      ERR
      8  faf4					      ENDIF
      9  faf4				  -	      IF	[ 5 == ACCUM ]
     10  faf4				  -	      TAY
     11  faf4					      ELSE
     12  faf4				  -	      IF	[ 5 == X_REG ]
     13  faf4				  -	      PHA
     14  faf4				  -	      TXA
     15  faf4				  -	      TAY
     16  faf4				  -	      PLA
     17  faf4					      ELSE
     18  faf4					      IF	[ 5 != Y_REG ]
     19  faf4		       a0 05		      LDY	#5
     20  faf6					      ENDIF
     21  faf6					      ENDIF
     22  faf6					      ENDIF
     23  faf6				   _TO_PUSH_3 SET	NEG_NRs
     24  faf6				   _TO_PUSH_2 SET	DOWN_TO
     25  faf6				   _STRUCT_MAC_LABEL_36
     26  faf6				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  faf6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  faf6					      INCLUDE	"STKPUSH3.ASM"
     22  faf6					      LIST	ON
------- FILE for_y
    376  faf6		       b9 02 00 	      LDA	_crc,Y
    377  faf9		       85 01		      STA	_sendByte
    378  fafb		       20 30 fb 	      JSR	_RW_BYTE_SD
      0  fafe					      NEXT_Y
      1  fafe				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fafe					      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fafe		       88		      DEY
      4  faff				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  faff				  -	      BNE	.loop
      6  faff					      ELSE
      7  faff					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  faff		       10 f5		      BPL	.loop
      9  fb01				  -	      ELSE
     10  fb01				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb01				  -	      BMI	.loop
     12  fb01				  -	      ELSE
     13  fb01				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb01				  -	      CPY	_STK_LVL_3
     15  fb01				  -	      ELSE
     16  fb01				  -	      CPY	#_STK_LVL_3
     17  fb01				  -	      ENDIF
     18  fb01				  -	      BNE	.loop
     19  fb01				  -	      ENDIF
     20  fb01					      ENDIF
     21  fb01					      ENDIF
     22  fb01				  -	      ELSE
     23  fb01				  -	      INY
     24  fb01				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb01				  -	      BNE	.loop
     26  fb01				  -	      ELSE
     27  fb01				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb01				  -	      BMI	.loop
     29  fb01				  -	      ELSE
     30  fb01				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb01				  -	      BPL	.loop
     32  fb01				  -	      ELSE
     33  fb01				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb01				  -	      CPY	_STK_LVL_3
     35  fb01				  -	      ELSE
     36  fb01				  -	      CPY	#_STK_LVL_3
     37  fb01				  -	      ENDIF
     38  fb01				  -	      BNE	.loop
     39  fb01				  -	      ENDIF
     40  fb01				  -	      ENDIF
     41  fb01				  -	      ENDIF
     42  fb01					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fb01					      INCLUDE	"STACKPOP3.ASM"
     19  fb01					      LIST	ON
------- FILE next_y
    380  fb01							; We need to wait for R1 response
    381  fb01							; It starts with 0 in 7th bit
    382  fb01		       20 18 fb 	      JSR	_READ_BYTE_SD	; to trigger shift in
      0  fb04					      FOR_Y	0, UP_TO, $F0
      1  fb04				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fb04				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fb04				  -	      ERR
      4  fb04					      ENDIF
      5  fb04				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fb04				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fb04				  -	      ERR
      8  fb04					      ENDIF
      9  fb04				  -	      IF	[ 0 == ACCUM ]
     10  fb04				  -	      TAY
     11  fb04					      ELSE
     12  fb04				  -	      IF	[ 0 == X_REG ]
     13  fb04				  -	      PHA
     14  fb04				  -	      TXA
     15  fb04				  -	      TAY
     16  fb04				  -	      PLA
     17  fb04					      ELSE
     18  fb04					      IF	[ 0 != Y_REG ]
     19  fb04		       a0 00		      LDY	#0
     20  fb06					      ENDIF
     21  fb06					      ENDIF
     22  fb06					      ENDIF
     23  fb06				   _TO_PUSH_3 SET	$F0
     24  fb06				   _TO_PUSH_2 SET	UP_TO
     25  fb06				   _STRUCT_MAC_LABEL_37
     26  fb06				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fb06				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fb06					      INCLUDE	"STKPUSH3.ASM"
     22  fb06					      LIST	ON
------- FILE for_y
    384  fb06		       20 18 fb 	      JSR	_READ_BYTE_SD
    385  fb09		       a5 00		      LDA	_response
    386  fb0b		       10 08		      BPL	.r1Received
      0  fb0d					      NEXT_Y
      1  fb0d				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fb0d				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fb0d				  -	      DEY
      4  fb0d				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fb0d				  -	      BNE	.loop
      6  fb0d				  -	      ELSE
      7  fb0d				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fb0d				  -	      BPL	.loop
      9  fb0d				  -	      ELSE
     10  fb0d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb0d				  -	      BMI	.loop
     12  fb0d				  -	      ELSE
     13  fb0d				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb0d				  -	      CPY	_STK_LVL_3
     15  fb0d				  -	      ELSE
     16  fb0d				  -	      CPY	#_STK_LVL_3
     17  fb0d				  -	      ENDIF
     18  fb0d				  -	      BNE	.loop
     19  fb0d				  -	      ENDIF
     20  fb0d				  -	      ENDIF
     21  fb0d				  -	      ENDIF
     22  fb0d					      ELSE
     23  fb0d		       c8		      INY
     24  fb0e				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb0e				  -	      BNE	.loop
     26  fb0e					      ELSE
     27  fb0e				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb0e				  -	      BMI	.loop
     29  fb0e					      ELSE
     30  fb0e				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb0e				  -	      BPL	.loop
     32  fb0e					      ELSE
     33  fb0e				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb0e				  -	      CPY	_STK_LVL_3
     35  fb0e					      ELSE
     36  fb0e		       c0 f0		      CPY	#_STK_LVL_3
     37  fb10					      ENDIF
     38  fb10		       d0 f4		      BNE	.loop
     39  fb12					      ENDIF
     40  fb12					      ENDIF
     41  fb12					      ENDIF
     42  fb12					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fb12					      INCLUDE	"STACKPOP3.ASM"
     19  fb12					      LIST	ON
------- FILE next_y
    388  fb12		       a9 ff		      LDA	#_SD_BUSY_AFTER_COMMAND
    389  fb14		       60		      RTS
    390  fb15				   .r1Received
    391  fb15		       a9 00		      LDA	#_SD_OK
    392  fb17		       60		      RTS
    393  fb18
    394 U0008					      SEG.U	zpVars
    395 U0008		       00	   _SHIFTING_FLAG ds	1
    396 U0009
    397  fb18					      SEG	code
    398  fb18							; Changes X
    399  fb18				   _READ_BYTE_SD
    400  fb18		       a9 04		      LDA	#%00000100
    401  fb1a		       8d 1b 80 	      STA	VIA_FIRST_ACR
    402  fb1d		       a9 20		      LDA	#%00100000
    403  fb1f		       8d 10 80 	      STA	VIA_FIRST_RB
    404  fb22
    405  fb22		       78		      SEI
    406  fb23		       ad 1a 80 	      LDA	VIA_FIRST_SR	; read SR to trigger shift in
    407  fb26		       85 00		      STA	_response
    408  fb28		       a9 01		      LDA	#1
    409  fb2a		       85 08		      STA	_SHIFTING_FLAG
    410  fb2c		       58		      CLI
    411  fb2d		       4c 45 fb 	      JMP	_WAIT_FOR_SHIFTING
    412  fb30
    413  fb30							; Sends _sendByte
    414  fb30							; The result will be in _response
    415  fb30							; CS is untouched
    416  fb30							; Changes X
    417  fb30				   _RW_BYTE_SD
    418  fb30		       a9 14		      LDA	#%00010100
    419  fb32		       8d 1b 80 	      STA	VIA_FIRST_ACR
    420  fb35		       a9 40		      LDA	#%01000000
    421  fb37		       8d 10 80 	      STA	VIA_FIRST_RB
    422  fb3a
    423  fb3a		       78		      SEI
    424  fb3b		       a5 01		      LDA	_sendByte
    425  fb3d		       8d 1a 80 	      STA	VIA_FIRST_SR
    426  fb40		       a9 01		      LDA	#1
    427  fb42		       85 08		      STA	_SHIFTING_FLAG
    428  fb44		       58		      CLI
    429  fb45
    430  fb45				   _WAIT_FOR_SHIFTING
    431  fb45					      SUBROUTINE
    432  fb45				   .loop
    433  fb45		       a5 08		      LDA	_SHIFTING_FLAG
    434  fb47		       d0 fc		      BNE	.loop
    435  fb49		       60		      RTS
    436  fb4a
    437  fb4a					      MAC	check_shift_register_interrupt
    438  fb4a					      LDA	#%00000100
    439  fb4a					      AND	VIA_FIRST_IFR
    440  fb4a					      BEQ	.end
    441  fb4a					      JMP	_shift_register_interrup_handler
    442  fb4a				   .end
    443  fb4a					      ENDM
    444  fb4a
    445  fb4a				   _shift_register_interrup_handler
    446  fb4a		       a9 04		      LDA	#%00000100
    447  fb4c		       8d 1d 80 	      STA	VIA_FIRST_IFR
    448  fb4f		       a9 00		      LDA	#0
    449  fb51		       85 08		      STA	_SHIFTING_FLAG
    450  fb53		       68		      PLA
    451  fb54		       40		      RTI
------- FILE fat.asm
      2  fb55
      3  fb55		       01 fe	   _BOOT_SECTOR_SIGNATURE_OFFSET =	$1FE	; 2 bytes: 55 aa
      4  fb55		       01 be	   _PARTITION_OFFSET =	$1BE	; 16 bytes per record, 4 records
      5  fb55		       00 04	   _PARTITION_TYPE_OFFSET =	$4	; 1 byte
      6  fb55		       00 08	   _PARTITION_START_LBA_OFFSET =	$8	; 4 bytes
      7  fb55
      8  fb55		       00 0b	   _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST =	$B	; 2 bytes
      9  fb55		       00 0d	   _FAT_FIRST_SECTOR_SECTORS_PER_CLUSTER_OFFEST =	$D	; 1 byte
     10  fb55		       00 0e	   _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET =	$E	; 2 bytes
     11  fb55		       00 10	   _FAT_FIRST_SECTOR_NUBMER_OF_FATs_OFFSET =	$10	; 1 byte
     12  fb55		       00 15	   _FAT_FIRST_SECTOR_MEDIA_DESCRIPTOR_OFFSET =	$15	; 1 byte
     13  fb55		       00 20	   _FAT_FIRST_SECTOR_TOTAL_LOGICAL_SECTORS_OFFSET =	$20	; 4 bytes
     14  fb55		       00 24	   _FAT_FIRST_SECTOR_LOGICAL_SECTORS_PER_FAT_OFFSET =	$24	; 4 bytes
     15  fb55		       00 2c	   _FAT_FIRST_SECTOR_ROOT_DIRECTORY_CLUSTER_NUMBER_OFFSET =	$2C	; 4 bytes
     16  fb55		       00 30	   _FAT_FRIST_SECTOR_FS_INFORMATION_SECTOR_NUMBER_OFFSET =	$30	; 2 bytes
     17  fb55
     18  fb55		       00 14	   _DIR_RECORD_HIGH_START_CLUSTER_OFFSET =	$14	; 2 bytes
     19  fb55		       00 1a	   _DIR_RECORD_LOW_START_CLUSTER_OFFSET =	$1a	; 2 bytes
     20  fb55		       00 1c	   _DIR_RECORD_FILE_SIZE_OFFSET =	$1c	; 4 bytes
     21  fb55		       00 0b	   _DIR_RECORD_FLAGS_OFFSET =	$B	; 1 byte
     22  fb55		       00 20	   _DIR_RECORD_SIZE =	32
     23  fb55		       00 e5	   _DIR_RECORD_REMOVED_FILE_NAME =	$E5
     24  fb55		       00 0f	   _DIR_RECORD_VFAT_FLAG =	$0F
     25  fb55
     26  fb55					      SEG	code
     27  fb55				   INIT_FAT
     28  fb55					      SUBROUTINE
     29  fb55		       20 00 f9 	      JSR	INIT_SD
      0  fb58					      RTS_IF_NE
      1  fb58		       f0 01		      BEQ	.tmp
      2  fb5a		       60		      RTS
      3  fb5b				   .tmp
     31  fb5b
     32  fb5b							; Read boot sector
     33  fb5b							; A = 0 already
     34  fb5b		       85 03		      STA	sdSector
     35  fb5d		       85 04		      STA	sdSector+1
     36  fb5f		       85 05		      STA	sdSector+2
     37  fb61		       85 06		      STA	sdSector+3
     38  fb63		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fb66					      RTS_IF_NE
      1  fb66		       f0 01		      BEQ	.tmp
      2  fb68		       60		      RTS
      3  fb69				   .tmp
     40  fb69
     41  fb69							; Check boot sector signature
     42  fb69		       ad fe 7f 	      LDA	sdPageStart + _BOOT_SECTOR_SIGNATURE_OFFSET
     43  fb6c		       c9 55		      CMP	#$55
     44  fb6e		       d0 07		      BNE	.wrongBootSign
     45  fb70		       ad ff 7f 	      LDA	sdPageStart + _BOOT_SECTOR_SIGNATURE_OFFSET+1
     46  fb73		       c9 aa		      CMP	#$AA
     47  fb75		       f0 03		      BEQ	.goodBootSign
     48  fb77				   .wrongBootSign
     49  fb77		       a9 13		      LDA	#IO_WRONG_BOOT_SIGNATURE
     50  fb79		       60		      RTS
     51  fb7a				   .goodBootSign
     52  fb7a
     53  fb7a							; Check partition type
     54  fb7a		       ad c2 7f 	      LDA	sdPageStart + _PARTITION_OFFSET + _PARTITION_TYPE_OFFSET
     55  fb7d		       c9 0c		      CMP	#$0C
      0  fb7f					      IF_NEQ
      1  fb7f				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fb7f		       f0 03		      BEQ	.tmp
      3  fb7f				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fb7f				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fb81					      INCLUDE	"STACKPUSH.ASM"
     22  fb81					      LIST	ON
------- FILE if_neq
     57  fb81		       a9 14		      LDA	#IO_WRONG_PARTITION_TYPE
     58  fb83		       60		      RTS
      0  fb84					      END_IF
      1  fb84				   _STRUCT_MAC_LABEL_38
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fb84					      INCLUDE	"STACKPOP.ASM"
     21  fb84					      LIST	ON
------- FILE end_if
     60  fb84
     61  fb84							; Read partition start
      0  fb84					      FOR_X	0, UP_TO, 4
      1  fb84				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fb84				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fb84				  -	      ERR
      4  fb84					      ENDIF
      5  fb84				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fb84				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fb84				  -	      ERR
      8  fb84					      ENDIF
      9  fb84				  -	      IF	[ 0 == ACCUM ]
     10  fb84				  -	      TAX
     11  fb84					      ELSE
     12  fb84				  -	      IF	[ 0 == Y_REG ]
     13  fb84				  -	      PHA
     14  fb84				  -	      TYA
     15  fb84				  -	      TAX
     16  fb84				  -	      PLA
     17  fb84					      ELSE
     18  fb84					      IF	[ 0 != X_REG ]
     19  fb84		       a2 00		      LDX	#0
     20  fb86					      ENDIF
     21  fb86					      ENDIF
     22  fb86					      ENDIF
     23  fb86				   _TO_PUSH_3 SET	4
     24  fb86				   _TO_PUSH_2 SET	UP_TO
     25  fb86				   _STRUCT_MAC_LABEL_39
     26  fb86				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fb86				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fb86					      INCLUDE	"STKPUSH3.ASM"
     22  fb86					      LIST	ON
------- FILE for_x
     63  fb86		       bd c6 7f 	      LDA	[sdPageStart + _PARTITION_OFFSET + _PARTITION_START_LBA_OFFSET],X
     64  fb89		       95 03		      STA	sdSector,X
     65  fb8b		       95 0b		      STA	_fatSector,X
      0  fb8d					      NEXT_X
      1  fb8d				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fb8d				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fb8d				  -	      DEX
      4  fb8d				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fb8d				  -	      BNE	.loop
      6  fb8d				  -	      ELSE
      7  fb8d				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fb8d				  -	      BPL	.loop
      9  fb8d				  -	      ELSE
     10  fb8d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb8d				  -	      BMI	.loop
     12  fb8d				  -	      ELSE
     13  fb8d				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb8d				  -	      CPX	_STK_LVL_3
     15  fb8d				  -	      ELSE
     16  fb8d				  -	      CPX	#_STK_LVL_3
     17  fb8d				  -	      ENDIF
     18  fb8d				  -	      BNE	.loop
     19  fb8d				  -	      ENDIF
     20  fb8d				  -	      ENDIF
     21  fb8d				  -	      ENDIF
     22  fb8d					      ELSE
     23  fb8d		       e8		      INX
     24  fb8e				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb8e				  -	      BNE	.loop
     26  fb8e					      ELSE
     27  fb8e				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb8e				  -	      BMI	.loop
     29  fb8e					      ELSE
     30  fb8e				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb8e				  -	      BPL	.loop
     32  fb8e					      ELSE
     33  fb8e				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb8e				  -	      CPX	_STK_LVL_3
     35  fb8e					      ELSE
     36  fb8e		       e0 04		      CPX	#_STK_LVL_3
     37  fb90					      ENDIF
     38  fb90		       d0 f4		      BNE	.loop
     39  fb92					      ENDIF
     40  fb92					      ENDIF
     41  fb92					      ENDIF
     42  fb92					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fb92					      INCLUDE	"STACKPOP3.ASM"
     19  fb92					      LIST	ON
------- FILE next_x
     67  fb92		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fb95					      RTS_IF_NE
      1  fb95		       f0 01		      BEQ	.tmp
      2  fb97		       60		      RTS
      3  fb98				   .tmp
     69  fb98
     70  fb98							; Read FAT first sector
     71  fb98							; Read bytes per logical sector
     72  fb98		       ad 0b 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST
     73  fb9b		       d0 07		      BNE	.wrongBytesPerLogicalSector
     74  fb9d		       ad 0c 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST + 1
     75  fba0		       c9 02		      CMP	#2
     76  fba2		       f0 03		      BEQ	.proceed
     77  fba4				   .wrongBytesPerLogicalSector
     78  fba4		       a9 15		      LDA	#IO_WRONG_BYTES_PER_LOGICAL_SECTOR
     79  fba6		       60		      RTS
     80  fba7				   .proceed
     81  fba7
     82  fba7							; Check number of FATs
     83  fba7		       ad 10 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_NUBMER_OF_FATs_OFFSET
     84  fbaa		       c9 02		      CMP	#2
      0  fbac					      IF_NEQ
      1  fbac				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbac		       f0 03		      BEQ	.tmp
      3  fbac				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbac				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbae					      INCLUDE	"STACKPUSH.ASM"
     22  fbae					      LIST	ON
------- FILE if_neq
     86  fbae		       a9 16		      LDA	#IO_WRONG_FATS_NUMBER
     87  fbb0		       60		      RTS
      0  fbb1					      END_IF
      1  fbb1				   _STRUCT_MAC_LABEL_40
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbb1					      INCLUDE	"STACKPOP.ASM"
     21  fbb1					      LIST	ON
------- FILE end_if
     89  fbb1
     90  fbb1							; Check media descriptor
     91  fbb1		       ad 15 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_MEDIA_DESCRIPTOR_OFFSET
     92  fbb4		       c9 f8		      CMP	#$F8
      0  fbb6					      IF_NEQ
      1  fbb6				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbb6		       f0 03		      BEQ	.tmp
      3  fbb6				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbb6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbb8					      INCLUDE	"STACKPUSH.ASM"
     22  fbb8					      LIST	ON
------- FILE if_neq
     94  fbb8		       a9 17		      LDA	#IO_WRONG_FAT_MEDIA_DESCRIPTOR
     95  fbba		       60		      RTS
      0  fbbb					      END_IF
      1  fbbb				   _STRUCT_MAC_LABEL_41
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbbb					      INCLUDE	"STACKPOP.ASM"
     21  fbbb					      LIST	ON
------- FILE end_if
     97  fbbb
     98  fbbb							; Read sectors per cluster
     99  fbbb		       ad 0d 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_SECTORS_PER_CLUSTER_OFFEST
      0  fbbe					      IF_ZERO
      0  fbbe					      IF_EQ
      1  fbbe				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbbe		       d0 03		      BNE	.tmp
      3  fbbe				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbbe				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbc0					      INCLUDE	"STACKPUSH.ASM"
     22  fbc0					      LIST	ON
------- FILE if_eq
    101  fbc0		       a9 18		      LDA	#IO_ZERO_SECTORS_PER_CLUSTER
    102  fbc2		       60		      RTS
      0  fbc3					      END_IF
      1  fbc3				   _STRUCT_MAC_LABEL_42
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbc3					      INCLUDE	"STACKPOP.ASM"
     21  fbc3					      LIST	ON
------- FILE end_if
    104  fbc3		       85 13		      STA	_sectorsPerCluster
    105  fbc5
    106  fbc5							; Read root dir cluster
      0  fbc5					      FOR_X	0, UP_TO, 4
      1  fbc5				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fbc5				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fbc5				  -	      ERR
      4  fbc5					      ENDIF
      5  fbc5				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fbc5				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fbc5				  -	      ERR
      8  fbc5					      ENDIF
      9  fbc5				  -	      IF	[ 0 == ACCUM ]
     10  fbc5				  -	      TAX
     11  fbc5					      ELSE
     12  fbc5				  -	      IF	[ 0 == Y_REG ]
     13  fbc5				  -	      PHA
     14  fbc5				  -	      TYA
     15  fbc5				  -	      TAX
     16  fbc5				  -	      PLA
     17  fbc5					      ELSE
     18  fbc5					      IF	[ 0 != X_REG ]
     19  fbc5		       a2 00		      LDX	#0
     20  fbc7					      ENDIF
     21  fbc7					      ENDIF
     22  fbc7					      ENDIF
     23  fbc7				   _TO_PUSH_3 SET	4
     24  fbc7				   _TO_PUSH_2 SET	UP_TO
     25  fbc7				   _STRUCT_MAC_LABEL_43
     26  fbc7				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fbc7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fbc7					      INCLUDE	"STKPUSH3.ASM"
     22  fbc7					      LIST	ON
------- FILE for_x
    108  fbc7		       bd 2c 7e 	      LDA	[sdPageStart + _FAT_FIRST_SECTOR_ROOT_DIRECTORY_CLUSTER_NUMBER_OFFSET],X
    109  fbca		       95 14		      STA	_rootDirectoryClusterNumber,X
      0  fbcc					      NEXT_X
      1  fbcc				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fbcc				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fbcc				  -	      DEX
      4  fbcc				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fbcc				  -	      BNE	.loop
      6  fbcc				  -	      ELSE
      7  fbcc				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fbcc				  -	      BPL	.loop
      9  fbcc				  -	      ELSE
     10  fbcc				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fbcc				  -	      BMI	.loop
     12  fbcc				  -	      ELSE
     13  fbcc				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fbcc				  -	      CPX	_STK_LVL_3
     15  fbcc				  -	      ELSE
     16  fbcc				  -	      CPX	#_STK_LVL_3
     17  fbcc				  -	      ENDIF
     18  fbcc				  -	      BNE	.loop
     19  fbcc				  -	      ENDIF
     20  fbcc				  -	      ENDIF
     21  fbcc				  -	      ENDIF
     22  fbcc					      ELSE
     23  fbcc		       e8		      INX
     24  fbcd				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fbcd				  -	      BNE	.loop
     26  fbcd					      ELSE
     27  fbcd				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fbcd				  -	      BMI	.loop
     29  fbcd					      ELSE
     30  fbcd				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fbcd				  -	      BPL	.loop
     32  fbcd					      ELSE
     33  fbcd				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fbcd				  -	      CPX	_STK_LVL_3
     35  fbcd					      ELSE
     36  fbcd		       e0 04		      CPX	#_STK_LVL_3
     37  fbcf					      ENDIF
     38  fbcf		       d0 f6		      BNE	.loop
     39  fbd1					      ENDIF
     40  fbd1					      ENDIF
     41  fbd1					      ENDIF
     42  fbd1					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fbd1					      INCLUDE	"STACKPOP3.ASM"
     19  fbd1					      LIST	ON
------- FILE next_x
    111  fbd1
    112  fbd1							; Calc FAT #1 region sector
    113  fbd1							; It is partition start sector (already in FAT_SECTOR_#) + fat reserved logical sectors
    114  fbd1		       18		      CLC
    115  fbd2		       ad 0e 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET
    116  fbd5		       65 0b		      ADC	_fatSector
    117  fbd7		       85 0b		      STA	_fatSector
    118  fbd9		       ad 0f 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET + 1
    119  fbdc		       65 0c		      ADC	_fatSector + 1
    120  fbde		       85 0c		      STA	_fatSector + 1
      0  fbe0					      IF_C_SET
      1  fbe0				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbe0		       90 06		      BCC	.tmp
      3  fbe0				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbe0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbe2					      INCLUDE	"STACKPUSH.ASM"
     22  fbe2					      LIST	ON
------- FILE if_c_set
    122  fbe2		       e6 0d		      INC	_fatSector + 2
      0  fbe4					      IF_ZERO
      0  fbe4					      IF_EQ
      1  fbe4				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbe4		       d0 02		      BNE	.tmp
      3  fbe4				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbe4				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbe6					      INCLUDE	"STACKPUSH.ASM"
     22  fbe6					      LIST	ON
------- FILE if_eq
    124  fbe6		       e6 0e		      INC	_fatSector + 3
      0  fbe8					      END_IF
      1  fbe8				   _STRUCT_MAC_LABEL_45
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbe8					      INCLUDE	"STACKPOP.ASM"
     21  fbe8					      LIST	ON
------- FILE end_if
      0  fbe8					      END_IF
      1  fbe8				   _STRUCT_MAC_LABEL_44
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbe8					      INCLUDE	"STACKPOP.ASM"
     21  fbe8					      LIST	ON
------- FILE end_if
    127  fbe8
    128  fbe8							; Calc DATA region sector
    129  fbe8							; It is FAT_SECTOR + SECTORS_PER_FAT * NUMBER_OF_FATs (expected as 2)
      0  fbe8					      FOR_X	0, UP_TO, 4
      1  fbe8				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fbe8				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fbe8				  -	      ERR
      4  fbe8					      ENDIF
      5  fbe8				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fbe8				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fbe8				  -	      ERR
      8  fbe8					      ENDIF
      9  fbe8				  -	      IF	[ 0 == ACCUM ]
     10  fbe8				  -	      TAX
     11  fbe8					      ELSE
     12  fbe8				  -	      IF	[ 0 == Y_REG ]
     13  fbe8				  -	      PHA
     14  fbe8				  -	      TYA
     15  fbe8				  -	      TAX
     16  fbe8				  -	      PLA
     17  fbe8					      ELSE
     18  fbe8					      IF	[ 0 != X_REG ]
     19  fbe8		       a2 00		      LDX	#0
     20  fbea					      ENDIF
     21  fbea					      ENDIF
     22  fbea					      ENDIF
     23  fbea				   _TO_PUSH_3 SET	4
     24  fbea				   _TO_PUSH_2 SET	UP_TO
     25  fbea				   _STRUCT_MAC_LABEL_46
     26  fbea				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fbea				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fbea					      INCLUDE	"STKPUSH3.ASM"
     22  fbea					      LIST	ON
------- FILE for_x
    131  fbea		       bd 24 7e 	      LDA	[sdPageStart + _FAT_FIRST_SECTOR_LOGICAL_SECTORS_PER_FAT_OFFSET],X
    132  fbed		       95 0f		      STA	_dataSector,X
      0  fbef					      NEXT_X
      1  fbef				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fbef				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fbef				  -	      DEX
      4  fbef				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fbef				  -	      BNE	.loop
      6  fbef				  -	      ELSE
      7  fbef				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fbef				  -	      BPL	.loop
      9  fbef				  -	      ELSE
     10  fbef				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fbef				  -	      BMI	.loop
     12  fbef				  -	      ELSE
     13  fbef				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fbef				  -	      CPX	_STK_LVL_3
     15  fbef				  -	      ELSE
     16  fbef				  -	      CPX	#_STK_LVL_3
     17  fbef				  -	      ENDIF
     18  fbef				  -	      BNE	.loop
     19  fbef				  -	      ENDIF
     20  fbef				  -	      ENDIF
     21  fbef				  -	      ENDIF
     22  fbef					      ELSE
     23  fbef		       e8		      INX
     24  fbf0				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fbf0				  -	      BNE	.loop
     26  fbf0					      ELSE
     27  fbf0				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fbf0				  -	      BMI	.loop
     29  fbf0					      ELSE
     30  fbf0				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fbf0				  -	      BPL	.loop
     32  fbf0					      ELSE
     33  fbf0				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fbf0				  -	      CPX	_STK_LVL_3
     35  fbf0					      ELSE
     36  fbf0		       e0 04		      CPX	#_STK_LVL_3
     37  fbf2					      ENDIF
     38  fbf2		       d0 f6		      BNE	.loop
     39  fbf4					      ENDIF
     40  fbf4					      ENDIF
     41  fbf4					      ENDIF
     42  fbf4					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fbf4					      INCLUDE	"STACKPOP3.ASM"
     19  fbf4					      LIST	ON
------- FILE next_x
    134  fbf4							; multiply it by 2
    135  fbf4		       06 0f		      ASL	_dataSector
    136  fbf6		       26 10		      ROL	_dataSector + 1
    137  fbf8		       26 11		      ROL	_dataSector + 2
    138  fbfa		       26 12		      ROL	_dataSector + 3
    139  fbfc							; Add FAT_SECTOR
    140  fbfc		       18		      CLC
    141  fbfd		       a5 0f		      LDA	_dataSector
    142  fbff		       65 0b		      ADC	_fatSector
    143  fc01		       85 0f		      STA	_dataSector
    144  fc03		       a5 10		      LDA	_dataSector + 1
    145  fc05		       65 0c		      ADC	_fatSector + 1
    146  fc07		       85 10		      STA	_dataSector + 1
    147  fc09		       a5 11		      LDA	_dataSector + 2
    148  fc0b		       65 0d		      ADC	_fatSector + 2
    149  fc0d		       85 11		      STA	_dataSector + 2
    150  fc0f		       a5 12		      LDA	_dataSector + 3
    151  fc11		       65 0e		      ADC	_fatSector + 3
    152  fc13		       85 12		      STA	_dataSector + 3
    153  fc15							; subtract two clusters for simplification
    154  fc15		       a5 13		      LDA	_sectorsPerCluster
    155  fc17		       0a		      ASL
    156  fc18		       85 1c		      STA	_tmpDoubleClusters
    157  fc1a		       38		      SEC
    158  fc1b		       a5 0f		      LDA	_dataSector
    159  fc1d		       e5 1c		      SBC	_tmpDoubleClusters
    160  fc1f		       85 0f		      STA	_dataSector
      0  fc21					      IF_C_CLR
      1  fc21				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc21		       b0 0a		      BCS	.tmp
      3  fc21				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc21				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc23					      INCLUDE	"STACKPUSH.ASM"
     22  fc23					      LIST	ON
------- FILE if_c_clr
    162  fc23		       c6 10		      DEC	_dataSector + 1
      0  fc25					      IF_ZERO
      0  fc25					      IF_EQ
      1  fc25				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc25		       d0 06		      BNE	.tmp
      3  fc25				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc25				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc27					      INCLUDE	"STACKPUSH.ASM"
     22  fc27					      LIST	ON
------- FILE if_eq
    164  fc27		       c6 11		      DEC	_dataSector + 2
      0  fc29					      IF_ZERO
      0  fc29					      IF_EQ
      1  fc29				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc29		       d0 02		      BNE	.tmp
      3  fc29				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc29				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc2b					      INCLUDE	"STACKPUSH.ASM"
     22  fc2b					      LIST	ON
------- FILE if_eq
    166  fc2b		       c6 12		      DEC	_dataSector + 3
      0  fc2d					      END_IF
      1  fc2d				   _STRUCT_MAC_LABEL_49
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc2d					      INCLUDE	"STACKPOP.ASM"
     21  fc2d					      LIST	ON
------- FILE end_if
      0  fc2d					      END_IF
      1  fc2d				   _STRUCT_MAC_LABEL_48
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc2d					      INCLUDE	"STACKPOP.ASM"
     21  fc2d					      LIST	ON
------- FILE end_if
      0  fc2d					      END_IF
      1  fc2d				   _STRUCT_MAC_LABEL_47
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc2d					      INCLUDE	"STACKPOP.ASM"
     21  fc2d					      LIST	ON
------- FILE end_if
    170  fc2d		       a9 00		      LDA	#0
    171  fc2f		       60		      RTS
    172  fc30
    173 U0009					      SEG.U	zpVars
    174 U0009		       00 00	   filenamePointer ds	2
    175 U000b		       00 00 00 00 _fatSector ds	4
    176 U000f							; it will be pseudo data sector !!!
    177 U000f							; = real data region - 2 * sectors per cluster
    178 U000f							; for easy cluster address calculation
    179 U000f		       00 00 00 00 _dataSector ds	4
    180 U0013		       00	   _sectorsPerCluster ds	1
    181 U0014		       00 00 00 00 _rootDirectoryClusterNumber ds	4
    182 U0018		       00 00 00 00 _openedCluster ds	4
    183 U001c		       00	   _openedSectorInCluster ds	1
    184 U001c		       00 1c	   _tmpDoubleClusters =	_openedSectorInCluster
    185 U001d		       00 00 00 00 _openedSector ds	4
    186 U0021		       00 00 00 00 _openedFileSize ds	4
    187 U0025
    188  fc30					      SEG	code
    189  fc30				   OPEN_FILE_BY_NAME
    190  fc30		       8a		      TXA
    191  fc31		       48		      PHA
    192  fc32		       98		      TYA
    193  fc33		       48		      PHA
    194  fc34		       20 40 fc 	      JSR	_INNER_OPEN_FILE_BY_NAME
    195  fc37		       85 02		      STA	_crc	; I hope it will be OK
    196  fc39		       68		      PLA
    197  fc3a		       a8		      TAY
    198  fc3b		       68		      PLA
    199  fc3c		       aa		      TAX
    200  fc3d		       a5 02		      LDA	_crc
    201  fc3f		       60		      RTS
    202  fc40
    203  fc40				   _INNER_OPEN_FILE_BY_NAME
    204  fc40					      SUBROUTINE
    205  fc40		       20 5d fc 	      JSR	_OPEN_ROOT
      0  fc43					      RTS_IF_NE
      1  fc43		       f0 01		      BEQ	.tmp
      2  fc45		       60		      RTS
      3  fc46				   .tmp
    207  fc46				   .loop
    208  fc46		       20 25 fd 	      JSR	_EXTRACT_NEXT_NAME
    209  fc49		       f0 0c		      BEQ	.openIt
    210  fc4b		       30 03		      BMI	.opened
    211  fc4d		       a9 03		      LDA	#IO_INVALID_FILENAME_FORMAT
    212  fc4f		       60		      RTS
    213  fc50				   .opened
    214  fc50		       a9 ff		      LDA	#$FF
    215  fc52		       85 26		      STA	half_sector_pointer + 1
    216  fc54		       a9 00		      LDA	#IO_OK
    217  fc56		       60		      RTS
    218  fc57				   .openIt
    219  fc57		       20 b7 fd 	      JSR	_OPEN_FILE_IN_FOLDER
    220  fc5a		       f0 ea		      BEQ	.loop
    221  fc5c		       60		      RTS
    222  fc5d
    223  fc5d							; Changes X & Y
    224  fc5d				   _OPEN_ROOT
      0  fc5d					      FOR_X	0, UP_TO, 4
      1  fc5d				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fc5d				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fc5d				  -	      ERR
      4  fc5d					      ENDIF
      5  fc5d				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fc5d				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fc5d				  -	      ERR
      8  fc5d					      ENDIF
      9  fc5d				  -	      IF	[ 0 == ACCUM ]
     10  fc5d				  -	      TAX
     11  fc5d					      ELSE
     12  fc5d				  -	      IF	[ 0 == Y_REG ]
     13  fc5d				  -	      PHA
     14  fc5d				  -	      TYA
     15  fc5d				  -	      TAX
     16  fc5d				  -	      PLA
     17  fc5d					      ELSE
     18  fc5d					      IF	[ 0 != X_REG ]
     19  fc5d		       a2 00		      LDX	#0
     20  fc5f					      ENDIF
     21  fc5f					      ENDIF
     22  fc5f					      ENDIF
     23  fc5f				   _TO_PUSH_3 SET	4
     24  fc5f				   _TO_PUSH_2 SET	UP_TO
     25  fc5f				   _STRUCT_MAC_LABEL_50
     26  fc5f				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fc5f				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fc5f					      INCLUDE	"STKPUSH3.ASM"
     22  fc5f					      LIST	ON
------- FILE for_x
    226  fc5f		       b5 14		      LDA	_rootDirectoryClusterNumber,X
    227  fc61		       95 18		      STA	_openedCluster,X
      0  fc63					      NEXT_X
      1  fc63				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fc63				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fc63				  -	      DEX
      4  fc63				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fc63				  -	      BNE	.loop
      6  fc63				  -	      ELSE
      7  fc63				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fc63				  -	      BPL	.loop
      9  fc63				  -	      ELSE
     10  fc63				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fc63				  -	      BMI	.loop
     12  fc63				  -	      ELSE
     13  fc63				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fc63				  -	      CPX	_STK_LVL_3
     15  fc63				  -	      ELSE
     16  fc63				  -	      CPX	#_STK_LVL_3
     17  fc63				  -	      ENDIF
     18  fc63				  -	      BNE	.loop
     19  fc63				  -	      ENDIF
     20  fc63				  -	      ENDIF
     21  fc63				  -	      ENDIF
     22  fc63					      ELSE
     23  fc63		       e8		      INX
     24  fc64				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fc64				  -	      BNE	.loop
     26  fc64					      ELSE
     27  fc64				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fc64				  -	      BMI	.loop
     29  fc64					      ELSE
     30  fc64				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fc64				  -	      BPL	.loop
     32  fc64					      ELSE
     33  fc64				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fc64				  -	      CPX	_STK_LVL_3
     35  fc64					      ELSE
     36  fc64		       e0 04		      CPX	#_STK_LVL_3
     37  fc66					      ENDIF
     38  fc66		       d0 f7		      BNE	.loop
     39  fc68					      ENDIF
     40  fc68					      ENDIF
     41  fc68					      ENDIF
     42  fc68					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fc68					      INCLUDE	"STACKPOP3.ASM"
     19  fc68					      LIST	ON
------- FILE next_x
    229  fc68							; JMP _OPEN_CLUSTER ; not needed, the _OPEN_CLUSTER goes next
    230  fc68							; end is here
    231  fc68
    232  fc68							; expects _openedCluster
    233  fc68							; sets opened sector and reads it
    234  fc68							; sets sector in cluster to 0
    235  fc68							; Changes X & Y
    236  fc68				   _OPEN_CLUSTER
    237  fc68		       a9 00		      LDA	#0
    238  fc6a		       85 1c		      STA	_openedSectorInCluster
    239  fc6c							; openedSector = openedCluster*sectorsPerCluster + pseudoDataRegion
    240  fc6c							;   copy
      0  fc6c					      FOR_X	0, UP_TO, 4
      1  fc6c				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fc6c				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fc6c				  -	      ERR
      4  fc6c					      ENDIF
      5  fc6c				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fc6c				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fc6c				  -	      ERR
      8  fc6c					      ENDIF
      9  fc6c				  -	      IF	[ 0 == ACCUM ]
     10  fc6c				  -	      TAX
     11  fc6c					      ELSE
     12  fc6c				  -	      IF	[ 0 == Y_REG ]
     13  fc6c				  -	      PHA
     14  fc6c				  -	      TYA
     15  fc6c				  -	      TAX
     16  fc6c				  -	      PLA
     17  fc6c					      ELSE
     18  fc6c					      IF	[ 0 != X_REG ]
     19  fc6c		       a2 00		      LDX	#0
     20  fc6e					      ENDIF
     21  fc6e					      ENDIF
     22  fc6e					      ENDIF
     23  fc6e				   _TO_PUSH_3 SET	4
     24  fc6e				   _TO_PUSH_2 SET	UP_TO
     25  fc6e				   _STRUCT_MAC_LABEL_51
     26  fc6e				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fc6e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fc6e					      INCLUDE	"STKPUSH3.ASM"
     22  fc6e					      LIST	ON
------- FILE for_x
    242  fc6e		       b5 18		      LDA	_openedCluster,X
    243  fc70		       95 1d		      STA	_openedSector,X
      0  fc72					      NEXT_X
      1  fc72				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fc72				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fc72				  -	      DEX
      4  fc72				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fc72				  -	      BNE	.loop
      6  fc72				  -	      ELSE
      7  fc72				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fc72				  -	      BPL	.loop
      9  fc72				  -	      ELSE
     10  fc72				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fc72				  -	      BMI	.loop
     12  fc72				  -	      ELSE
     13  fc72				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fc72				  -	      CPX	_STK_LVL_3
     15  fc72				  -	      ELSE
     16  fc72				  -	      CPX	#_STK_LVL_3
     17  fc72				  -	      ENDIF
     18  fc72				  -	      BNE	.loop
     19  fc72				  -	      ENDIF
     20  fc72				  -	      ENDIF
     21  fc72				  -	      ENDIF
     22  fc72					      ELSE
     23  fc72		       e8		      INX
     24  fc73				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fc73				  -	      BNE	.loop
     26  fc73					      ELSE
     27  fc73				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fc73				  -	      BMI	.loop
     29  fc73					      ELSE
     30  fc73				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fc73				  -	      BPL	.loop
     32  fc73					      ELSE
     33  fc73				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fc73				  -	      CPX	_STK_LVL_3
     35  fc73					      ELSE
     36  fc73		       e0 04		      CPX	#_STK_LVL_3
     37  fc75					      ENDIF
     38  fc75		       d0 f7		      BNE	.loop
     39  fc77					      ENDIF
     40  fc77					      ENDIF
     41  fc77					      ENDIF
     42  fc77					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fc77					      INCLUDE	"STACKPOP3.ASM"
     19  fc77					      LIST	ON
------- FILE next_x
    245  fc77							;   multiply
    246  fc77		       a5 13		      LDA	_sectorsPerCluster
      0  fc79					      BEGIN
      1  fc79				   _STRUCT_MAC_LABEL_52
      2  fc79				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  fc79				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc79					      INCLUDE	"STACKPUSH.ASM"
     22  fc79					      LIST	ON
------- FILE begin
    248  fc79		       4a		      LSR
      0  fc7a					      WHILE_C_CLR
      0  fc7a					      IF_C_CLR
      1  fc7a				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc7a		       b0 0b		      BCS	.tmp
      3  fc7a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc7a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc7c					      INCLUDE	"STACKPUSH.ASM"
     22  fc7c					      LIST	ON
------- FILE if_c_clr
    250  fc7c		       06 1d		      ASL	_openedSector
    251  fc7e		       26 1e		      ROL	_openedSector + 1
    252  fc80		       26 1f		      ROL	_openedSector + 2
    253  fc82		       26 20		      ROL	_openedSector + 3
      0  fc84					      REPEAT_
      1  fc84				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
      2  fc84		       4c 79 fc 	      JMP	.tmp
      3  fc87				   _STRUCT_MAC_LABEL_53
------- FILE STACKPOP2.ASM LEVEL 3 PASS 3
      0  fc87					      INCLUDE	"STACKPOP2.ASM"
     20  fc87					      LIST	ON
------- FILE repeat_
    255  fc87							;   add pseudo data region
    256  fc87		       18		      CLC
    257  fc88		       a5 1d		      LDA	_openedSector
    258  fc8a		       65 0f		      ADC	_dataSector
    259  fc8c		       85 1d		      STA	_openedSector
    260  fc8e		       85 03		      STA	sdSector
    261  fc90		       a5 1e		      LDA	_openedSector + 1
    262  fc92		       65 10		      ADC	_dataSector + 1
    263  fc94		       85 1e		      STA	_openedSector + 1
    264  fc96		       85 04		      STA	sdSector + 1
    265  fc98		       a5 1f		      LDA	_openedSector + 2
    266  fc9a		       65 11		      ADC	_dataSector + 2
    267  fc9c		       85 1f		      STA	_openedSector + 2
    268  fc9e		       85 05		      STA	sdSector + 2
    269  fca0		       a5 20		      LDA	_openedSector + 3
    270  fca2		       65 12		      ADC	_dataSector + 3
    271  fca4		       85 20		      STA	_openedSector + 3
    272  fca6		       85 06		      STA	sdSector + 3
    273  fca8		       4c 67 f9 	      JMP	READ_SD_SECTOR
    274  fcab							; end is here
    275  fcab
    276 U0025					      SEG.U	zpVars
    277 U0025		       00 00	   half_sector_pointer ds	2
    278 U0027		       00	   half_sector_size ds	1
    279 U0028
    280  fcab					      SEG	code
    281  fcab							; The method called from the beggining of reading the file and for each next sub-sector
    282  fcab				   READ_NEXT_HALF_SECTOR
    283  fcab		       20 fa fc 	      JSR	_CHECK_ZERO_SIZE
      0  fcae					      RTS_IF_NE
      1  fcae		       f0 01		      BEQ	.tmp
      2  fcb0		       60		      RTS
      3  fcb1				   .tmp
    285  fcb1
    286  fcb1							; first run:
    287  fcb1							;   if file_size > FF
    288  fcb1							;	 half_sector_size = FF
    289  fcb1							;   else
    290  fcb1							;	 half_sector_size = file_size
    291  fcb1							; not first run:
    292  fcb1							;   file_size -= 100 && check borrow bit to return END of file
    293  fcb1							;   update_half_sector_size
    294  fcb1							;   update pointer to next half of sector in memory
    295  fcb1							;   or read next sector
    296  fcb1
    297  fcb1		       a5 26		      LDA	half_sector_pointer + 1
    298  fcb3							; if can't be on upper memory, so it's first run
    299  fcb3		       10 0e		      BPL	.secondRun
      0  fcb5					      WRITE_WORD	sdPageStart, half_sector_pointer
      1  fcb5		       a9 00		      LDA	#<sdPageStart
      2  fcb7		       85 25		      STA	half_sector_pointer
      3  fcb9		       a9 7e		      LDA	#>sdPageStart
      4  fcbb		       85 26		      STA	half_sector_pointer+1
    301  fcbd		       20 10 fd 	      JSR	_UPDATE_HALF_SECTOR_SIZE
    302  fcc0		       a9 00		      LDA	#IO_OK
    303  fcc2		       60		      RTS
    304  fcc3				   .secondRun
    305  fcc3							;   file_size -= 100 && check borrow bit to return END of file
    306  fcc3		       a5 22		      LDA	_openedFileSize+1
    307  fcc5		       38		      SEC
    308  fcc6		       e9 01		      SBC	#1
    309  fcc8		       85 22		      STA	_openedFileSize+1
      0  fcca					      IF_C_CLR
      1  fcca				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fcca		       b0 15		      BCS	.tmp
      3  fcca				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fcca				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fccc					      INCLUDE	"STACKPUSH.ASM"
     22  fccc					      LIST	ON
------- FILE if_c_clr
    311  fccc		       a5 23		      LDA	_openedFileSize+2
    312  fcce		       38		      SEC
    313  fccf		       e9 01		      SBC	#1
    314  fcd1		       85 23		      STA	_openedFileSize+2
      0  fcd3					      IF_C_CLR
      1  fcd3				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fcd3		       b0 0c		      BCS	.tmp
      3  fcd3				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fcd3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fcd5					      INCLUDE	"STACKPUSH.ASM"
     22  fcd5					      LIST	ON
------- FILE if_c_clr
    316  fcd5		       a5 24		      LDA	_openedFileSize+3
    317  fcd7		       38		      SEC
    318  fcd8		       e9 01		      SBC	#1
    319  fcda		       85 24		      STA	_openedFileSize+3
      0  fcdc					      IF_C_CLR
      1  fcdc				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fcdc		       b0 03		      BCS	.tmp
      3  fcdc				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fcdc				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fcde					      INCLUDE	"STACKPUSH.ASM"
     22  fcde					      LIST	ON
------- FILE if_c_clr
    321  fcde		       a9 01		      LDA	#IO_END_OF_FILE
    322  fce0		       60		      RTS
      0  fce1					      END_IF
      1  fce1				   _STRUCT_MAC_LABEL_56
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fce1					      INCLUDE	"STACKPOP.ASM"
     21  fce1					      LIST	ON
------- FILE end_if
      0  fce1					      END_IF
      1  fce1				   _STRUCT_MAC_LABEL_55
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fce1					      INCLUDE	"STACKPOP.ASM"
     21  fce1					      LIST	ON
------- FILE end_if
      0  fce1					      END_IF
      1  fce1				   _STRUCT_MAC_LABEL_54
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fce1					      INCLUDE	"STACKPOP.ASM"
     21  fce1					      LIST	ON
------- FILE end_if
    326  fce1		       20 fa fc 	      JSR	_CHECK_ZERO_SIZE
      0  fce4					      RTS_IF_NE
      1  fce4		       f0 01		      BEQ	.tmp
      2  fce6		       60		      RTS
      3  fce7				   .tmp
    328  fce7		       20 10 fd 	      JSR	_UPDATE_HALF_SECTOR_SIZE
    329  fcea		       a5 26		      LDA	half_sector_pointer + 1
    330  fcec		       c9 7e		      CMP	#>sdPageStart
    331  fcee		       d0 05		      BNE	.readNextSector
    332  fcf0		       e6 26		      INC	half_sector_pointer + 1
    333  fcf2		       a9 00		      LDA	#IO_OK
    334  fcf4		       60		      RTS
    335  fcf5				   .readNextSector
    336  fcf5		       c6 26		      DEC	half_sector_pointer + 1
    337  fcf7		       4c 2a fe 	      JMP	_READ_NEXT_SECTOR
    338  fcfa							; end of subroutine
    339  fcfa
    340  fcfa				   _CHECK_ZERO_SIZE
    341  fcfa					      SUBROUTINE
    342  fcfa		       a5 21		      LDA	_openedFileSize
    343  fcfc		       d0 0f		      BNE	.proceed
    344  fcfe		       a5 22		      LDA	_openedFileSize+1
    345  fd00		       d0 0b		      BNE	.proceed
    346  fd02		       a5 23		      LDA	_openedFileSize+2
    347  fd04		       d0 07		      BNE	.proceed
    348  fd06		       a5 24		      LDA	_openedFileSize+3
    349  fd08		       d0 03		      BNE	.proceed
    350  fd0a		       a9 01		      LDA	#IO_END_OF_FILE
    351  fd0c		       60		      RTS
    352  fd0d				   .proceed
    353  fd0d		       a9 00		      LDA	#0
    354  fd0f		       60		      RTS
    355  fd10
    356  fd10				   _UPDATE_HALF_SECTOR_SIZE
    357  fd10					      SUBROUTINE
    358  fd10		       a5 22		      LDA	_openedFileSize+1
    359  fd12		       d0 0c		      BNE	.fullPage
    360  fd14		       a5 23		      LDA	_openedFileSize+2
    361  fd16		       d0 08		      BNE	.fullPage
    362  fd18		       a5 24		      LDA	_openedFileSize+3
    363  fd1a		       d0 04		      BNE	.fullPage
    364  fd1c		       a5 21		      LDA	_openedFileSize	; must not be a 0
    365  fd1e		       d0 02		      BNE	.end	; instead of JMP
    366  fd20				   .fullPage
    367  fd20		       a9 00		      LDA	#0
    368  fd22				   .end
    369  fd22		       85 27		      STA	half_sector_size
    370  fd24		       60		      RTS
    371  fd25
    372 U0028					      SEG.U	zpVars
    373 U0028		       00 00 00 00*_fatFilename ds	11
    374 U0033
    375  fd25					      SEG	code
    376  fd25		       00 00	   _EXTRACT_NEXT_NAME_OK =	0
    377  fd25		       00 01	   _EXTRACT_NEXT_NAME_INVALID =	1
    378  fd25		       00 ff	   _EXTRACT_NEXT_NAME_END =	$FF
    379  fd25				   _EXTRACT_NEXT_NAME
    380  fd25					      SUBROUTINE
    381  fd25		       98		      TYA
    382  fd26		       48		      PHA
    383  fd27		       a0 00		      LDY	#0
    384  fd29		       b1 09		      LDA	(filenamePointer),Y
    385  fd2b							; check if it is the end of the name
      0  fd2b					      IF_ZERO
      0  fd2b					      IF_EQ
      1  fd2b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd2b		       d0 05		      BNE	.tmp
      3  fd2b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd2b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd2d					      INCLUDE	"STACKPUSH.ASM"
     22  fd2d					      LIST	ON
------- FILE if_eq
    387  fd2d		       68		      PLA
    388  fd2e		       a8		      TAY
    389  fd2f		       a9 ff		      LDA	#_EXTRACT_NEXT_NAME_END
    390  fd31		       60		      RTS
      0  fd32					      END_IF
      1  fd32				   _STRUCT_MAC_LABEL_57
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd32					      INCLUDE	"STACKPOP.ASM"
     21  fd32					      LIST	ON
------- FILE end_if
    392  fd32							; Skip '/'
    393  fd32		       c9 2f		      CMP	#"/"
      0  fd34					      IF_NEQ
      1  fd34				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd34		       f0 03		      BEQ	.tmp
      3  fd34				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd34				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd36					      INCLUDE	"STACKPUSH.ASM"
     22  fd36					      LIST	ON
------- FILE if_neq
    395  fd36		       4c 9f fd 	      JMP	.extractNextNameInvalid
      0  fd39					      END_IF
      1  fd39				   _STRUCT_MAC_LABEL_58
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd39					      INCLUDE	"STACKPOP.ASM"
     21  fd39					      LIST	ON
------- FILE end_if
    397  fd39							; In order to skip it we need to increase the pointer
    398  fd39		       e6 09		      INC	filenamePointer
      0  fd3b					      IF_EQ		; if we have a zero after incrementing it overflows
      1  fd3b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd3b		       d0 02		      BNE	.tmp
      3  fd3b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd3b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd3d					      INCLUDE	"STACKPUSH.ASM"
     22  fd3d					      LIST	ON
------- FILE if_eq
    400  fd3d		       e6 0a		      INC	filenamePointer+1
      0  fd3f					      END_IF
      1  fd3f				   _STRUCT_MAC_LABEL_59
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd3f					      INCLUDE	"STACKPOP.ASM"
     21  fd3f					      LIST	ON
------- FILE end_if
    402  fd3f							; Fill internal name with spaces
    403  fd3f		       a9 20		      LDA	#" "
      0  fd41					      FOR_Y	0, UP_TO, 11
      1  fd41				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd41				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd41				  -	      ERR
      4  fd41					      ENDIF
      5  fd41				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd41				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd41				  -	      ERR
      8  fd41					      ENDIF
      9  fd41				  -	      IF	[ 0 == ACCUM ]
     10  fd41				  -	      TAY
     11  fd41					      ELSE
     12  fd41				  -	      IF	[ 0 == X_REG ]
     13  fd41				  -	      PHA
     14  fd41				  -	      TXA
     15  fd41				  -	      TAY
     16  fd41				  -	      PLA
     17  fd41					      ELSE
     18  fd41					      IF	[ 0 != Y_REG ]
     19  fd41		       a0 00		      LDY	#0
     20  fd43					      ENDIF
     21  fd43					      ENDIF
     22  fd43					      ENDIF
     23  fd43				   _TO_PUSH_3 SET	11
     24  fd43				   _TO_PUSH_2 SET	UP_TO
     25  fd43				   _STRUCT_MAC_LABEL_60
     26  fd43				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd43				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd43					      INCLUDE	"STKPUSH3.ASM"
     22  fd43					      LIST	ON
------- FILE for_y
    405  fd43		       99 28 00 	      STA	_fatFilename,Y
      0  fd46					      NEXT_Y
      1  fd46				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd46				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd46				  -	      DEY
      4  fd46				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd46				  -	      BNE	.loop
      6  fd46				  -	      ELSE
      7  fd46				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd46				  -	      BPL	.loop
      9  fd46				  -	      ELSE
     10  fd46				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd46				  -	      BMI	.loop
     12  fd46				  -	      ELSE
     13  fd46				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd46				  -	      CPY	_STK_LVL_3
     15  fd46				  -	      ELSE
     16  fd46				  -	      CPY	#_STK_LVL_3
     17  fd46				  -	      ENDIF
     18  fd46				  -	      BNE	.loop
     19  fd46				  -	      ENDIF
     20  fd46				  -	      ENDIF
     21  fd46				  -	      ENDIF
     22  fd46					      ELSE
     23  fd46		       c8		      INY
     24  fd47				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd47				  -	      BNE	.loop
     26  fd47					      ELSE
     27  fd47				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd47				  -	      BMI	.loop
     29  fd47					      ELSE
     30  fd47				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd47				  -	      BPL	.loop
     32  fd47					      ELSE
     33  fd47				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd47				  -	      CPY	_STK_LVL_3
     35  fd47					      ELSE
     36  fd47		       c0 0b		      CPY	#_STK_LVL_3
     37  fd49					      ENDIF
     38  fd49		       d0 f8		      BNE	.loop
     39  fd4b					      ENDIF
     40  fd4b					      ENDIF
     41  fd4b					      ENDIF
     42  fd4b					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd4b					      INCLUDE	"STACKPOP3.ASM"
     19  fd4b					      LIST	ON
------- FILE next_y
    407  fd4b							; Copy file name
      0  fd4b					      FOR_Y	0, UP_TO, 8
      1  fd4b				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd4b				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd4b				  -	      ERR
      4  fd4b					      ENDIF
      5  fd4b				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd4b				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd4b				  -	      ERR
      8  fd4b					      ENDIF
      9  fd4b				  -	      IF	[ 0 == ACCUM ]
     10  fd4b				  -	      TAY
     11  fd4b					      ELSE
     12  fd4b				  -	      IF	[ 0 == X_REG ]
     13  fd4b				  -	      PHA
     14  fd4b				  -	      TXA
     15  fd4b				  -	      TAY
     16  fd4b				  -	      PLA
     17  fd4b					      ELSE
     18  fd4b					      IF	[ 0 != Y_REG ]
     19  fd4b		       a0 00		      LDY	#0
     20  fd4d					      ENDIF
     21  fd4d					      ENDIF
     22  fd4d					      ENDIF
     23  fd4d				   _TO_PUSH_3 SET	8
     24  fd4d				   _TO_PUSH_2 SET	UP_TO
     25  fd4d				   _STRUCT_MAC_LABEL_61
     26  fd4d				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd4d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd4d					      INCLUDE	"STKPUSH3.ASM"
     22  fd4d					      LIST	ON
------- FILE for_y
    409  fd4d		       b1 09		      LDA	(filenamePointer),Y
    410  fd4f		       f0 46		      BEQ	.end
    411  fd51		       c9 2e		      CMP	#"."
    412  fd53		       f0 1e		      BEQ	.nameCopied
    413  fd55		       c9 2f		      CMP	#"/"
    414  fd57		       f0 3e		      BEQ	.end
    415  fd59		       20 a4 fd 	      JSR	_TO_UPPER_CASE
    416  fd5c		       99 28 00 	      STA	_fatFilename,Y
      0  fd5f					      NEXT_Y
      1  fd5f				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd5f				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd5f				  -	      DEY
      4  fd5f				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd5f				  -	      BNE	.loop
      6  fd5f				  -	      ELSE
      7  fd5f				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd5f				  -	      BPL	.loop
      9  fd5f				  -	      ELSE
     10  fd5f				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd5f				  -	      BMI	.loop
     12  fd5f				  -	      ELSE
     13  fd5f				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd5f				  -	      CPY	_STK_LVL_3
     15  fd5f				  -	      ELSE
     16  fd5f				  -	      CPY	#_STK_LVL_3
     17  fd5f				  -	      ENDIF
     18  fd5f				  -	      BNE	.loop
     19  fd5f				  -	      ENDIF
     20  fd5f				  -	      ENDIF
     21  fd5f				  -	      ENDIF
     22  fd5f					      ELSE
     23  fd5f		       c8		      INY
     24  fd60				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd60				  -	      BNE	.loop
     26  fd60					      ELSE
     27  fd60				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd60				  -	      BMI	.loop
     29  fd60					      ELSE
     30  fd60				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd60				  -	      BPL	.loop
     32  fd60					      ELSE
     33  fd60				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd60				  -	      CPY	_STK_LVL_3
     35  fd60					      ELSE
     36  fd60		       c0 08		      CPY	#_STK_LVL_3
     37  fd62					      ENDIF
     38  fd62		       d0 e9		      BNE	.loop
     39  fd64					      ENDIF
     40  fd64					      ENDIF
     41  fd64					      ENDIF
     42  fd64					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd64					      INCLUDE	"STACKPOP3.ASM"
     19  fd64					      LIST	ON
------- FILE next_y
    418  fd64							; After the name must be either '.' or the end
    419  fd64							; INY is not needed Y = 8 already at the end of the loop
    420  fd64		       b1 09		      LDA	(filenamePointer),Y
    421  fd66		       f0 2f		      BEQ	.end
    422  fd68		       c9 2f		      CMP	#"/"
    423  fd6a		       f0 2b		      BEQ	.end
    424  fd6c		       c9 2e		      CMP	#"."
    425  fd6e		       f0 03		      BEQ	.nameCopied
    426  fd70		       4c 9f fd 	      JMP	.extractNextNameInvalid
    427  fd73				   .nameCopied
    428  fd73		       c8		      INY		; in order to point on first extension character
    429  fd74		       20 ac fd 	      JSR	_SHIFT_FILENAME_POINTER_BY_Y
    430  fd77							; Copy extension
      0  fd77					      FOR_Y	0, UP_TO, 3
      1  fd77				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd77				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd77				  -	      ERR
      4  fd77					      ENDIF
      5  fd77				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd77				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd77				  -	      ERR
      8  fd77					      ENDIF
      9  fd77				  -	      IF	[ 0 == ACCUM ]
     10  fd77				  -	      TAY
     11  fd77					      ELSE
     12  fd77				  -	      IF	[ 0 == X_REG ]
     13  fd77				  -	      PHA
     14  fd77				  -	      TXA
     15  fd77				  -	      TAY
     16  fd77				  -	      PLA
     17  fd77					      ELSE
     18  fd77					      IF	[ 0 != Y_REG ]
     19  fd77		       a0 00		      LDY	#0
     20  fd79					      ENDIF
     21  fd79					      ENDIF
     22  fd79					      ENDIF
     23  fd79				   _TO_PUSH_3 SET	3
     24  fd79				   _TO_PUSH_2 SET	UP_TO
     25  fd79				   _STRUCT_MAC_LABEL_62
     26  fd79				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd79				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd79					      INCLUDE	"STKPUSH3.ASM"
     22  fd79					      LIST	ON
------- FILE for_y
    432  fd79		       b1 09		      LDA	(filenamePointer),Y
    433  fd7b		       f0 1a		      BEQ	.end
    434  fd7d		       c9 2f		      CMP	#"/"
    435  fd7f		       f0 16		      BEQ	.end
    436  fd81		       20 a4 fd 	      JSR	_TO_UPPER_CASE
    437  fd84		       99 30 00 	      STA	_fatFilename+8,Y
      0  fd87					      NEXT_Y
      1  fd87				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd87				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd87				  -	      DEY
      4  fd87				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd87				  -	      BNE	.loop
      6  fd87				  -	      ELSE
      7  fd87				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd87				  -	      BPL	.loop
      9  fd87				  -	      ELSE
     10  fd87				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd87				  -	      BMI	.loop
     12  fd87				  -	      ELSE
     13  fd87				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd87				  -	      CPY	_STK_LVL_3
     15  fd87				  -	      ELSE
     16  fd87				  -	      CPY	#_STK_LVL_3
     17  fd87				  -	      ENDIF
     18  fd87				  -	      BNE	.loop
     19  fd87				  -	      ENDIF
     20  fd87				  -	      ENDIF
     21  fd87				  -	      ENDIF
     22  fd87					      ELSE
     23  fd87		       c8		      INY
     24  fd88				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd88				  -	      BNE	.loop
     26  fd88					      ELSE
     27  fd88				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd88				  -	      BMI	.loop
     29  fd88					      ELSE
     30  fd88				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd88				  -	      BPL	.loop
     32  fd88					      ELSE
     33  fd88				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd88				  -	      CPY	_STK_LVL_3
     35  fd88					      ELSE
     36  fd88		       c0 03		      CPY	#_STK_LVL_3
     37  fd8a					      ENDIF
     38  fd8a		       d0 ed		      BNE	.loop
     39  fd8c					      ENDIF
     40  fd8c					      ENDIF
     41  fd8c					      ENDIF
     42  fd8c					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd8c					      INCLUDE	"STACKPOP3.ASM"
     19  fd8c					      LIST	ON
------- FILE next_y
    439  fd8c							; After extension it must be either '/' or end of line
    440  fd8c		       b1 09		      LDA	(filenamePointer),Y
    441  fd8e		       f0 07		      BEQ	.end
    442  fd90		       c9 2f		      CMP	#"/"
    443  fd92		       f0 03		      BEQ	.end
    444  fd94		       4c 9f fd 	      JMP	.extractNextNameInvalid
    445  fd97				   .end
    446  fd97		       20 ac fd 	      JSR	_SHIFT_FILENAME_POINTER_BY_Y
    447  fd9a		       68		      PLA
    448  fd9b		       a8		      TAY
    449  fd9c		       a9 00		      LDA	#_EXTRACT_NEXT_NAME_OK
    450  fd9e		       60		      RTS
    451  fd9f
    452  fd9f				   .extractNextNameInvalid
    453  fd9f		       68		      PLA
    454  fda0		       a8		      TAY
    455  fda1		       a9 01		      LDA	#_EXTRACT_NEXT_NAME_INVALID
    456  fda3		       60		      RTS
    457  fda4
    458  fda4				   _TO_UPPER_CASE
    459  fda4		       c9 60		      CMP	#$60
      0  fda6					      IF_GE
      0  fda6					      IF_C_SET
      1  fda6				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fda6		       90 03		      BCC	.tmp
      3  fda6				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fda6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fda8					      INCLUDE	"STACKPUSH.ASM"
     22  fda8					      LIST	ON
------- FILE if_c_set
    461  fda8		       38		      SEC
    462  fda9		       e9 20		      SBC	#$20
      0  fdab					      END_IF
      1  fdab				   _STRUCT_MAC_LABEL_63
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdab					      INCLUDE	"STACKPOP.ASM"
     21  fdab					      LIST	ON
------- FILE end_if
    464  fdab		       60		      RTS
    465  fdac
    466  fdac				   _SHIFT_FILENAME_POINTER_BY_Y
    467  fdac		       18		      CLC
    468  fdad		       98		      TYA
    469  fdae		       65 09		      ADC	filenamePointer
    470  fdb0		       85 09		      STA	filenamePointer
      0  fdb2					      IF_C_SET
      1  fdb2				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fdb2		       90 02		      BCC	.tmp
      3  fdb2				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fdb2				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdb4					      INCLUDE	"STACKPUSH.ASM"
     22  fdb4					      LIST	ON
------- FILE if_c_set
    472  fdb4		       e6 0a		      INC	filenamePointer+1
      0  fdb6					      END_IF
      1  fdb6				   _STRUCT_MAC_LABEL_64
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdb6					      INCLUDE	"STACKPOP.ASM"
     21  fdb6					      LIST	ON
------- FILE end_if
    474  fdb6		       60		      RTS
    475  fdb7
    476 U0033					      SEG.U	zpVars
    477 U0033		       00 00	   _dirReadPointer ds	2
    478 U0035
    479  fdb7					      SEG	code
    480  fdb7				   _OPEN_FILE_IN_FOLDER
      0  fdb7					      BEGIN
      1  fdb7				   _STRUCT_MAC_LABEL_65
      2  fdb7				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  fdb7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdb7					      INCLUDE	"STACKPUSH.ASM"
     22  fdb7					      LIST	ON
------- FILE begin
      0  fdb7					      WRITE_WORD	sdPageStart, _dirReadPointer
      1  fdb7		       a9 00		      LDA	#<sdPageStart
      2  fdb9		       85 33		      STA	_dirReadPointer
      3  fdbb		       a9 7e		      LDA	#>sdPageStart
      4  fdbd		       85 34		      STA	_dirReadPointer+1
    483  fdbf		       20 cd fd 	      JSR	_OPEN_FILE_IN_THE_PAGE
      0  fdc2					      RTS_IF_PLUS
      1  fdc2		       30 01		      BMI	.tmp
      2  fdc4		       60		      RTS
      3  fdc5				   .tmp
    485  fdc5		       20 2a fe 	      JSR	_READ_NEXT_SECTOR
      0  fdc8					      UNTIL_NOT_ZERO
      0  fdc8					      UNTIL_NEQ
      1  fdc8				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fdc8		       f0 ed		      BEQ	.tmp
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdca					      INCLUDE	"STACKPOP.ASM"
     21  fdca					      LIST	ON
------- FILE until_neq
    487  fdca		       a9 02		      LDA	#IO_FILE_NOT_FOUND
    488  fdcc		       60		      RTS
    489  fdcd
    490  fdcd							; uses X & Y
    491  fdcd				   _OPEN_FILE_IN_THE_PAGE
    492  fdcd					      SUBROUTINE
    493  fdcd							; it can be 16 dir records on the page
      0  fdcd					      FOR_X	0, UP_TO, 16
      1  fdcd				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fdcd				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fdcd				  -	      ERR
      4  fdcd					      ENDIF
      5  fdcd				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fdcd				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fdcd				  -	      ERR
      8  fdcd					      ENDIF
      9  fdcd				  -	      IF	[ 0 == ACCUM ]
     10  fdcd				  -	      TAX
     11  fdcd					      ELSE
     12  fdcd				  -	      IF	[ 0 == Y_REG ]
     13  fdcd				  -	      PHA
     14  fdcd				  -	      TYA
     15  fdcd				  -	      TAX
     16  fdcd				  -	      PLA
     17  fdcd					      ELSE
     18  fdcd					      IF	[ 0 != X_REG ]
     19  fdcd		       a2 00		      LDX	#0
     20  fdcf					      ENDIF
     21  fdcf					      ENDIF
     22  fdcf					      ENDIF
     23  fdcf				   _TO_PUSH_3 SET	16
     24  fdcf				   _TO_PUSH_2 SET	UP_TO
     25  fdcf				   _STRUCT_MAC_LABEL_66
     26  fdcf				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fdcf				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fdcf					      INCLUDE	"STKPUSH3.ASM"
     22  fdcf					      LIST	ON
------- FILE for_x
    495  fdcf		       a0 00		      LDY	#0
    496  fdd1		       b1 33		      LDA	(_dirReadPointer),Y
    497  fdd3							; check if it is the end of folder
    498  fdd3		       f0 2d		      BEQ	.notFound
    499  fdd5							; check if the file is removed
    500  fdd5		       c9 e5		      CMP	#_DIR_RECORD_REMOVED_FILE_NAME
    501  fdd7		       f0 19		      BEQ	.nextRecord
    502  fdd9							; check if the record is VFAT name
    503  fdd9		       a0 0b		      LDY	#_DIR_RECORD_FLAGS_OFFSET
    504  fddb		       b1 33		      LDA	(_dirReadPointer),Y
    505  fddd		       c9 0f		      CMP	#_DIR_RECORD_VFAT_FLAG
    506  fddf		       f0 11		      BEQ	.nextRecord
    507  fde1							; check the name
      0  fde1					      FOR_Y	0, UP_TO, 11
      1  fde1				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fde1				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fde1				  -	      ERR
      4  fde1					      ENDIF
      5  fde1				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fde1				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fde1				  -	      ERR
      8  fde1					      ENDIF
      9  fde1				  -	      IF	[ 0 == ACCUM ]
     10  fde1				  -	      TAY
     11  fde1					      ELSE
     12  fde1				  -	      IF	[ 0 == X_REG ]
     13  fde1				  -	      PHA
     14  fde1				  -	      TXA
     15  fde1				  -	      TAY
     16  fde1				  -	      PLA
     17  fde1					      ELSE
     18  fde1					      IF	[ 0 != Y_REG ]
     19  fde1		       a0 00		      LDY	#0
     20  fde3					      ENDIF
     21  fde3					      ENDIF
     22  fde3					      ENDIF
     23  fde3				   _TO_PUSH_3 SET	11
     24  fde3				   _TO_PUSH_2 SET	UP_TO
     25  fde3				   _STRUCT_MAC_LABEL_67
     26  fde3				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fde3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fde3					      INCLUDE	"STKPUSH3.ASM"
     22  fde3					      LIST	ON
------- FILE for_y
    509  fde3		       b1 33		      LDA	(_dirReadPointer),Y
    510  fde5		       d9 28 00 	      CMP	_fatFilename,Y
    511  fde8		       d0 08		      BNE	.nextRecord
      0  fdea					      NEXT_Y
      1  fdea				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fdea				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fdea				  -	      DEY
      4  fdea				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fdea				  -	      BNE	.loop
      6  fdea				  -	      ELSE
      7  fdea				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fdea				  -	      BPL	.loop
      9  fdea				  -	      ELSE
     10  fdea				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fdea				  -	      BMI	.loop
     12  fdea				  -	      ELSE
     13  fdea				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fdea				  -	      CPY	_STK_LVL_3
     15  fdea				  -	      ELSE
     16  fdea				  -	      CPY	#_STK_LVL_3
     17  fdea				  -	      ENDIF
     18  fdea				  -	      BNE	.loop
     19  fdea				  -	      ENDIF
     20  fdea				  -	      ENDIF
     21  fdea				  -	      ENDIF
     22  fdea					      ELSE
     23  fdea		       c8		      INY
     24  fdeb				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fdeb				  -	      BNE	.loop
     26  fdeb					      ELSE
     27  fdeb				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fdeb				  -	      BMI	.loop
     29  fdeb					      ELSE
     30  fdeb				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fdeb				  -	      BPL	.loop
     32  fdeb					      ELSE
     33  fdeb				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fdeb				  -	      CPY	_STK_LVL_3
     35  fdeb					      ELSE
     36  fdeb		       c0 0b		      CPY	#_STK_LVL_3
     37  fded					      ENDIF
     38  fded		       d0 f4		      BNE	.loop
     39  fdef					      ENDIF
     40  fdef					      ENDIF
     41  fdef					      ENDIF
     42  fdef					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fdef					      INCLUDE	"STACKPOP3.ASM"
     19  fdef					      LIST	ON
------- FILE next_y
    513  fdef							; it's needed file
    514  fdef		       4c 05 fe 	      JMP	_OPEN_CURRENT_DIR_RECORD
    515  fdf2				   .nextRecord
    516  fdf2		       18		      CLC
    517  fdf3		       a5 33		      LDA	_dirReadPointer
    518  fdf5		       69 20		      ADC	#_DIR_RECORD_SIZE
    519  fdf7		       85 33		      STA	_dirReadPointer
      0  fdf9					      IF_C_SET
      1  fdf9				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fdf9		       90 02		      BCC	.tmp
      3  fdf9				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fdf9				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdfb					      INCLUDE	"STACKPUSH.ASM"
     22  fdfb					      LIST	ON
------- FILE if_c_set
    521  fdfb		       e6 34		      INC	_dirReadPointer + 1
      0  fdfd					      END_IF
      1  fdfd				   _STRUCT_MAC_LABEL_68
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdfd					      INCLUDE	"STACKPOP.ASM"
     21  fdfd					      LIST	ON
------- FILE end_if
      0  fdfd					      NEXT_X
      1  fdfd				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fdfd				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fdfd				  -	      DEX
      4  fdfd				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fdfd				  -	      BNE	.loop
      6  fdfd				  -	      ELSE
      7  fdfd				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fdfd				  -	      BPL	.loop
      9  fdfd				  -	      ELSE
     10  fdfd				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fdfd				  -	      BMI	.loop
     12  fdfd				  -	      ELSE
     13  fdfd				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fdfd				  -	      CPX	_STK_LVL_3
     15  fdfd				  -	      ELSE
     16  fdfd				  -	      CPX	#_STK_LVL_3
     17  fdfd				  -	      ENDIF
     18  fdfd				  -	      BNE	.loop
     19  fdfd				  -	      ENDIF
     20  fdfd				  -	      ENDIF
     21  fdfd				  -	      ENDIF
     22  fdfd					      ELSE
     23  fdfd		       e8		      INX
     24  fdfe				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fdfe				  -	      BNE	.loop
     26  fdfe					      ELSE
     27  fdfe				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fdfe				  -	      BMI	.loop
     29  fdfe					      ELSE
     30  fdfe				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fdfe				  -	      BPL	.loop
     32  fdfe					      ELSE
     33  fdfe				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fdfe				  -	      CPX	_STK_LVL_3
     35  fdfe					      ELSE
     36  fdfe		       e0 10		      CPX	#_STK_LVL_3
     37  fe00					      ENDIF
     38  fe00		       d0 cd		      BNE	.loop
     39  fe02					      ENDIF
     40  fe02					      ENDIF
     41  fe02					      ENDIF
     42  fe02					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe02					      INCLUDE	"STACKPOP3.ASM"
     19  fe02					      LIST	ON
------- FILE next_x
    524  fe02				   .notFound
    525  fe02		       a9 ff		      LDA	#$FF	; it's negative so I can recognize it easy
    526  fe04		       60		      RTS
    527  fe05
    528  fe05				   _OPEN_CURRENT_DIR_RECORD
    529  fe05							; copy file size
      0  fe05					      FOR_Y	_DIR_RECORD_FILE_SIZE_OFFSET, UP_TO, _DIR_RECORD_FILE_SIZE_OFFSET + 4
      1  fe05				  -	      IF	[ !(_DIR_RECORD_FILE_SIZE_OFFSET == ACCUM || _DIR_RECORD_FILE_SIZE_OFFSET == X_REG || _DIR_RECORD_FILE_SIZE_OFFSET == Y_REG || _DIR_RECORD_FILE_SIZE_OFFSET < $100) ]
      2  fe05				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fe05				  -	      ERR
      4  fe05					      ENDIF
      5  fe05				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fe05				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fe05				  -	      ERR
      8  fe05					      ENDIF
      9  fe05				  -	      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET == ACCUM ]
     10  fe05				  -	      TAY
     11  fe05					      ELSE
     12  fe05				  -	      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET == X_REG ]
     13  fe05				  -	      PHA
     14  fe05				  -	      TXA
     15  fe05				  -	      TAY
     16  fe05				  -	      PLA
     17  fe05					      ELSE
     18  fe05					      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET != Y_REG ]
     19  fe05		       a0 1c		      LDY	#_DIR_RECORD_FILE_SIZE_OFFSET
     20  fe07					      ENDIF
     21  fe07					      ENDIF
     22  fe07					      ENDIF
     23  fe07				   _TO_PUSH_3 SET	_DIR_RECORD_FILE_SIZE_OFFSET + 4
     24  fe07				   _TO_PUSH_2 SET	UP_TO
     25  fe07				   _STRUCT_MAC_LABEL_69
     26  fe07				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe07				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe07					      INCLUDE	"STKPUSH3.ASM"
     22  fe07					      LIST	ON
------- FILE for_y
    531  fe07		       b1 33		      LDA	(_dirReadPointer),Y
    532  fe09		       99 05 00 	      STA	[_openedFileSize-_DIR_RECORD_FILE_SIZE_OFFSET],Y
      0  fe0c					      NEXT_Y
      1  fe0c				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe0c				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe0c				  -	      DEY
      4  fe0c				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe0c				  -	      BNE	.loop
      6  fe0c				  -	      ELSE
      7  fe0c				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe0c				  -	      BPL	.loop
      9  fe0c				  -	      ELSE
     10  fe0c				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe0c				  -	      BMI	.loop
     12  fe0c				  -	      ELSE
     13  fe0c				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe0c				  -	      CPY	_STK_LVL_3
     15  fe0c				  -	      ELSE
     16  fe0c				  -	      CPY	#_STK_LVL_3
     17  fe0c				  -	      ENDIF
     18  fe0c				  -	      BNE	.loop
     19  fe0c				  -	      ENDIF
     20  fe0c				  -	      ENDIF
     21  fe0c				  -	      ENDIF
     22  fe0c					      ELSE
     23  fe0c		       c8		      INY
     24  fe0d				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe0d				  -	      BNE	.loop
     26  fe0d					      ELSE
     27  fe0d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe0d				  -	      BMI	.loop
     29  fe0d					      ELSE
     30  fe0d				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe0d				  -	      BPL	.loop
     32  fe0d					      ELSE
     33  fe0d				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe0d				  -	      CPY	_STK_LVL_3
     35  fe0d					      ELSE
     36  fe0d		       c0 20		      CPY	#_STK_LVL_3
     37  fe0f					      ENDIF
     38  fe0f		       d0 f6		      BNE	.loop
     39  fe11					      ENDIF
     40  fe11					      ENDIF
     41  fe11					      ENDIF
     42  fe11					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe11					      INCLUDE	"STACKPOP3.ASM"
     19  fe11					      LIST	ON
------- FILE next_y
    534  fe11							; copy file start cluster
    535  fe11		       a0 1a		      LDY	#_DIR_RECORD_LOW_START_CLUSTER_OFFSET
    536  fe13		       b1 33		      LDA	(_dirReadPointer),Y
    537  fe15		       85 18		      STA	_openedCluster
    538  fe17		       c8		      INY
    539  fe18		       b1 33		      LDA	(_dirReadPointer),Y
    540  fe1a		       85 19		      STA	_openedCluster + 1
    541  fe1c		       a0 14		      LDY	#_DIR_RECORD_HIGH_START_CLUSTER_OFFSET
    542  fe1e		       b1 33		      LDA	(_dirReadPointer),Y
    543  fe20		       85 1a		      STA	_openedCluster + 2
    544  fe22		       c8		      INY
    545  fe23		       b1 33		      LDA	(_dirReadPointer),Y
    546  fe25		       85 1b		      STA	_openedCluster + 3
    547  fe27		       4c 68 fc 	      JMP	_OPEN_CLUSTER
    548  fe2a							; the end here
    549  fe2a
    550  fe2a							; After the cluster is opened this routine either read the next page inside the cluster or figures out via FAT
    551  fe2a							; where the next cluster is and reads it
    552  fe2a							; Changes X & Y
    553  fe2a				   _READ_NEXT_SECTOR
    554  fe2a					      SUBROUTINE
    555  fe2a							; Increase the current opened sector and see if it still fit in the cluster
    556  fe2a		       e6 1c		      INC	_openedSectorInCluster
    557  fe2c		       a5 13		      LDA	_sectorsPerCluster
    558  fe2e		       c5 1c		      CMP	_openedSectorInCluster
    559  fe30		       f0 1c		      BEQ	.nextCluster
    560  fe32							; Increase opened sector number
    561  fe32		       e6 1d		      INC	_openedSector
      0  fe34					      IF_ZERO
      0  fe34					      IF_EQ
      1  fe34				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe34		       d0 0a		      BNE	.tmp
      3  fe34				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe34				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe36					      INCLUDE	"STACKPUSH.ASM"
     22  fe36					      LIST	ON
------- FILE if_eq
    563  fe36		       e6 1e		      INC	_openedSector+1
      0  fe38					      IF_ZERO
      0  fe38					      IF_EQ
      1  fe38				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe38		       d0 06		      BNE	.tmp
      3  fe38				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe38				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe3a					      INCLUDE	"STACKPUSH.ASM"
     22  fe3a					      LIST	ON
------- FILE if_eq
    565  fe3a		       e6 1f		      INC	_openedSector+2
      0  fe3c					      IF_ZERO
      0  fe3c					      IF_EQ
      1  fe3c				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe3c		       d0 02		      BNE	.tmp
      3  fe3c				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe3c				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe3e					      INCLUDE	"STACKPUSH.ASM"
     22  fe3e					      LIST	ON
------- FILE if_eq
    567  fe3e		       e6 20		      INC	_openedSector+3
      0  fe40					      END_IF
      1  fe40				   _STRUCT_MAC_LABEL_72
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe40					      INCLUDE	"STACKPOP.ASM"
     21  fe40					      LIST	ON
------- FILE end_if
      0  fe40					      END_IF
      1  fe40				   _STRUCT_MAC_LABEL_71
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe40					      INCLUDE	"STACKPOP.ASM"
     21  fe40					      LIST	ON
------- FILE end_if
      0  fe40					      END_IF
      1  fe40				   _STRUCT_MAC_LABEL_70
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe40					      INCLUDE	"STACKPOP.ASM"
     21  fe40					      LIST	ON
------- FILE end_if
      0  fe40					      FOR_X	0, UP_TO, 4
      1  fe40				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fe40				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fe40				  -	      ERR
      4  fe40					      ENDIF
      5  fe40				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fe40				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fe40				  -	      ERR
      8  fe40					      ENDIF
      9  fe40				  -	      IF	[ 0 == ACCUM ]
     10  fe40				  -	      TAX
     11  fe40					      ELSE
     12  fe40				  -	      IF	[ 0 == Y_REG ]
     13  fe40				  -	      PHA
     14  fe40				  -	      TYA
     15  fe40				  -	      TAX
     16  fe40				  -	      PLA
     17  fe40					      ELSE
     18  fe40					      IF	[ 0 != X_REG ]
     19  fe40		       a2 00		      LDX	#0
     20  fe42					      ENDIF
     21  fe42					      ENDIF
     22  fe42					      ENDIF
     23  fe42				   _TO_PUSH_3 SET	4
     24  fe42				   _TO_PUSH_2 SET	UP_TO
     25  fe42				   _STRUCT_MAC_LABEL_73
     26  fe42				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe42				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe42					      INCLUDE	"STKPUSH3.ASM"
     22  fe42					      LIST	ON
------- FILE for_x
    572  fe42		       b5 1d		      LDA	_openedSector,X
    573  fe44		       95 03		      STA	sdSector,X
      0  fe46					      NEXT_X
      1  fe46				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe46				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe46				  -	      DEX
      4  fe46				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe46				  -	      BNE	.loop
      6  fe46				  -	      ELSE
      7  fe46				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe46				  -	      BPL	.loop
      9  fe46				  -	      ELSE
     10  fe46				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe46				  -	      BMI	.loop
     12  fe46				  -	      ELSE
     13  fe46				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe46				  -	      CPX	_STK_LVL_3
     15  fe46				  -	      ELSE
     16  fe46				  -	      CPX	#_STK_LVL_3
     17  fe46				  -	      ENDIF
     18  fe46				  -	      BNE	.loop
     19  fe46				  -	      ENDIF
     20  fe46				  -	      ENDIF
     21  fe46				  -	      ENDIF
     22  fe46					      ELSE
     23  fe46		       e8		      INX
     24  fe47				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe47				  -	      BNE	.loop
     26  fe47					      ELSE
     27  fe47				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe47				  -	      BMI	.loop
     29  fe47					      ELSE
     30  fe47				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe47				  -	      BPL	.loop
     32  fe47					      ELSE
     33  fe47				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe47				  -	      CPX	_STK_LVL_3
     35  fe47					      ELSE
     36  fe47		       e0 04		      CPX	#_STK_LVL_3
     37  fe49					      ENDIF
     38  fe49		       d0 f7		      BNE	.loop
     39  fe4b					      ENDIF
     40  fe4b					      ENDIF
     41  fe4b					      ENDIF
     42  fe4b					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe4b					      INCLUDE	"STACKPOP3.ASM"
     19  fe4b					      LIST	ON
------- FILE next_x
    575  fe4b		       4c 67 f9 	      JMP	READ_SD_SECTOR
    576  fe4e				   .nextCluster
    577  fe4e							; Read sd sector _fatSector + ( _openedCluster * 4 ) / sectorSize
    578  fe4e							;   = 3rd, 2 and 1st bytes shifted left
    579  fe4e		       a5 19		      LDA	_openedCluster+1
    580  fe50		       85 03		      STA	sdSector
    581  fe52		       a5 1a		      LDA	_openedCluster+2
    582  fe54		       85 04		      STA	sdSector+1
    583  fe56		       a5 1b		      LDA	_openedCluster+3
    584  fe58		       85 05		      STA	sdSector+2
    585  fe5a		       a9 00		      LDA	#0
    586  fe5c		       85 06		      STA	sdSector+3
    587  fe5e		       a5 18		      LDA	_openedCluster
    588  fe60		       0a		      ASL
    589  fe61		       26 04		      ROL	sdSector+1
    590  fe63		       26 05		      ROL	sdSector+2
    591  fe65		       26 06		      ROL	sdSector+3
    592  fe67							; carry = 0
    593  fe67							; we can add _fatSector
    594  fe67		       a5 03		      LDA	sdSector
    595  fe69		       65 0b		      ADC	_fatSector
    596  fe6b		       85 03		      STA	sdSector
    597  fe6d		       a5 04		      LDA	sdSector+1
    598  fe6f		       65 0c		      ADC	_fatSector+1
    599  fe71		       85 04		      STA	sdSector+1
    600  fe73		       a5 05		      LDA	sdSector+2
    601  fe75		       65 0d		      ADC	_fatSector+2
    602  fe77		       85 05		      STA	sdSector+2
    603  fe79		       a5 06		      LDA	sdSector+3
    604  fe7b		       65 0e		      ADC	_fatSector+3
    605  fe7d		       85 06		      STA	sdSector+3
    606  fe7f
    607  fe7f		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fe82					      RTS_IF_NE
      1  fe82		       f0 01		      BEQ	.tmp
      2  fe84		       60		      RTS
      3  fe85				   .tmp
    609  fe85
    610  fe85							; And read 4 bytes of the next fat cluster by offset ( _openedCluster * 4 ) % sectorSize
    611  fe85							; 0x?FFFFFF8 - 0x?FFFFFFF is the end-of-chain marker
    612  fe85
    613  fe85		       a9 00		      LDA	#<sdPageStart
    614  fe87		       85 03		      STA	_sdHalfPageStart
    615  fe89		       06 18		      ASL	_openedCluster
    616  fe8b		       06 18		      ASL	_openedCluster
    617  fe8d							; Bit in carry shows what half of the page to use
    618  fe8d		       a9 7e		      LDA	#>sdPageStart
    619  fe8f		       69 00		      ADC	#0	; Adds the carry here
    620  fe91		       85 04		      STA	_sdHalfPageStart+1
    621  fe93
    622  fe93							; Write next cluster to _openedCluster
    623  fe93		       a5 18		      LDA	_openedCluster
    624  fe95		       a8		      TAY
      0  fe96					      FOR_X	0, UP_TO, 4
      1  fe96				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fe96				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fe96				  -	      ERR
      4  fe96					      ENDIF
      5  fe96				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fe96				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fe96				  -	      ERR
      8  fe96					      ENDIF
      9  fe96				  -	      IF	[ 0 == ACCUM ]
     10  fe96				  -	      TAX
     11  fe96					      ELSE
     12  fe96				  -	      IF	[ 0 == Y_REG ]
     13  fe96				  -	      PHA
     14  fe96				  -	      TYA
     15  fe96				  -	      TAX
     16  fe96				  -	      PLA
     17  fe96					      ELSE
     18  fe96					      IF	[ 0 != X_REG ]
     19  fe96		       a2 00		      LDX	#0
     20  fe98					      ENDIF
     21  fe98					      ENDIF
     22  fe98					      ENDIF
     23  fe98				   _TO_PUSH_3 SET	4
     24  fe98				   _TO_PUSH_2 SET	UP_TO
     25  fe98				   _STRUCT_MAC_LABEL_74
     26  fe98				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe98				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe98					      INCLUDE	"STKPUSH3.ASM"
     22  fe98					      LIST	ON
------- FILE for_x
    626  fe98		       b1 03		      LDA	(_sdHalfPageStart),Y
    627  fe9a		       95 18		      STA	_openedCluster,X
    628  fe9c		       c8		      INY
      0  fe9d					      NEXT_X
      1  fe9d				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe9d				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe9d				  -	      DEX
      4  fe9d				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe9d				  -	      BNE	.loop
      6  fe9d				  -	      ELSE
      7  fe9d				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe9d				  -	      BPL	.loop
      9  fe9d				  -	      ELSE
     10  fe9d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe9d				  -	      BMI	.loop
     12  fe9d				  -	      ELSE
     13  fe9d				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe9d				  -	      CPX	_STK_LVL_3
     15  fe9d				  -	      ELSE
     16  fe9d				  -	      CPX	#_STK_LVL_3
     17  fe9d				  -	      ENDIF
     18  fe9d				  -	      BNE	.loop
     19  fe9d				  -	      ENDIF
     20  fe9d				  -	      ENDIF
     21  fe9d				  -	      ENDIF
     22  fe9d					      ELSE
     23  fe9d		       e8		      INX
     24  fe9e				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe9e				  -	      BNE	.loop
     26  fe9e					      ELSE
     27  fe9e				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe9e				  -	      BMI	.loop
     29  fe9e					      ELSE
     30  fe9e				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe9e				  -	      BPL	.loop
     32  fe9e					      ELSE
     33  fe9e				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe9e				  -	      CPX	_STK_LVL_3
     35  fe9e					      ELSE
     36  fe9e		       e0 04		      CPX	#_STK_LVL_3
     37  fea0					      ENDIF
     38  fea0		       d0 f6		      BNE	.loop
     39  fea2					      ENDIF
     40  fea2					      ENDIF
     41  fea2					      ENDIF
     42  fea2					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fea2					      INCLUDE	"STACKPOP3.ASM"
     19  fea2					      LIST	ON
------- FILE next_x
    630  fea2
    631  fea2							; Check if it is the end-of-chain
    632  fea2		       a5 19		      LDA	_openedCluster+1
    633  fea4		       c9 ff		      CMP	#$FF
    634  fea6		       d0 19		      BNE	.notEOC
    635  fea8		       a5 1a		      LDA	_openedCluster+2
    636  feaa		       c9 ff		      CMP	#$FF
    637  feac		       d0 13		      BNE	.notEOC
    638  feae		       a5 18		      LDA	_openedCluster
    639  feb0		       29 f8		      AND	#$F8
    640  feb2		       c9 f8		      CMP	#$F8
    641  feb4		       d0 0b		      BNE	.notEOC
    642  feb6		       a5 1b		      LDA	_openedCluster+3
    643  feb8		       29 0f		      AND	#$F
    644  feba		       c9 0f		      CMP	#$F
    645  febc		       d0 03		      BNE	.notEOC
    646  febe		       a9 19		      LDA	#IO_FAT_END_OF_CLUSTERS
    647  fec0		       60		      RTS
    648  fec1				   .notEOC
    649  fec1		       4c 68 fc 	      JMP	_OPEN_CLUSTER
------- FILE bootloader.asm
      6  fec4
      7  fec4							; Don't forget to restore A from stack in iterrupt
      8  fec4		       00 fe	   INTERRUPT_INDIRECT =	$FE	; $ $FF
      9  fec4
     10 U0035					      SEG.U	zpVars
     11 U0035		       00 00	   codeStart  ds	2
     12 U0037		       00 00	   codePointer ds	2
     13 U0039		       00	   fatStatus  ds	1
     14 U003a
     15  fec4					      SEG	code
     16  fec4				   main
     17  fec4		       a9 ff		      LDA	#$FF
     18  fec6		       85 39		      STA	fatStatus
     19  fec8		       20 55 fb 	      JSR	INIT_FAT
     20  fecb		       d0 15		      BNE	fail
      0  fecd					      WRITE_WORD	INIT_FILE_NAME, filenamePointer
      1  fecd		       a9 e7		      LDA	#<INIT_FILE_NAME
      2  fecf		       85 09		      STA	filenamePointer
      3  fed1		       a9 fe		      LDA	#>INIT_FILE_NAME
      4  fed3		       85 0a		      STA	filenamePointer+1
     22  fed5		       20 30 fc 	      JSR	OPEN_FILE_BY_NAME
     23  fed8		       d0 08		      BNE	fail
     24  feda		       20 f1 fe 	      JSR	COPY_FILE
     25  fedd		       d0 03		      BNE	fail
     26  fedf		       6c 35 00 	      JMP	(codeStart)
     27  fee2				   fail
     28  fee2		       85 39		      STA	fatStatus
     29  fee4				   emptyLoop
     30  fee4		       4c e4 fe 	      JMP	emptyLoop
     31  fee7
     32  fee7				   INIT_FILE_NAME
      0  fee7					      STRING	"/init.run"
      1  fee7		       2f 69 6e 69*	      DC	"/init.run"
      2  fef0		       00		      DC	$0
     34  fef1
     35  fef1				   COPY_FILE
     36  fef1					      SUBROUTINE
     37  fef1		       20 ab fc 	      JSR	READ_NEXT_HALF_SECTOR
      0  fef4					      RTS_IF_NE
      1  fef4		       f0 01		      BEQ	.tmp
      2  fef6		       60		      RTS
      3  fef7				   .tmp
     39  fef7							; first two bytes are code start
     40  fef7		       a0 00		      LDY	#0
     41  fef9		       b1 25		      LDA	(half_sector_pointer),Y
     42  fefb		       85 35		      STA	codeStart
     43  fefd		       85 37		      STA	codePointer
     44  feff		       c8		      INY
     45  ff00		       b1 25		      LDA	(half_sector_pointer),Y
     46  ff02		       85 36		      STA	codeStart+1
     47  ff04		       85 38		      STA	codePointer+1
     48  ff06		       c8		      INY
     49  ff07		       a2 00		      LDX	#0
      0  ff09					      BEGIN
      1  ff09				   _STRUCT_MAC_LABEL_75
      2  ff09				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  ff09				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 2 PASS 3
      0  ff09					      INCLUDE	"STACKPUSH.ASM"
     22  ff09					      LIST	ON
------- FILE begin
     51  ff09				   .loop
     52  ff09		       b1 25		      LDA	(half_sector_pointer),Y
     53  ff0b		       81 37		      STA	(codePointer,X)
     54  ff0d		       e6 37		      INC	codePointer
     55  ff0f		       d0 02		      BNE	.skipUpper
     56  ff11		       e6 38		      INC	codePointer+1
     57  ff13				   .skipUpper
     58  ff13		       c8		      INY
     59  ff14		       c4 27		      CPY	half_sector_size
     60  ff16		       d0 f1		      BNE	.loop
     61  ff18		       20 ab fc 	      JSR	READ_NEXT_HALF_SECTOR
      0  ff1b					      WHILE_ZERO
      0  ff1b					      IF_EQ
      1  ff1b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  ff1b		       d0 05		      BNE	.tmp
      3  ff1b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  ff1b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 2 PASS 3
      0  ff1d					      INCLUDE	"STACKPUSH.ASM"
     22  ff1d					      LIST	ON
------- FILE if_eq
     63  ff1d		       a0 00		      LDY	#0
      0  ff1f					      REPEAT_
      1  ff1f				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
      2  ff1f		       4c 09 ff 	      JMP	.tmp
      3  ff22				   _STRUCT_MAC_LABEL_76
------- FILE STACKPOP2.ASM LEVEL 2 PASS 3
      0  ff22					      INCLUDE	"STACKPOP2.ASM"
     20  ff22					      LIST	ON
------- FILE repeat_
     65  ff22		       c9 01		      CMP	#IO_END_OF_FILE
      0  ff24					      RTS_IF_NE
      1  ff24		       f0 01		      BEQ	.tmp
      2  ff26		       60		      RTS
      3  ff27				   .tmp
     67  ff27		       a9 00		      LDA	#0
     68  ff29		       60		      RTS
     69  ff2a
     70  ff2a				   interruptHandler
     71  ff2a		       48		      PHA
      0  ff2b					      CHECK_SHIFT_REGISTER_INTERRUPT
      1  ff2b		       a9 04		      LDA	#%00000100
      2  ff2d		       2d 1d 80 	      AND	VIA_FIRST_IFR
      3  ff30		       f0 03		      BEQ	.end
      4  ff32		       4c 4a fb 	      JMP	_shift_register_interrup_handler
      5  ff35				   .end
     73  ff35		       6c fe 00 	      JMP	($FE)
     74  ff38
      0  ff38					      RESET_VECTOR	main, interruptHandler, interruptHandler
      1  fffa					      ORG	$FFFA
      2  fffa		       2a ff		      DC.W	interruptHandler
      3  fffc					      ORG	$FFFC
      4  fffc		       c4 fe		      DC.W	main
      5  fffe					      ORG	$FFFE
      6  fffe		       2a ff		      DC.W	interruptHandler
     76  10000
------- FILE checkSegments.asm LEVEL 2 PASS 3
      0  10000					       INCLUDE	"checkSegments.asm"
      1 U003a					      SEG.U	zpVars
      2 U003a		       00 3a	   _ZP_VARS_END =	.
      3 U003a
      4  10000					       SEG	code
      5  10000			00 01 00 00 _CODE_END  =	.
      6  10000
      7 U8000					      SEG.U	upperRam
      8 U8000		       80 00	   _UPPER_RAM_END =	.
      9 U8000
 Zero page usage:  $3a
     10 U8000					      ECHO	"Zero page usage: ", _ZP_VARS_END
     11 U8000
     12 U8000				  -	      IF	_ZP_VARS_END > $FF
     13 U8000				  -	      ECHO	"Overuse of Zero page."
     14 U8000				  -	      ERR
     15 U8000					      ENDIF
     16 U8000
     17 U8000				  -	      IF	CODE_START < UPPER_RAM_START
     18 U8000				  -	      ECHO	"Free RAM: ", UPPER_RAM_START - _CODE_END
     19 U8000				  -
     20 U8000				  -	      IF	_CODE_END > UPPER_RAM_START
     21 U8000				  -	      ECHO	"Code is overlaps with upper ram reserved"
     22 U8000				  -	      ERR
     23 U8000				  -	      ENDIF
     24 U8000					      ENDIF
     25 U8000
 Free reserved upper RAM:  $0
     26 U8000					      ECHO	"Free reserved upper RAM: ", $8000 - _UPPER_RAM_END
     27 U8000
     28 U8000				  -	      IF	_UPPER_RAM_END > $8000
     29 U8000				  -	      ECHO	"Reserved upper RAM goes over hardware RAM"
     30 U8000				  -	      ERR
     31 U8000					      ENDIF
     32 U8000
------- FILE bootloader.asm
     78 U8000
