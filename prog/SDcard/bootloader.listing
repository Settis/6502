------- FILE bootloader.asm LEVEL 1 PASS 3
      1 U8000		       00 c5	   ZP_VARS_START =	$C5
      2 U8000		       f9 00	   CODE_START =	$F900
      3 U8000		       7e 00	   UPPER_RAM_START =	$7E00
------- FILE ../std/std.asm LEVEL 2 PASS 3
      0 U8000 ????				      INCLUDE	"../std/std.asm"
      1 U8000 ????				      PROCESSOR	6502
      2 U8000 ????
      3 U8000 ????				      INCDIR	"../std"
      4 U8000 ????				      INCDIR	"../std/dasm-structure-macros/lib"
      5 U8000 ????
------- FILE initSegments.asm LEVEL 3 PASS 3
      0 U8000 ????				      INCLUDE	initSegments.asm
      1 U8000 ????			  -	      IFNCONST	ZP_VARS_START
      2 U8000 ????			  -ZP_VARS_START =	$0
      3 U8000 ????				      ENDIF
      4 U8000 ????
      5 U00fe ????				      SEG.U	zpVars
      6 U00c5					      ORG	ZP_VARS_START
      7 U00c5
      8 U00c5				  -	      IFNCONST	CODE_START
      9 U00c5				  -CODE_START =	$200
     10 U00c5					      ENDIF
     11 U00c5
     12  10000 ????				       SEG	code
     13  f900					      ORG	CODE_START
     14  f900
     15  f900				  -	      IFNCONST	UPPER_RAM_START
     16  f900				  -UPPER_RAM_START =	$7FFF
     17  f900					      ENDIF
     18  f900
     19 U8000 ????				      SEG.U	upperRam
     20 U7e00					      ORG	UPPER_RAM_START
------- FILE ../std/std.asm
------- FILE STRUCMAC.ASM LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	STRUCMAC.ASM
     22 U7e00					      LIST	ON
     23 U7e00
     24 U7e00				   _STRUC_MAC_I SET	1
     25 U7e00
     26 U7e00							; Arguments
     27 U7e00		       00 01	   IS_SET     =	1
     28 U7e00		       00 02	   IS_CLEAR   =	2
     29 U7e00		       00 01	   IS_HIGH    =	1
     30 U7e00		       00 02	   IS_LOW     =	2
     31 U7e00		       00 03	   UP_TO      =	3
     32 U7e00		       00 04	   DOWN_TO    =	4
     33 U7e00		       00 05	   IS_POS     =	5
     34 U7e00		       00 06	   IS_NEG     =	6
     35 U7e00		       00 07	   IS_0       =	7
     36 U7e00		       00 08	   IS_NON_0   =	8
     37 U7e00
     38 U7e00		       01 01	   NEG_NRs    =	$101
     39 U7e00		       01 02	   POS_NRs    =	$102
     40 U7e00		       01 04	   ACCUM      =	$104
     41 U7e00		       01 05	   X_REG      =	$105
     42 U7e00		       01 03	   Y_REG      =	$103
     43 U7e00
     44 U7e00							;			   +--------------------------+
     45 U7e00							;			   |  IF_xx...ELSE_...END_IF  |
     46 U7e00							;			   +==========================+
     47 U7e00					      MACRO	if_eq
     48 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     49 U7e00					      BNE	.tmp
     50 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     51 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     52 U7e00					      INCLUDE	"STACKPUSH.ASM"
     53 U7e00					      ENDM
     54 U7e00							;----------------
     55 U7e00
     56 U7e00					      MACRO	else_
     57 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     58 U7e00					      JMP	.tmp
     59 U7e00				   _STRUCT_MAC_LABEL_0
     60 U7e00				   _STK_LVL_1 SET	_STRUC_MAC_I
     61 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     62 U7e00					      ENDM
     63 U7e00							;----------------
     64 U7e00
     65 U7e00					      MACRO	end_if
     66 U7e00				   _STRUCT_MAC_LABEL_0
     67 U7e00					      INCLUDE	"STACKPOP.ASM"
     68 U7e00					      ENDM
     69 U7e00							;----------------
     70 U7e00
     71 U7e00					      MACRO	if_zero
     72 U7e00					      IF_EQ
     73 U7e00					      ENDM
     74 U7e00							;----------------
     75 U7e00
     76 U7e00					      MACRO	if_neq
     77 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     78 U7e00					      BEQ	.tmp
     79 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     80 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     81 U7e00					      INCLUDE	"STACKPUSH.ASM"
     82 U7e00					      ENDM
     83 U7e00							;----------------
     84 U7e00
     85 U7e00					      MACRO	if_not_zero
     86 U7e00					      IF_NEQ
     87 U7e00					      ENDM
     88 U7e00							;----------------
     89 U7e00
     90 U7e00					      MACRO	if_plus
     91 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
     92 U7e00					      BMI	.tmp
     93 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
     94 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
     95 U7e00					      INCLUDE	"STACKPUSH.ASM"
     96 U7e00					      ENDM
     97 U7e00							;----------------
     98 U7e00
     99 U7e00					      MACRO	if_minus
    100 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    101 U7e00					      BPL	.tmp
    102 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    103 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    104 U7e00					      INCLUDE	"STACKPUSH.ASM"
    105 U7e00					      ENDM
    106 U7e00							;----------------
    107 U7e00
    108 U7e00					      MACRO	if_neg
    109 U7e00					      IF_MINUS
    110 U7e00					      ENDM
    111 U7e00							;----------------
    112 U7e00
    113 U7e00					      MACRO	if_c_set
    114 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    115 U7e00					      BCC	.tmp
    116 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    117 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    118 U7e00					      INCLUDE	"STACKPUSH.ASM"
    119 U7e00					      ENDM
    120 U7e00							;----------------
    121 U7e00
    122 U7e00					      MACRO	if_c_clr
    123 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    124 U7e00					      BCS	.tmp
    125 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    126 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    127 U7e00					      INCLUDE	"STACKPUSH.ASM"
    128 U7e00					      ENDM
    129 U7e00							;----------------
    130 U7e00
    131 U7e00					      MACRO	if_ge
    132 U7e00					      IF_C_SET
    133 U7e00					      ENDM
    134 U7e00							;----------------
    135 U7e00
    136 U7e00					      MACRO	if_lt
    137 U7e00					      IF_C_CLR
    138 U7e00					      ENDM
    139 U7e00							;----------------
    140 U7e00
    141 U7e00					      MACRO	if_v_set
    142 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    143 U7e00					      BVC	.tmp
    144 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    145 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    146 U7e00					      INCLUDE	"STACKPUSH.ASM"
    147 U7e00					      ENDM
    148 U7e00							;----------------
    149 U7e00
    150 U7e00					      MACRO	if_v_clr
    151 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    152 U7e00					      BVS	.tmp
    153 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    154 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    155 U7e00					      INCLUDE	"STACKPUSH.ASM"
    156 U7e00					      ENDM
    157 U7e00							;----------------
    158 U7e00
    159 U7e00					      MACRO	if_flag_var
    160 U7e00					      IF	![ {2} == IS_SET || {2} == IS_CLEAR ]
    161 U7e00					      ECHO	"Condition must be: IS_SET or IS_CLEAR"
    162 U7e00					      ERR
    163 U7e00					      ENDIF
    164 U7e00					      BIT	{1}
    165 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    166 U7e00					      IF	{2} == IS_SET
    167 U7e00					      BPL	.tmp
    168 U7e00					      ELSE
    169 U7e00					      BMI	.tmp
    170 U7e00					      ENDIF
    171 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    172 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    173 U7e00					      INCLUDE	"STACKPUSH.ASM"
    174 U7e00					      ENDM
    175 U7e00							;----------------
    176 U7e00
    177 U7e00					      MACRO	if_bit
    178 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    179 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    180 U7e00					      ERR
    181 U7e00					      ENDIF
    182 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    183 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    184 U7e00					      ERR
    185 U7e00					      ENDIF
    186 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    187 U7e00					      IF	[ {2} < 6 ]
    188 U7e00					      LDA	#[1 << {2}]
    189 U7e00					      BIT	{1}
    190 U7e00					      IF	[ {3} == IS_HIGH ]
    191 U7e00					      BEQ	.tmp
    192 U7e00					      ELSE
    193 U7e00					      BNE	.tmp
    194 U7e00					      ENDIF
    195 U7e00					      ELSE
    196 U7e00					      BIT	{1}
    197 U7e00					      IF	[ {2} == 7 ]
    198 U7e00					      IF	[ {3} == IS_HIGH ]
    199 U7e00					      BPL	.tmp
    200 U7e00					      ELSE
    201 U7e00					      BMI	.tmp
    202 U7e00					      ENDIF
    203 U7e00					      ELSE
    204 U7e00					      IF	[ {3} == IS_HIGH ]
    205 U7e00					      BVC	.tmp
    206 U7e00					      ELSE
    207 U7e00					      BVS	.tmp
    208 U7e00					      ENDIF
    209 U7e00					      ENDIF
    210 U7e00					      ENDIF
    211 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    212 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    213 U7e00					      INCLUDE	"STACKPUSH.ASM"
    214 U7e00					      ENDM
    215 U7e00							;----------------
    216 U7e00
    217 U7e00					      MACRO	if_mem_byte_neg
    218 U7e00					      BIT	{1}
    219 U7e00					      IF_MINUS
    220 U7e00					      ENDM
    221 U7e00							;----------------
    222 U7e00
    223 U7e00					      MACRO	if_mem_byte_pos
    224 U7e00					      BIT	{1}
    225 U7e00					      IF_PLUS
    226 U7e00					      ENDM
    227 U7e00							;----------------
    228 U7e00
    229 U7e00
    230 U7e00							;			  +--------------------------+
    231 U7e00							;			  |	 BEGIN...AGAIN	     |
    232 U7e00							;			  |	 BEGIN...UNTIL	     |
    233 U7e00							;			  |  BEGIN...WHILE...REPEAT  |
    234 U7e00							;			  +==========================+
    235 U7e00
    236 U7e00					      MACRO	begin
    237 U7e00				   _STRUCT_MAC_LABEL_1
    238 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    239 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    240 U7e00					      INCLUDE	"STACKPUSH.ASM"
    241 U7e00					      ENDM
    242 U7e00							;----------------
    243 U7e00
    244 U7e00					      MACRO	again
    245 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    246 U7e00					      JMP	.tmp
    247 U7e00					      INCLUDE	"STACKPOP.ASM"
    248 U7e00					      ENDM
    249 U7e00							;----------------
    250 U7e00
    251 U7e00					      MACRO	while_eq
    252 U7e00					      IF_EQ
    253 U7e00					      ENDM
    254 U7e00							;----------------
    255 U7e00
    256 U7e00					      MACRO	repeat_
    257 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
    258 U7e00					      JMP	.tmp
    259 U7e00				   _STRUCT_MAC_LABEL_0
    260 U7e00					      INCLUDE	"STACKPOP2.ASM"
    261 U7e00					      ENDM
    262 U7e00							;----------------
    263 U7e00
    264 U7e00					      MACRO	while_neq
    265 U7e00					      IF_NEQ
    266 U7e00					      ENDM
    267 U7e00							;----------------
    268 U7e00
    269 U7e00					      MACRO	while_zero
    270 U7e00					      IF_EQ
    271 U7e00					      ENDM
    272 U7e00							;----------------
    273 U7e00
    274 U7e00					      MACRO	while_not_zero
    275 U7e00					      IF_NEQ
    276 U7e00					      ENDM
    277 U7e00							;----------------
    278 U7e00
    279 U7e00					      MACRO	while_plus
    280 U7e00					      IF_PLUS
    281 U7e00					      ENDM
    282 U7e00							;----------------
    283 U7e00
    284 U7e00					      MACRO	while_minus
    285 U7e00					      IF_MINUS
    286 U7e00					      ENDM
    287 U7e00							;----------------
    288 U7e00
    289 U7e00					      MACRO	while_neg
    290 U7e00					      IF_MINUS
    291 U7e00					      ENDM
    292 U7e00							;----------------
    293 U7e00
    294 U7e00					      MACRO	while_c_clr
    295 U7e00					      IF_C_CLR
    296 U7e00					      ENDM
    297 U7e00							;----------------
    298 U7e00
    299 U7e00					      MACRO	while_c_set
    300 U7e00					      IF_C_SET
    301 U7e00					      ENDM
    302 U7e00							;----------------
    303 U7e00
    304 U7e00					      MACRO	while_ge
    305 U7e00					      IF_C_SET
    306 U7e00					      ENDM
    307 U7e00							;----------------
    308 U7e00
    309 U7e00					      MACRO	while_lt
    310 U7e00					      IF_C_CLR
    311 U7e00					      ENDM
    312 U7e00							;----------------
    313 U7e00
    314 U7e00					      MACRO	while_v_clr
    315 U7e00					      IF_V_CLR
    316 U7e00					      ENDM
    317 U7e00							;----------------
    318 U7e00
    319 U7e00					      MACRO	while_v_set
    320 U7e00					      IF_V_SET
    321 U7e00					      ENDM
    322 U7e00							;----------------
    323 U7e00
    324 U7e00					      MACRO	while_bit
    325 U7e00					      IF_BIT	{1}, {2}, {3}
    326 U7e00					      ENDM
    327 U7e00							;----------------
    328 U7e00
    329 U7e00					      MACRO	until_eq
    330 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    331 U7e00					      BNE	.tmp
    332 U7e00					      INCLUDE	"STACKPOP.ASM"
    333 U7e00					      ENDM
    334 U7e00							;----------------
    335 U7e00
    336 U7e00					      MACRO	until_zero
    337 U7e00					      UNTIL_EQ
    338 U7e00					      ENDM
    339 U7e00							;----------------
    340 U7e00
    341 U7e00					      MACRO	until_neq
    342 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    343 U7e00					      BEQ	.tmp
    344 U7e00					      INCLUDE	"STACKPOP.ASM"
    345 U7e00					      ENDM
    346 U7e00							;----------------
    347 U7e00
    348 U7e00					      MACRO	until_not_zero
    349 U7e00					      UNTIL_NEQ
    350 U7e00					      ENDM
    351 U7e00							;----------------
    352 U7e00
    353 U7e00					      MACRO	until_plus
    354 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    355 U7e00					      BMI	.tmp
    356 U7e00					      INCLUDE	"STACKPOP.ASM"
    357 U7e00					      ENDM
    358 U7e00							;----------------
    359 U7e00
    360 U7e00					      MACRO	until_minus
    361 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    362 U7e00					      BPL	.tmp
    363 U7e00					      INCLUDE	"STACKPOP.ASM"
    364 U7e00					      ENDM
    365 U7e00							;----------------
    366 U7e00
    367 U7e00					      MACRO	until_neg
    368 U7e00					      UNTIL_MINUS
    369 U7e00					      ENDM
    370 U7e00							;----------------
    371 U7e00
    372 U7e00					      MACRO	until_c_clr
    373 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    374 U7e00					      BCS	.tmp
    375 U7e00					      INCLUDE	"STACKPOP.ASM"
    376 U7e00					      ENDM
    377 U7e00							;----------------
    378 U7e00
    379 U7e00					      MACRO	until_c_set
    380 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    381 U7e00					      BCC	.tmp
    382 U7e00					      INCLUDE	"STACKPOP.ASM"
    383 U7e00					      ENDM
    384 U7e00							;----------------
    385 U7e00
    386 U7e00					      MACRO	until_ge
    387 U7e00					      UNTIL_C_SET
    388 U7e00					      ENDM
    389 U7e00							;----------------
    390 U7e00
    391 U7e00					      MACRO	until_lt
    392 U7e00					      UNTIL_C_CLR
    393 U7e00					      ENDM
    394 U7e00							;----------------
    395 U7e00
    396 U7e00					      MACRO	until_v_clr
    397 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    398 U7e00					      BVS	.tmp
    399 U7e00					      INCLUDE	"STACKPOP.ASM"
    400 U7e00					      ENDM
    401 U7e00							;----------------
    402 U7e00
    403 U7e00					      MACRO	until_v_set
    404 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    405 U7e00					      BVC	.tmp
    406 U7e00					      INCLUDE	"STACKPOP.ASM"
    407 U7e00					      ENDM
    408 U7e00							;----------------
    409 U7e00
    410 U7e00					      MACRO	until_bit
    411 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    412 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    413 U7e00					      ERR
    414 U7e00					      ENDIF
    415 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    416 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    417 U7e00					      ERR
    418 U7e00					      ENDIF
    419 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    420 U7e00					      IF	[ {2} < 6 ]
    421 U7e00					      LDA	#[1 << {2}]
    422 U7e00					      BIT	{1}
    423 U7e00					      IF	[ {3} == IS_HIGH ]
    424 U7e00					      BEQ	.tmp
    425 U7e00					      ELSE
    426 U7e00					      BNE	.tmp
    427 U7e00					      ENDIF
    428 U7e00					      ELSE
    429 U7e00					      BIT	{1}
    430 U7e00					      IF	[ {2} == 7 ]
    431 U7e00					      IF	[ {3} == IS_HIGH ]
    432 U7e00					      BPL	.tmp
    433 U7e00					      ELSE
    434 U7e00					      BMI	.tmp
    435 U7e00					      ENDIF
    436 U7e00					      ELSE
    437 U7e00					      IF	[ {3} == IS_HIGH ]
    438 U7e00					      BVC	.tmp
    439 U7e00					      ELSE
    440 U7e00					      BVS	.tmp
    441 U7e00					      ENDIF
    442 U7e00					      ENDIF
    443 U7e00					      ENDIF
    444 U7e00					      INCLUDE	"STACKPOP.ASM"
    445 U7e00					      ENDM
    446 U7e00							;----------------
    447 U7e00
    448 U7e00							;			  +--------------------+
    449 U7e00							;			  |   CASE statement   |
    450 U7e00							;			  +====================+
    451 U7e00
    452 U7e00					      MACRO	case
    453 U7e00					      IF	![ {1} == ACCUM || {1} == X_REG || {1} == Y_REG ]
    454 U7e00					      ECHO	"Register must be one of: ACCUM, X_REG or Y_REG"
    455 U7e00					      ERR
    456 U7e00					      ENDIF
    457 U7e00				   _TO_PUSH_1 SET	{1}
    458 U7e00				   _TO_PUSH_2 SET	_STRUC_MAC_I
    459 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    460 U7e00					      INCLUDE	"STKPUSH2.ASM"
    461 U7e00					      ENDM
    462 U7e00							;----------------
    463 U7e00
    464 U7e00					      MACRO	case_of
    465 U7e00					      IF	[ _STK_LVL_1 == ACCUM ]
    466 U7e00					      CMP	#{1}
    467 U7e00					      ENDIF
    468 U7e00					      IF	[ _STK_LVL_1 == X_REG ]
    469 U7e00					      CPX	#{1}
    470 U7e00					      ENDIF
    471 U7e00					      IF	[ _STK_LVL_1 == Y_REG ]
    472 U7e00					      CPY	#{1}
    473 U7e00					      ENDIF
    474 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
    475 U7e00					      BNE	.tmp
    476 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    477 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    478 U7e00					      INCLUDE	"STACKPUSH.ASM"
    479 U7e00					      ENDM
    480 U7e00							;----------------
    481 U7e00
    482 U7e00					      MACRO	end_of
    483 U7e00				   .case_end  set	_STRUCT_MAC_LABEL_,_STK_LVL_3
    484 U7e00					      JMP	.case_end
    485 U7e00				   _STRUCT_MAC_LABEL_0
    486 U7e00					      INCLUDE	"STACKPOP.ASM"
    487 U7e00					      ENDM
    488 U7e00							;----------------
    489 U7e00
    490 U7e00					      MACRO	end_case
    491 U7e00				   _STRUCT_MAC_LABEL_0
    492 U7e00					      INCLUDE	"STACKPOP2.ASM"
    493 U7e00					      ENDM
    494 U7e00							;----------------
    495 U7e00
    496 U7e00							;			 +--------------------+
    497 U7e00							;			 |     FOR...NEXT     |
    498 U7e00							;			 +====================+
    499 U7e00
    500 U7e00					      MACRO	for
    501 U7e00					      LDA	#[ {2} & $FF ]
    502 U7e00					      STA	{1}
    503 U7e00					      LDA	#[ ({2} >> 8) & $FF ]
    504 U7e00					      STA	{1}+1
    505 U7e00				   _TO_PUSH_3 SET	{1}
    506 U7e00				   _TO_PUSH_2 SET	{4}
    507 U7e00				   _STRUCT_MAC_LABEL_1
    508 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    509 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    510 U7e00					      INCLUDE	"STKPUSH3.ASM"
    511 U7e00					      ENDM
    512 U7e00							;----------------
    513 U7e00
    514 U7e00					      MACRO	next
    515 U7e00					      INC	_STK_LVL_3
    516 U7e00					      BNE	.check_condition
    517 U7e00					      INC	_STK_LVL_3+1
    518 U7e00				   .check_condition
    519 U7e00				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    520 U7e00					      LDA	_STK_LVL_3
    521 U7e00					      CMP	#[ (_STK_LVL_2+1) & $FF ]
    522 U7e00					      BNE	.tmp
    523 U7e00					      LDA	_STK_LVL_3+1
    524 U7e00					      CMP	#[ ((_STK_LVL_2+1) >> 8) & $FF ]
    525 U7e00					      BNE	.tmp
    526 U7e00					      INCLUDE	"STACKPOP3.ASM"
    527 U7e00					      ENDM
    528 U7e00							;----------------
    529 U7e00
    530 U7e00							;			  +--------------------+
    531 U7e00							;			  |   FOR_X...NEXT_X   |
    532 U7e00							;			  +====================+
    533 U7e00
    534 U7e00					      MACRO	for_x
    535 U7e00					      IF	[ !({1} == ACCUM || {1} == X_REG || {1} == Y_REG || {1} < $100) ]
    536 U7e00					      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
    537 U7e00					      ERR
    538 U7e00					      ENDIF
    539 U7e00					      IF	[ !({2} == UP_TO || {2} == DOWN_TO) ]
    540 U7e00					      ECHO	"Direction must be UP_TO or DOWN_TO"
    541 U7e00					      ERR
    542 U7e00					      ENDIF
    543 U7e00					      IF	[ {1} == ACCUM ]
    544 U7e00					      TAX
    545 U7e00					      ELSE
    546 U7e00					      IF	[ {1} == Y_REG ]
    547 U7e00					      PHA
    548 U7e00					      TYA
    549 U7e00					      TAX
    550 U7e00					      PLA
    551 U7e00					      ELSE
    552 U7e00					      IF	[ {1} != X_REG ]
    553 U7e00					      LDX	#{1}
    554 U7e00					      ENDIF
    555 U7e00					      ENDIF
    556 U7e00					      ENDIF
    557 U7e00				   _TO_PUSH_3 SET	{3}
    558 U7e00				   _TO_PUSH_2 SET	{2}
    559 U7e00				   _STRUCT_MAC_LABEL_1
    560 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    561 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    562 U7e00					      INCLUDE	"STKPUSH3.ASM"
    563 U7e00					      ENDM
    564 U7e00							;----------------
    565 U7e00
    566 U7e00					      MACRO	next_x
    567 U7e00				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    568 U7e00					      IF	[ _STK_LVL_2 == DOWN_TO ]
    569 U7e00					      DEX
    570 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    571 U7e00					      BNE	.loop
    572 U7e00					      ELSE
    573 U7e00					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
    574 U7e00					      BPL	.loop
    575 U7e00					      ELSE
    576 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    577 U7e00					      BMI	.loop
    578 U7e00					      ELSE
    579 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    580 U7e00					      CPX	_STK_LVL_3
    581 U7e00					      ELSE
    582 U7e00					      CPX	#_STK_LVL_3
    583 U7e00					      ENDIF
    584 U7e00					      BNE	.loop
    585 U7e00					      ENDIF
    586 U7e00					      ENDIF
    587 U7e00					      ENDIF
    588 U7e00					      ELSE		; UP_TO
    589 U7e00					      INX
    590 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    591 U7e00					      BNE	.loop
    592 U7e00					      ELSE
    593 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    594 U7e00					      BMI	.loop
    595 U7e00					      ELSE
    596 U7e00					      IF	[ _STK_LVL_3 == NEG_NRs ]
    597 U7e00					      BPL	.loop
    598 U7e00					      ELSE
    599 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    600 U7e00					      CPX	_STK_LVL_3
    601 U7e00					      ELSE
    602 U7e00					      CPX	#_STK_LVL_3
    603 U7e00					      ENDIF
    604 U7e00					      BNE	.loop
    605 U7e00					      ENDIF
    606 U7e00					      ENDIF
    607 U7e00					      ENDIF
    608 U7e00					      ENDIF
    609 U7e00					      INCLUDE	"STACKPOP3.ASM"
    610 U7e00					      ENDM
    611 U7e00							;----------------
    612 U7e00
    613 U7e00							;			  +--------------------+
    614 U7e00							;			  |   FOR_Y...NEXT_Y   |
    615 U7e00							;			  +====================+
    616 U7e00
    617 U7e00					      MACRO	for_y
    618 U7e00					      IF	[ !({1} == ACCUM || {1} == X_REG || {1} == Y_REG || {1} < $100) ]
    619 U7e00					      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
    620 U7e00					      ERR
    621 U7e00					      ENDIF
    622 U7e00					      IF	[ !({2} == UP_TO || {2} == DOWN_TO) ]
    623 U7e00					      ECHO	"Direction must be UP_TO or DOWN_TO"
    624 U7e00					      ERR
    625 U7e00					      ENDIF
    626 U7e00					      IF	[ {1} == ACCUM ]
    627 U7e00					      TAY
    628 U7e00					      ELSE
    629 U7e00					      IF	[ {1} == X_REG ]
    630 U7e00					      PHA
    631 U7e00					      TXA
    632 U7e00					      TAY
    633 U7e00					      PLA
    634 U7e00					      ELSE
    635 U7e00					      IF	[ {1} != Y_REG ]
    636 U7e00					      LDY	#{1}
    637 U7e00					      ENDIF
    638 U7e00					      ENDIF
    639 U7e00					      ENDIF
    640 U7e00				   _TO_PUSH_3 SET	{3}
    641 U7e00				   _TO_PUSH_2 SET	{2}
    642 U7e00				   _STRUCT_MAC_LABEL_1
    643 U7e00				   _TO_PUSH_1 SET	_STRUC_MAC_I
    644 U7e00				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    645 U7e00					      INCLUDE	"STKPUSH3.ASM"
    646 U7e00					      ENDM
    647 U7e00							;----------------
    648 U7e00
    649 U7e00					      MACRO	next_y
    650 U7e00				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
    651 U7e00					      IF	[ _STK_LVL_2 == DOWN_TO ]
    652 U7e00					      DEY
    653 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    654 U7e00					      BNE	.loop
    655 U7e00					      ELSE
    656 U7e00					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
    657 U7e00					      BPL	.loop
    658 U7e00					      ELSE
    659 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    660 U7e00					      BMI	.loop
    661 U7e00					      ELSE
    662 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    663 U7e00					      CPY	_STK_LVL_3
    664 U7e00					      ELSE
    665 U7e00					      CPY	#_STK_LVL_3
    666 U7e00					      ENDIF
    667 U7e00					      BNE	.loop
    668 U7e00					      ENDIF
    669 U7e00					      ENDIF
    670 U7e00					      ENDIF
    671 U7e00					      ELSE		; UP_TO
    672 U7e00					      INY
    673 U7e00					      IF	[ _STK_LVL_3 == 0 ]
    674 U7e00					      BNE	.loop
    675 U7e00					      ELSE
    676 U7e00					      IF	[ _STK_LVL_3 == POS_NRs ]
    677 U7e00					      BMI	.loop
    678 U7e00					      ELSE
    679 U7e00					      IF	[ _STK_LVL_3 == NEG_NRs ]
    680 U7e00					      BPL	.loop
    681 U7e00					      ELSE
    682 U7e00					      IF	[ _STK_LVL_3 > $102 ]
    683 U7e00					      CPY	_STK_LVL_3
    684 U7e00					      ELSE
    685 U7e00					      CPY	#_STK_LVL_3
    686 U7e00					      ENDIF
    687 U7e00					      BNE	.loop
    688 U7e00					      ENDIF
    689 U7e00					      ENDIF
    690 U7e00					      ENDIF
    691 U7e00					      ENDIF
    692 U7e00					      INCLUDE	"STACKPOP3.ASM"
    693 U7e00					      ENDM
    694 U7e00							;----------------
    695 U7e00
    696 U7e00							;			 +--------------------+
    697 U7e00							;			 |     Accessories    |
    698 U7e00							;			 +====================+
    699 U7e00
    700 U7e00					      MACRO	rts_if_eq
    701 U7e00					      BNE	.tmp
    702 U7e00					      RTS
    703 U7e00				   .tmp
    704 U7e00					      ENDM
    705 U7e00							;----------------
    706 U7e00
    707 U7e00					      MACRO	rts_if_ne
    708 U7e00					      BEQ	.tmp
    709 U7e00					      RTS
    710 U7e00				   .tmp
    711 U7e00					      ENDM
    712 U7e00							;----------------
    713 U7e00
    714 U7e00					      MACRO	rts_if_plus
    715 U7e00					      BMI	.tmp
    716 U7e00					      RTS
    717 U7e00				   .tmp
    718 U7e00					      ENDM
    719 U7e00							;----------------
    720 U7e00
    721 U7e00					      MACRO	rts_if_minus
    722 U7e00					      BPL	.tmp
    723 U7e00					      RTS
    724 U7e00				   .tmp
    725 U7e00					      ENDM
    726 U7e00							;----------------
    727 U7e00
    728 U7e00					      MACRO	rts_if_flag_var
    729 U7e00					      IF	![ {2} == IS_SET || {2} == IS_CLEAR ]
    730 U7e00					      ECHO	"Condition must be: IS_SET or IS_CLEAR"
    731 U7e00					      ERR
    732 U7e00					      ENDIF
    733 U7e00					      BIT	{1}
    734 U7e00					      IF	[ {2} == IS_SET ]
    735 U7e00					      BPL	.tmp
    736 U7e00					      ELSE
    737 U7e00					      BMI	.tmp
    738 U7e00					      ENDIF
    739 U7e00					      RTS
    740 U7e00				   .tmp
    741 U7e00					      ENDM
    742 U7e00							;----------------
    743 U7e00
    744 U7e00					      MACRO	rts_if_bit
    745 U7e00					      IF	[ {2} < 0 || {2} > 7 ]
    746 U7e00					      ECHO	"BIT_NR must be from 0 to 7"
    747 U7e00					      ERR
    748 U7e00					      ENDIF
    749 U7e00					      IF	![ {3} == IS_HIGH || {3} == IS_LOW ]
    750 U7e00					      ECHO	"Condition must be: IS_HIGH or IS_LOW"
    751 U7e00					      ERR
    752 U7e00					      ENDIF
    753 U7e00					      IF	[ {2} < 6 ]
    754 U7e00					      LDA	#[ 1 << {2} ]
    755 U7e00					      BIT	{1}
    756 U7e00					      IF	[ {3} == IS_HIGH ]
    757 U7e00					      BEQ	.tmp
    758 U7e00					      ELSE
    759 U7e00					      BNE	.tmp
    760 U7e00					      ENDIF
    761 U7e00					      ELSE
    762 U7e00					      BIT	{1}
    763 U7e00					      IF	[ {2} == 7 ]
    764 U7e00					      IF	[ {3} == IS_HIGH ]
    765 U7e00					      BPL	.tmp
    766 U7e00					      ELSE
    767 U7e00					      BMI	.tmp
    768 U7e00					      ENDIF
    769 U7e00					      ELSE
    770 U7e00					      IF	[ {3} == IS_HIGH ]
    771 U7e00					      BVC	.tmp
    772 U7e00					      ELSE
    773 U7e00					      BVS	.tmp
    774 U7e00					      ENDIF
    775 U7e00					      ENDIF
    776 U7e00					      ENDIF
    777 U7e00					      RTS
    778 U7e00				   .tmp
    779 U7e00					      ENDM
    780 U7e00							;----------------
    781 U7e00
    782 U7e00					      MACRO	rts_if_mem_loc
    783 U7e00					      IF	![ {2} == IS_POS || {2} == IS_NEG || {2} == IS_0 || {2} == IS_NON_0 ]
    784 U7e00					      ECHO	"Condition must be: IS_POS, IS_NEG, IS_0 or IS_NON_0"
    785 U7e00					      ERR
    786 U7e00					      ENDIF
    787 U7e00					      IF	[ {2} == IS_POS ]
    788 U7e00					      BIT	{1}
    789 U7e00					      BMI	.tmp
    790 U7e00					      ENDIF
    791 U7e00					      IF	[ {2} == IS_NEG ]
    792 U7e00					      BIT	{1}
    793 U7e00					      BPL	.tmp
    794 U7e00					      ENDIF
    795 U7e00					      IF	[ {2} == IS_0 ]
    796 U7e00					      LDY	{1}
    797 U7e00					      BNE	.tmp
    798 U7e00					      ENDIF
    799 U7e00					      IF	[ {2} == IS_NON_0 ]
    800 U7e00					      LDY	{1}
    801 U7e00					      BEQ	.tmp
    802 U7e00					      ENDIF
    803 U7e00					      RTS
    804 U7e00				   .tmp
    805 U7e00					      ENDM
    806 U7e00							;----------------
------- FILE ../std/std.asm
------- FILE macroses.asm LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	macroses.asm
      1 U7e00							; Writes two bytes into memory
      2 U7e00							; {1} - data
      3 U7e00							; {2} - addr
      4 U7e00					      MAC	write_word
      5 U7e00					      LDA	#<{1}
      6 U7e00					      STA	{2}
      7 U7e00					      LDA	#>{1}
      8 U7e00					      STA	{2}+1
      9 U7e00					      ENDM
     10 U7e00
     11 U7e00							; Copy two bytes from one memory location to another
     12 U7e00							; {1} - src location
     13 U7e00							; {2} - dst location
     14 U7e00					      MACRO	copy_2
     15 U7e00					      LDA	{1}
     16 U7e00					      STA	{2}
     17 U7e00					      LDA	{1}+1
     18 U7e00					      STA	{2}+1
     19 U7e00					      ENDM
     20 U7e00
     21 U7e00							; Copy four bytes from one memory location to another
     22 U7e00							; {1} - src location
     23 U7e00							; {2} - dst location
     24 U7e00					      MACRO	copy_4
     25 U7e00					      LDA	{1}
     26 U7e00					      STA	{2}
     27 U7e00					      LDA	{1}+1
     28 U7e00					      STA	{2}+1
     29 U7e00					      LDA	{1}+2
     30 U7e00					      STA	{2}+2
     31 U7e00					      LDA	{1}+3
     32 U7e00					      STA	{2}+3
     33 U7e00					      ENDM
     34 U7e00
     35 U7e00							; Setup reset vector
     36 U7e00							; {1} - reset
     37 U7e00							; {2} - IRQ
     38 U7e00							; {3} - NMI
     39 U7e00					      MAC	reset_vector
     40 U7e00					      ORG	$FFFA
     41 U7e00					      DC.W	{3}
     42 U7e00					      ORG	$FFFC
     43 U7e00					      DC.W	{1}
     44 U7e00					      ORG	$FFFE
     45 U7e00					      DC.W	{2}
     46 U7e00					      ENDM
     47 U7e00
     48 U7e00					      MAC	string
     49 U7e00					      DC	{1}
     50 U7e00					      DC	$0
     51 U7e00					      ENDM
------- FILE ../std/std.asm
------- FILE hardware.asm LEVEL 3 PASS 3
      0 U7e00					      INCLUDE	hardware.asm
------- FILE viaMacro.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	viaMacro.asm
      1 U7e00							; Add VIA registers
      2 U7e00							; {1} = name
      3 U7e00							; {2} = address
      4 U7e00					      MAC	define_via
      5 U7e00				   VIA_{1}_RB =	{2}
      6 U7e00				   VIA_{1}_RA =	{2}+1
      7 U7e00				   VIA_{1}_DDRB =	{2}+2
      8 U7e00				   VIA_{1}_DDRA =	{2}+3
      9 U7e00				   VIA_{1}_T1C_L =	{2}+4
     10 U7e00				   VIA_{1}_T1C_H =	{2}+5
     11 U7e00				   VIA_{1}_T1L_L =	{2}+6
     12 U7e00				   VIA_{1}_T1L_H =	{2}+7
     13 U7e00				   VIA_{1}_T2C_L =	{2}+8
     14 U7e00				   VIA_{1}_T2C_H =	{2}+9
     15 U7e00				   VIA_{1}_SR =	{2}+$A
     16 U7e00				   VIA_{1}_ACR =	{2}+$B
     17 U7e00				   VIA_{1}_PCR =	{2}+$C
     18 U7e00				   VIA_{1}_IFR =	{2}+$D
     19 U7e00				   VIA_{1}_IER =	{2}+$E
     20 U7e00				   VIA_{1}_ORA =	{2}+$F
     21 U7e00					      ENDM
------- FILE hardware.asm
      0 U7e00					      DEFINE_VIA	FIRST, %1000000000010000
      1 U7e00		       80 10	   VIA_FIRST_RB =	%1000000000010000
      2 U7e00		       80 11	   VIA_FIRST_RA =	%1000000000010000+1
      3 U7e00		       80 12	   VIA_FIRST_DDRB =	%1000000000010000+2
      4 U7e00		       80 13	   VIA_FIRST_DDRA =	%1000000000010000+3
      5 U7e00		       80 14	   VIA_FIRST_T1C_L =	%1000000000010000+4
      6 U7e00		       80 15	   VIA_FIRST_T1C_H =	%1000000000010000+5
      7 U7e00		       80 16	   VIA_FIRST_T1L_L =	%1000000000010000+6
      8 U7e00		       80 17	   VIA_FIRST_T1L_H =	%1000000000010000+7
      9 U7e00		       80 18	   VIA_FIRST_T2C_L =	%1000000000010000+8
     10 U7e00		       80 19	   VIA_FIRST_T2C_H =	%1000000000010000+9
     11 U7e00		       80 1a	   VIA_FIRST_SR =	%1000000000010000+$A
     12 U7e00		       80 1b	   VIA_FIRST_ACR =	%1000000000010000+$B
     13 U7e00		       80 1c	   VIA_FIRST_PCR =	%1000000000010000+$C
     14 U7e00		       80 1d	   VIA_FIRST_IFR =	%1000000000010000+$D
     15 U7e00		       80 1e	   VIA_FIRST_IER =	%1000000000010000+$E
     16 U7e00		       80 1f	   VIA_FIRST_ORA =	%1000000000010000+$F
      0 U7e00					      DEFINE_VIA	SECOND, %1000000001000000
      1 U7e00		       80 40	   VIA_SECOND_RB =	%1000000001000000
      2 U7e00		       80 41	   VIA_SECOND_RA =	%1000000001000000+1
      3 U7e00		       80 42	   VIA_SECOND_DDRB =	%1000000001000000+2
      4 U7e00		       80 43	   VIA_SECOND_DDRA =	%1000000001000000+3
      5 U7e00		       80 44	   VIA_SECOND_T1C_L =	%1000000001000000+4
      6 U7e00		       80 45	   VIA_SECOND_T1C_H =	%1000000001000000+5
      7 U7e00		       80 46	   VIA_SECOND_T1L_L =	%1000000001000000+6
      8 U7e00		       80 47	   VIA_SECOND_T1L_H =	%1000000001000000+7
      9 U7e00		       80 48	   VIA_SECOND_T2C_L =	%1000000001000000+8
     10 U7e00		       80 49	   VIA_SECOND_T2C_H =	%1000000001000000+9
     11 U7e00		       80 4a	   VIA_SECOND_SR =	%1000000001000000+$A
     12 U7e00		       80 4b	   VIA_SECOND_ACR =	%1000000001000000+$B
     13 U7e00		       80 4c	   VIA_SECOND_PCR =	%1000000001000000+$C
     14 U7e00		       80 4d	   VIA_SECOND_IFR =	%1000000001000000+$D
     15 U7e00		       80 4e	   VIA_SECOND_IER =	%1000000001000000+$E
     16 U7e00		       80 4f	   VIA_SECOND_ORA =	%1000000001000000+$F
      4 U7e00
------- FILE uartChip.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	uartChip.asm
      1 U7e00		       80 20	   UART_ADDR  =	%1000000000100000
      2 U7e00		       80 20	   UART_DATA_REG =	UART_ADDR
      3 U7e00		       80 21	   UART_STATUS_REG =	UART_ADDR + 1
      4 U7e00		       80 22	   UART_COMMAND_REG =	UART_ADDR + 2
      5 U7e00		       80 23	   UART_CONTROL_REG =	UART_ADDR + 3
      6 U7e00
      7 U7e00		       00 80	   UART_STATUS_INTERRUPT =	$80
      8 U7e00		       00 40	   UART_STATUS_DATA_SET_READY =	$40
      9 U7e00		       00 20	   UART_STATUS_DATA_CARRIER_DETECT =	$20
     10 U7e00		       00 10	   UART_STATUS_TRANSMITTER_DATA_REGISTER_EMPTY =	$10
     11 U7e00		       00 08	   UART_STATUS_RECEIVER_DATA_REGISTER_FULL =	$08
     12 U7e00		       00 04	   UART_STATUS_OVERRUN =	$04
     13 U7e00		       00 02	   UART_STATUS_FRAMING_ERROR =	$02
     14 U7e00		       00 01	   UART_STATUS_PARITY_ERROR =	$01
     15 U7e00
     16 U7e00							; 1 stop bit & parity, 8 bits word length, internal baud rate, 9600
     17 U7e00		       00 9e	   UART_CONTROL_DEFAULT =	%10011110
     18 U7e00
     19 U7e00		       00 00	   UART_COMMAND_RECEIVER_ODD_PARITY_CHECKED =	$00
     20 U7e00		       00 40	   UART_COMMAND_RECEIVER_EVEN_PARITY_CHECKED =	$40
     21 U7e00		       00 c0	   UART_COMMAND_RECEIVER_PARITY_CHECK_DISABLED =	$C0
     22 U7e00		       00 20	   UART_COMMAND_PARITY_MOD_ENABLED =	$20
     23 U7e00		       00 00	   UART_COMMAND_PARITY_MOD_DISABLED =	$0
     24 U7e00		       00 00	   UART_COMMAND_RECEIVER_NOMRAL_MOD =	$0
     25 U7e00		       00 10	   UART_COMMAND_RECEIVER_ECHO_MOD =	$10
     26 U7e00		       00 00	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED_FOR_ECHO =	0
     27 U7e00		       00 04	   UART_COMMAND_TRANSMIT_INTERRUPT_ENABLED =	$04
     28 U7e00		       00 08	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED =	$08
     29 U7e00		       00 0c	   UART_COMMAND_TRANSMIT_INTERRUPT_DISABLED_BREAK_ON_TXD =	$0C
     30 U7e00		       00 00	   UART_COMMAND_RECEIVER_INTERRUPT_REQUEST_ENABLED =	0
     31 U7e00		       00 02	   UART_COMMAND_RECEIVER_INTERRUPT_REQUEST_DISABLED =	$02
     32 U7e00		       00 01	   UART_COMMAND_DATA_TERMINAL_READY =	$01
     33 U7e00		       00 00	   UART_COMMAND_DATA_TERMINAL_NOT_READY =	0
------- FILE hardware.asm
------- FILE ../std/std.asm
------- FILE bootloader.asm
------- FILE fat.asm LEVEL 2 PASS 3
      0 U7e00					      INCLUDE	"fat.asm"
------- FILE sd_card.asm LEVEL 3 PASS 3
      0 U7e00					      include	sd_card.asm
------- FILE io_errors.asm LEVEL 4 PASS 3
      0 U7e00					      INCLUDE	"io_errors.asm"
      1 U7e00		       00 00	   IO_OK      =	$0
      2 U7e00		       00 01	   IO_END_OF_FILE =	$1
      3 U7e00		       00 02	   IO_FILE_NOT_FOUND =	$2
      4 U7e00		       00 03	   IO_INVALID_FILENAME_FORMAT =	$3
      5 U7e00		       00 04	   IO_SD_BUSY_BEFORE_GO_IDLE_STATE =	$4
      6 U7e00		       00 05	   IO_SD_BUSY_AFTER_GO_IDLE_STATE =	$5
      7 U7e00		       00 06	   IO_SD_NOT_IDLE_AFTER_GO_IDLE_STATE =	$6
      8 U7e00		       00 07	   IO_SD_BUSY_BEFORE_SEND_IF_COND =	$7
      9 U7e00		       00 08	   IO_SD_BUSY_AFTER_SEND_IF_COND =	$8
     10 U7e00		       00 09	   IO_SD_NOT_IDLE_AFTER_SEND_IF_COND =	$9
     11 U7e00		       00 0a	   IO_SD_BUSY_BEFORE_APP_CMD =	$A
     12 U7e00		       00 0b	   IO_SD_BUSY_AFTER_APP_CMD =	$B
     13 U7e00		       00 0c	   IO_SD_BUSY_BEFORE_APP_SEND_OP_COND =	$C
     14 U7e00		       00 0d	   IO_SD_BUSY_AFTER_APP_SEND_OP_COND =	$D
     15 U7e00		       00 0e	   IO_SD_ERROR_AFTER_APP_SEND_OP_COND =	$E
     16 U7e00		       00 0f	   IO_SD_BUSY_BEFORE_READ_SECTOR =	$F
     17 U7e00		       00 10	   IO_SD_BUSY_AFTER_READ_SECTOR =	$10
     18 U7e00		       00 11	   IO_SD_ERROR_AFTER_READ_SECTOR =	$11
     19 U7e00		       00 12	   IO_SD_DATA_TOKEN_DID_NOT_RECEIVED_AFTER_READ_SECTOR =	$12
     20 U7e00		       00 13	   IO_WRONG_BOOT_SIGNATURE =	$13
     21 U7e00		       00 14	   IO_WRONG_PARTITION_TYPE =	$14
     22 U7e00		       00 15	   IO_WRONG_BYTES_PER_LOGICAL_SECTOR =	$15
     23 U7e00		       00 16	   IO_WRONG_FATS_NUMBER =	$16
     24 U7e00		       00 17	   IO_WRONG_FAT_MEDIA_DESCRIPTOR =	$17
     25 U7e00		       00 18	   IO_ZERO_SECTORS_PER_CLUSTER =	$18
     26 U7e00		       00 19	   IO_FAT_END_OF_CLUSTERS =	$19
------- FILE sd_card.asm
      2 U7e00
      3 U7e00							; SD conntected to port B
      4 U7e00							; CS	- P7
      5 U7e00							; SCK	- CB1 / controlled by shift register
      6 U7e00							;   IO - CB2 / controlled by shift register
      7 U7e00							; MOSI - P7 = 0 / to SD
      8 U7e00							; MISO - P6 = 0 / from SD$A0
      9 U7e00
     10 U7e00							; 111XXXXX - disable SD
     11 U7e00							; 0XXXXXXX - enable SD
     12 U7e00							; X01XXXXX - read from SD
     13 U7e00							; X10XXXXX - write to SD
     14 U7e00
     15 U00c5					      SEG.U	zpVars
     16 U00c5		       00	   _response  ds	1
     17 U00c6		       00	   _sendByte  ds	1
     18 U00c7							; They must be sequential from CRC to CMD
     19 U00c7		       00	   _crc       ds	1
     20 U00c8		       00 00 00 00 _arg       ds	4
     21 U00c8		       00 c8	   sdSector   =	_arg
     22 U00c8		       00 c8	   _sdHalfPageStart =	_arg	; 2 bytes
     23 U00cc		       00	   _cmd       ds	1
     24 U00cd
     25 U7e00					      SEG.U	upperRam
     26 U7e00		       00 00 00 00*sdPageStart ds	512
     27 U8000
     28  f900					      SEG	code
     29  f900							; Changes X and Y
     30  f900				   INIT_SD
     31  f900							; Disable all interrupts
     32  f900							; I need a timer for uart logs
     33  f900							; LDA #$7F
     34  f900							; STA VIA_FIRST_IER
     35  f900							; Setup output pins
     36  f900		       a9 e0		      LDA	#%11100000
     37  f902		       8d 12 80 	      STA	VIA_FIRST_DDRB
     38  f905
     39  f905							; enable shift interrups
     40  f905		       a9 84		      LDA	#%10000100
     41  f907		       8d 1e 80 	      STA	VIA_FIRST_IER
     42  f90a
     43  f90a							; Disable SD
     44  f90a		       a9 e0		      LDA	#%11100000
     45  f90c		       8d 10 80 	      STA	VIA_FIRST_RB
     46  f90f							; Set CLOCK divider it's ~ 24
     47  f90f		       a9 14		      LDA	#20
     48  f911		       8d 18 80 	      STA	VIA_FIRST_T2C_L
     49  f914							; Wait > 1ms after power up
     50  f914		       20 ef f9 	      JSR	_WAIT
      0  f917					      FOR_Y	0, UP_TO, $10
      1  f917				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f917				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f917				  -	      ERR
      4  f917					      ENDIF
      5  f917				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f917				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f917				  -	      ERR
      8  f917					      ENDIF
      9  f917				  -	      IF	[ 0 == ACCUM ]
     10  f917				  -	      TAY
     11  f917					      ELSE
     12  f917				  -	      IF	[ 0 == X_REG ]
     13  f917				  -	      PHA
     14  f917				  -	      TXA
     15  f917				  -	      TAY
     16  f917				  -	      PLA
     17  f917					      ELSE
     18  f917					      IF	[ 0 != Y_REG ]
     19  f917		       a0 00		      LDY	#0
     20  f919					      ENDIF
     21  f919					      ENDIF
     22  f919					      ENDIF
     23  f919				   _TO_PUSH_3 SET	$10
     24  f919				   _TO_PUSH_2 SET	UP_TO
     25  f919				   _STRUCT_MAC_LABEL_1
     26  f919				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f919				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f919					      INCLUDE	"STKPUSH3.ASM"
     22  f919					      LIST	ON
------- FILE for_y
     52  f919		       20 07 fa 	      JSR	_DUMMY_CLOCK_WITH_DISABLED_CARD
      0  f91c					      NEXT_Y
      1  f91c				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f91c				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f91c				  -	      DEY
      4  f91c				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f91c				  -	      BNE	.loop
      6  f91c				  -	      ELSE
      7  f91c				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f91c				  -	      BPL	.loop
      9  f91c				  -	      ELSE
     10  f91c				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f91c				  -	      BMI	.loop
     12  f91c				  -	      ELSE
     13  f91c				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f91c				  -	      CPY	_STK_LVL_3
     15  f91c				  -	      ELSE
     16  f91c				  -	      CPY	#_STK_LVL_3
     17  f91c				  -	      ENDIF
     18  f91c				  -	      BNE	.loop
     19  f91c				  -	      ENDIF
     20  f91c				  -	      ENDIF
     21  f91c				  -	      ENDIF
     22  f91c					      ELSE
     23  f91c		       c8		      INY
     24  f91d				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f91d				  -	      BNE	.loop
     26  f91d					      ELSE
     27  f91d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f91d				  -	      BMI	.loop
     29  f91d					      ELSE
     30  f91d				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f91d				  -	      BPL	.loop
     32  f91d					      ELSE
     33  f91d				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f91d				  -	      CPY	_STK_LVL_3
     35  f91d					      ELSE
     36  f91d		       c0 10		      CPY	#_STK_LVL_3
     37  f91f					      ENDIF
     38  f91f		       d0 f8		      BNE	.loop
     39  f921					      ENDIF
     40  f921					      ENDIF
     41  f921					      ENDIF
     42  f921					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f921					      INCLUDE	"STACKPOP3.ASM"
     19  f921					      LIST	ON
------- FILE next_y
     54  f921							; ===== CMD0 with retry =====
     55  f921							; Try to switch it into idle several times
     56  f921		       a9 f0		      LDA	#$f0
     57  f923		       48		      PHA
      0  f924					      BEGIN
      1  f924				   _STRUCT_MAC_LABEL_2
      2  f924				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f924				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f924					      INCLUDE	"STACKPUSH.ASM"
     22  f924					      LIST	ON
------- FILE begin
     59  f924		       20 1f fa 	      JSR	_CMD_GO_IDLE_STATE
     60  f927		       f0 0a		      BEQ	.sdIsIdle
     61  f929		       a8		      TAY		; We need to save A for return
     62  f92a							; Decrement counter in the stack
     63  f92a		       ba		      TSX
     64  f92b		       de 01 01 	      DEC	$101,X
      0  f92e					      UNTIL_ZERO
      0  f92e					      UNTIL_EQ
      1  f92e				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f92e		       d0 f4		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f930					      INCLUDE	"STACKPOP.ASM"
     21  f930					      LIST	ON
------- FILE until_eq
     66  f930		       68		      PLA		; pull retry counter back
     67  f931		       98		      TYA		; restore command exit code
     68  f932		       60		      RTS
     69  f933				   .sdIsIdle
     70  f933		       68		      PLA		; pull retry counter back
     71  f934							; ===== CMD8 with retry =====
     72  f934							; It seems that I need to retry everything
     73  f934		       a9 f0		      LDA	#$f0
     74  f936		       48		      PHA
      0  f937					      BEGIN
      1  f937				   _STRUCT_MAC_LABEL_3
      2  f937				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f937				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f937					      INCLUDE	"STACKPUSH.ASM"
     22  f937					      LIST	ON
------- FILE begin
     76  f937		       20 53 fa 	      JSR	_CMD_SEND_IF_COND
     77  f93a		       f0 0a		      BEQ	.turnOn
     78  f93c		       a8		      TAY
     79  f93d		       ba		      TSX
     80  f93e		       de 01 01 	      DEC	$101,X
      0  f941					      UNTIL_ZERO
      0  f941					      UNTIL_EQ
      1  f941				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f941		       d0 f4		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f943					      INCLUDE	"STACKPOP.ASM"
     21  f943					      LIST	ON
------- FILE until_eq
     82  f943		       68		      PLA		; pull retry counter back
     83  f944		       98		      TYA		; restore command exit code
     84  f945		       60		      RTS
     85  f946				   .turnOn
     86  f946		       68		      PLA		; pull retry counter back
     87  f947							; ===== ACMD41 with retry =====
     88  f947							; Try is several times
     89  f947		       a9 f0		      LDA	#$f0
     90  f949		       48		      PHA
      0  f94a					      BEGIN
      1  f94a				   _STRUCT_MAC_LABEL_4
      2  f94a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f94a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f94a					      INCLUDE	"STACKPUSH.ASM"
     22  f94a					      LIST	ON
------- FILE begin
     92  f94a		       20 98 fa 	      JSR	_CMD_APP_SEND_OP_COND
      0  f94d					      IF_ZERO
      0  f94d					      IF_EQ
      1  f94d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f94d		       d0 09		      BNE	.tmp
      3  f94d				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f94d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f94f					      INCLUDE	"STACKPUSH.ASM"
     22  f94f					      LIST	ON
------- FILE if_eq
     94  f94f		       a8		      TAY
     95  f950							; It's initialized. I can speed up
     96  f950		       a9 00		      LDA	#0
     97  f952		       8d 18 80 	      STA	VIA_FIRST_T2C_L
     98  f955		       68		      PLA
     99  f956		       98		      TYA
    100  f957		       60		      RTS
      0  f958					      END_IF
      1  f958				   _STRUCT_MAC_LABEL_5
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f958					      INCLUDE	"STACKPOP.ASM"
     21  f958					      LIST	ON
------- FILE end_if
    102  f958		       48		      PHA
    103  f959		       20 ef f9 	      JSR	_WAIT
    104  f95c		       68		      PLA
    105  f95d		       a8		      TAY		; We need to save A for return
    106  f95e							; Decrement counter in the stack
    107  f95e		       ba		      TSX
    108  f95f		       de 01 01 	      DEC	$101,X
      0  f962					      UNTIL_ZERO
      0  f962					      UNTIL_EQ
      1  f962				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f962		       d0 e6		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f964					      INCLUDE	"STACKPOP.ASM"
     21  f964					      LIST	ON
------- FILE until_eq
    110  f964		       68		      PLA		; pull retry counter back
    111  f965		       98		      TYA		; restore command exit code
    112  f966		       60		      RTS
    113  f967
    114  f967							; You must have prepared sdSector
    115  f967							; Changes X and Y
    116  f967				   READ_SD_SECTOR
    117  f967		       a9 f0		      LDA	#$F0	; retry everything
    118  f969		       48		      PHA
      0  f96a					      BEGIN
      1  f96a				   _STRUCT_MAC_LABEL_6
      2  f96a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  f96a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f96a					      INCLUDE	"STACKPUSH.ASM"
     22  f96a					      LIST	ON
------- FILE begin
    120  f96a		       20 7c f9 	      JSR	_READ_SD_SECTOR_INSIDE_RETRY
    121  f96d		       a8		      TAY
      0  f96e					      IF_ZERO
      0  f96e					      IF_EQ
      1  f96e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f96e		       d0 03		      BNE	.tmp
      3  f96e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f96e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f970					      INCLUDE	"STACKPUSH.ASM"
     22  f970					      LIST	ON
------- FILE if_eq
    123  f970		       68		      PLA		; pull retry counter
    124  f971		       98		      TYA		; restore zero for return
    125  f972		       60		      RTS
      0  f973					      END_IF
      1  f973				   _STRUCT_MAC_LABEL_7
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f973					      INCLUDE	"STACKPOP.ASM"
     21  f973					      LIST	ON
------- FILE end_if
    127  f973		       ba		      TSX
    128  f974		       de 01 01 	      DEC	$101,X
      0  f977					      UNTIL_ZERO
      0  f977					      UNTIL_EQ
      1  f977				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f977		       d0 f1		      BNE	.tmp
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f979					      INCLUDE	"STACKPOP.ASM"
     21  f979					      LIST	ON
------- FILE until_eq
    130  f979		       68		      PLA		; pull retry counter back
    131  f97a		       98		      TYA		; restore command exit code
    132  f97b		       60		      RTS
    133  f97c
    134  f97c				   _READ_SD_SECTOR_INSIDE_RETRY
    135  f97c		       a9 51		      LDA	#[ 17 | $40 ]
    136  f97e		       85 cc		      STA	_cmd
    137  f980							; _arg is prepared
    138  f980							; _crc is not checked, so I don't care
    139  f980		       20 e2 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
      0  f983					      IF_NEQ
      1  f983				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f983		       f0 0f		      BEQ	.tmp
      3  f983				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f983				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f985					      INCLUDE	"STACKPUSH.ASM"
     22  f985					      LIST	ON
------- FILE if_neq
    141  f985		       48		      PHA
    142  f986		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    143  f989		       68		      PLA
      0  f98a					      IF_NEG
      0  f98a					      IF_MINUS
      1  f98a				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f98a		       10 05		      BPL	.tmp
      3  f98a				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f98a				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f98c					      INCLUDE	"STACKPUSH.ASM"
     22  f98c					      LIST	ON
------- FILE if_minus
    145  f98c		       a9 10		      LDA	#IO_SD_BUSY_AFTER_READ_SECTOR
      0  f98e					      ELSE_
      1  f98e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f98e		       4c 93 f9 	      JMP	.tmp
      3  f991				   _STRUCT_MAC_LABEL_9
      4  f991				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  f991				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    147  f991		       a9 0f		      LDA	#IO_SD_BUSY_BEFORE_READ_SECTOR
      0  f993					      END_IF
      1  f993				   _STRUCT_MAC_LABEL_10
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f993					      INCLUDE	"STACKPOP.ASM"
     21  f993					      LIST	ON
------- FILE end_if
    149  f993		       60		      RTS
      0  f994					      END_IF
      1  f994				   _STRUCT_MAC_LABEL_8
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f994					      INCLUDE	"STACKPOP.ASM"
     21  f994					      LIST	ON
------- FILE end_if
    151  f994		       a5 c5		      LDA	_response
      0  f996					      IF_NEQ
      1  f996				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  f996		       f0 06		      BEQ	.tmp
      3  f996				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  f996				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  f998					      INCLUDE	"STACKPUSH.ASM"
     22  f998					      LIST	ON
------- FILE if_neq
    153  f998		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    154  f99b		       a9 11		      LDA	#IO_SD_ERROR_AFTER_READ_SECTOR
    155  f99d		       60		      RTS
      0  f99e					      END_IF
      1  f99e				   _STRUCT_MAC_LABEL_11
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  f99e					      INCLUDE	"STACKPOP.ASM"
     21  f99e					      LIST	ON
------- FILE end_if
    157  f99e							; Wait for data token
    158  f99e		       20 2b fb 	      JSR	_SET_READ_FROM_SD
    159  f9a1		       20 3d fb 	      JSR	_READ_FROM_SD	; I have to trigger shift reading
    160  f9a4					      SUBROUTINE
      0  f9a4					      FOR_X	0, UP_TO, $F0
      1  f9a4				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9a4				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9a4				  -	      ERR
      4  f9a4					      ENDIF
      5  f9a4				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9a4				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9a4				  -	      ERR
      8  f9a4					      ENDIF
      9  f9a4				  -	      IF	[ 0 == ACCUM ]
     10  f9a4				  -	      TAX
     11  f9a4					      ELSE
     12  f9a4				  -	      IF	[ 0 == Y_REG ]
     13  f9a4				  -	      PHA
     14  f9a4				  -	      TYA
     15  f9a4				  -	      TAX
     16  f9a4				  -	      PLA
     17  f9a4					      ELSE
     18  f9a4					      IF	[ 0 != X_REG ]
     19  f9a4		       a2 00		      LDX	#0
     20  f9a6					      ENDIF
     21  f9a6					      ENDIF
     22  f9a6					      ENDIF
     23  f9a6				   _TO_PUSH_3 SET	$F0
     24  f9a6				   _TO_PUSH_2 SET	UP_TO
     25  f9a6				   _STRUCT_MAC_LABEL_12
     26  f9a6				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9a6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9a6					      INCLUDE	"STKPUSH3.ASM"
     22  f9a6					      LIST	ON
------- FILE for_x
    162  f9a6		       8a		      TXA
    163  f9a7		       48		      PHA
      0  f9a8					      FOR_Y	0, UP_TO, $F0
      1  f9a8				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9a8				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9a8				  -	      ERR
      4  f9a8					      ENDIF
      5  f9a8				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9a8				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9a8				  -	      ERR
      8  f9a8					      ENDIF
      9  f9a8				  -	      IF	[ 0 == ACCUM ]
     10  f9a8				  -	      TAY
     11  f9a8					      ELSE
     12  f9a8				  -	      IF	[ 0 == X_REG ]
     13  f9a8				  -	      PHA
     14  f9a8				  -	      TXA
     15  f9a8				  -	      TAY
     16  f9a8				  -	      PLA
     17  f9a8					      ELSE
     18  f9a8					      IF	[ 0 != Y_REG ]
     19  f9a8		       a0 00		      LDY	#0
     20  f9aa					      ENDIF
     21  f9aa					      ENDIF
     22  f9aa					      ENDIF
     23  f9aa				   _TO_PUSH_3 SET	$F0
     24  f9aa				   _TO_PUSH_2 SET	UP_TO
     25  f9aa				   _STRUCT_MAC_LABEL_13
     26  f9aa				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9aa				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9aa					      INCLUDE	"STKPUSH3.ASM"
     22  f9aa					      LIST	ON
------- FILE for_y
    165  f9aa		       20 3d fb 	      JSR	_READ_FROM_SD
    166  f9ad		       a5 c5		      LDA	_response
    167  f9af		       c9 fe		      CMP	#$FE	; Data token for CMD 17/18/24
    168  f9b1		       f0 12		      BEQ	.dataTokenReceived
      0  f9b3					      NEXT_Y
      1  f9b3				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9b3				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9b3				  -	      DEY
      4  f9b3				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9b3				  -	      BNE	.loop
      6  f9b3				  -	      ELSE
      7  f9b3				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9b3				  -	      BPL	.loop
      9  f9b3				  -	      ELSE
     10  f9b3				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9b3				  -	      BMI	.loop
     12  f9b3				  -	      ELSE
     13  f9b3				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9b3				  -	      CPY	_STK_LVL_3
     15  f9b3				  -	      ELSE
     16  f9b3				  -	      CPY	#_STK_LVL_3
     17  f9b3				  -	      ENDIF
     18  f9b3				  -	      BNE	.loop
     19  f9b3				  -	      ENDIF
     20  f9b3				  -	      ENDIF
     21  f9b3				  -	      ENDIF
     22  f9b3					      ELSE
     23  f9b3		       c8		      INY
     24  f9b4				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9b4				  -	      BNE	.loop
     26  f9b4					      ELSE
     27  f9b4				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9b4				  -	      BMI	.loop
     29  f9b4					      ELSE
     30  f9b4				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9b4				  -	      BPL	.loop
     32  f9b4					      ELSE
     33  f9b4				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9b4				  -	      CPY	_STK_LVL_3
     35  f9b4					      ELSE
     36  f9b4		       c0 f0		      CPY	#_STK_LVL_3
     37  f9b6					      ENDIF
     38  f9b6		       d0 f2		      BNE	.loop
     39  f9b8					      ENDIF
     40  f9b8					      ENDIF
     41  f9b8					      ENDIF
     42  f9b8					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9b8					      INCLUDE	"STACKPOP3.ASM"
     19  f9b8					      LIST	ON
------- FILE next_y
    170  f9b8		       68		      PLA
    171  f9b9		       aa		      TAX
      0  f9ba					      NEXT_X
      1  f9ba				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9ba				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9ba				  -	      DEX
      4  f9ba				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9ba				  -	      BNE	.loop
      6  f9ba				  -	      ELSE
      7  f9ba				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9ba				  -	      BPL	.loop
      9  f9ba				  -	      ELSE
     10  f9ba				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9ba				  -	      BMI	.loop
     12  f9ba				  -	      ELSE
     13  f9ba				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9ba				  -	      CPX	_STK_LVL_3
     15  f9ba				  -	      ELSE
     16  f9ba				  -	      CPX	#_STK_LVL_3
     17  f9ba				  -	      ENDIF
     18  f9ba				  -	      BNE	.loop
     19  f9ba				  -	      ENDIF
     20  f9ba				  -	      ENDIF
     21  f9ba				  -	      ENDIF
     22  f9ba					      ELSE
     23  f9ba		       e8		      INX
     24  f9bb				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9bb				  -	      BNE	.loop
     26  f9bb					      ELSE
     27  f9bb				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9bb				  -	      BMI	.loop
     29  f9bb					      ELSE
     30  f9bb				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9bb				  -	      BPL	.loop
     32  f9bb					      ELSE
     33  f9bb				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9bb				  -	      CPX	_STK_LVL_3
     35  f9bb					      ELSE
     36  f9bb		       e0 f0		      CPX	#_STK_LVL_3
     37  f9bd					      ENDIF
     38  f9bd		       d0 e7		      BNE	.loop
     39  f9bf					      ENDIF
     40  f9bf					      ENDIF
     41  f9bf					      ENDIF
     42  f9bf					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9bf					      INCLUDE	"STACKPOP3.ASM"
     19  f9bf					      LIST	ON
------- FILE next_x
    173  f9bf		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    174  f9c2		       a9 12		      LDA	#IO_SD_DATA_TOKEN_DID_NOT_RECEIVED_AFTER_READ_SECTOR
    175  f9c4		       60		      RTS
    176  f9c5				   .dataTokenReceived
    177  f9c5		       68		      PLA		; pull the stored X
      0  f9c6					      WRITE_WORD	sdPageStart, _sdHalfPageStart
      1  f9c6		       a9 00		      LDA	#<sdPageStart
      2  f9c8		       85 c8		      STA	_sdHalfPageStart
      3  f9ca		       a9 7e		      LDA	#>sdPageStart
      4  f9cc		       85 c9		      STA	_sdHalfPageStart+1
    179  f9ce		       20 e2 f9 	      JSR	_READ_A_PAGE_FROM_SD
    180  f9d1		       e6 c9		      INC	_sdHalfPageStart+1
    181  f9d3		       20 e2 f9 	      JSR	_READ_A_PAGE_FROM_SD
    182  f9d6							; reading CRC
    183  f9d6		       20 3d fb 	      JSR	_READ_FROM_SD
    184  f9d9		       20 3d fb 	      JSR	_READ_FROM_SD
    185  f9dc
    186  f9dc		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    187  f9df		       a9 00		      LDA	#IO_OK
    188  f9e1		       60		      RTS
    189  f9e2
    190  f9e2				   _READ_A_PAGE_FROM_SD
      0  f9e2					      FOR_Y	0, UP_TO, 0
      1  f9e2				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9e2				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9e2				  -	      ERR
      4  f9e2					      ENDIF
      5  f9e2				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9e2				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9e2				  -	      ERR
      8  f9e2					      ENDIF
      9  f9e2				  -	      IF	[ 0 == ACCUM ]
     10  f9e2				  -	      TAY
     11  f9e2					      ELSE
     12  f9e2				  -	      IF	[ 0 == X_REG ]
     13  f9e2				  -	      PHA
     14  f9e2				  -	      TXA
     15  f9e2				  -	      TAY
     16  f9e2				  -	      PLA
     17  f9e2					      ELSE
     18  f9e2					      IF	[ 0 != Y_REG ]
     19  f9e2		       a0 00		      LDY	#0
     20  f9e4					      ENDIF
     21  f9e4					      ENDIF
     22  f9e4					      ENDIF
     23  f9e4				   _TO_PUSH_3 SET	0
     24  f9e4				   _TO_PUSH_2 SET	UP_TO
     25  f9e4				   _STRUCT_MAC_LABEL_14
     26  f9e4				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9e4				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9e4					      INCLUDE	"STKPUSH3.ASM"
     22  f9e4					      LIST	ON
------- FILE for_y
    192  f9e4		       20 3d fb 	      JSR	_READ_FROM_SD
    193  f9e7		       a5 c5		      LDA	_response
    194  f9e9		       91 c8		      STA	(_sdHalfPageStart),Y
      0  f9eb					      NEXT_Y
      1  f9eb				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9eb				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9eb				  -	      DEY
      4  f9eb				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9eb				  -	      BNE	.loop
      6  f9eb				  -	      ELSE
      7  f9eb				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9eb				  -	      BPL	.loop
      9  f9eb				  -	      ELSE
     10  f9eb				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9eb				  -	      BMI	.loop
     12  f9eb				  -	      ELSE
     13  f9eb				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9eb				  -	      CPY	_STK_LVL_3
     15  f9eb				  -	      ELSE
     16  f9eb				  -	      CPY	#_STK_LVL_3
     17  f9eb				  -	      ENDIF
     18  f9eb				  -	      BNE	.loop
     19  f9eb				  -	      ENDIF
     20  f9eb				  -	      ENDIF
     21  f9eb				  -	      ENDIF
     22  f9eb					      ELSE
     23  f9eb		       c8		      INY
     24  f9ec					      IF	[ _STK_LVL_3 == 0 ]
     25  f9ec		       d0 f6		      BNE	.loop
     26  f9ee				  -	      ELSE
     27  f9ee				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9ee				  -	      BMI	.loop
     29  f9ee				  -	      ELSE
     30  f9ee				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9ee				  -	      BPL	.loop
     32  f9ee				  -	      ELSE
     33  f9ee				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9ee				  -	      CPY	_STK_LVL_3
     35  f9ee				  -	      ELSE
     36  f9ee				  -	      CPY	#_STK_LVL_3
     37  f9ee				  -	      ENDIF
     38  f9ee				  -	      BNE	.loop
     39  f9ee				  -	      ENDIF
     40  f9ee				  -	      ENDIF
     41  f9ee					      ENDIF
     42  f9ee					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9ee					      INCLUDE	"STACKPOP3.ASM"
     19  f9ee					      LIST	ON
------- FILE next_y
    196  f9ee		       60		      RTS
    197  f9ef
    198  f9ef							; Changes X and Y
    199  f9ef				   _WAIT
      0  f9ef					      FOR_X	0, UP_TO, 95
      1  f9ef				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9ef				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9ef				  -	      ERR
      4  f9ef					      ENDIF
      5  f9ef				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9ef				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9ef				  -	      ERR
      8  f9ef					      ENDIF
      9  f9ef				  -	      IF	[ 0 == ACCUM ]
     10  f9ef				  -	      TAX
     11  f9ef					      ELSE
     12  f9ef				  -	      IF	[ 0 == Y_REG ]
     13  f9ef				  -	      PHA
     14  f9ef				  -	      TYA
     15  f9ef				  -	      TAX
     16  f9ef				  -	      PLA
     17  f9ef					      ELSE
     18  f9ef					      IF	[ 0 != X_REG ]
     19  f9ef		       a2 00		      LDX	#0
     20  f9f1					      ENDIF
     21  f9f1					      ENDIF
     22  f9f1					      ENDIF
     23  f9f1				   _TO_PUSH_3 SET	95
     24  f9f1				   _TO_PUSH_2 SET	UP_TO
     25  f9f1				   _STRUCT_MAC_LABEL_15
     26  f9f1				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9f1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9f1					      INCLUDE	"STKPUSH3.ASM"
     22  f9f1					      LIST	ON
------- FILE for_x
      0  f9f1					      FOR_Y	0, UP_TO, 100
      1  f9f1				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  f9f1				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  f9f1				  -	      ERR
      4  f9f1					      ENDIF
      5  f9f1				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  f9f1				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  f9f1				  -	      ERR
      8  f9f1					      ENDIF
      9  f9f1				  -	      IF	[ 0 == ACCUM ]
     10  f9f1				  -	      TAY
     11  f9f1					      ELSE
     12  f9f1				  -	      IF	[ 0 == X_REG ]
     13  f9f1				  -	      PHA
     14  f9f1				  -	      TXA
     15  f9f1				  -	      TAY
     16  f9f1				  -	      PLA
     17  f9f1					      ELSE
     18  f9f1					      IF	[ 0 != Y_REG ]
     19  f9f1		       a0 00		      LDY	#0
     20  f9f3					      ENDIF
     21  f9f3					      ENDIF
     22  f9f3					      ENDIF
     23  f9f3				   _TO_PUSH_3 SET	100
     24  f9f3				   _TO_PUSH_2 SET	UP_TO
     25  f9f3				   _STRUCT_MAC_LABEL_16
     26  f9f3				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  f9f3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  f9f3					      INCLUDE	"STKPUSH3.ASM"
     22  f9f3					      LIST	ON
------- FILE for_y
    202  f9f3							; nothing
      0  f9f3					      NEXT_Y
      1  f9f3				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9f3				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9f3				  -	      DEY
      4  f9f3				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9f3				  -	      BNE	.loop
      6  f9f3				  -	      ELSE
      7  f9f3				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9f3				  -	      BPL	.loop
      9  f9f3				  -	      ELSE
     10  f9f3				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9f3				  -	      BMI	.loop
     12  f9f3				  -	      ELSE
     13  f9f3				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9f3				  -	      CPY	_STK_LVL_3
     15  f9f3				  -	      ELSE
     16  f9f3				  -	      CPY	#_STK_LVL_3
     17  f9f3				  -	      ENDIF
     18  f9f3				  -	      BNE	.loop
     19  f9f3				  -	      ENDIF
     20  f9f3				  -	      ENDIF
     21  f9f3				  -	      ENDIF
     22  f9f3					      ELSE
     23  f9f3		       c8		      INY
     24  f9f4				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9f4				  -	      BNE	.loop
     26  f9f4					      ELSE
     27  f9f4				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9f4				  -	      BMI	.loop
     29  f9f4					      ELSE
     30  f9f4				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9f4				  -	      BPL	.loop
     32  f9f4					      ELSE
     33  f9f4				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9f4				  -	      CPY	_STK_LVL_3
     35  f9f4					      ELSE
     36  f9f4		       c0 64		      CPY	#_STK_LVL_3
     37  f9f6					      ENDIF
     38  f9f6		       d0 fb		      BNE	.loop
     39  f9f8					      ENDIF
     40  f9f8					      ENDIF
     41  f9f8					      ENDIF
     42  f9f8					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9f8					      INCLUDE	"STACKPOP3.ASM"
     19  f9f8					      LIST	ON
------- FILE next_y
      0  f9f8					      NEXT_X
      1  f9f8				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  f9f8				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  f9f8				  -	      DEX
      4  f9f8				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  f9f8				  -	      BNE	.loop
      6  f9f8				  -	      ELSE
      7  f9f8				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  f9f8				  -	      BPL	.loop
      9  f9f8				  -	      ELSE
     10  f9f8				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  f9f8				  -	      BMI	.loop
     12  f9f8				  -	      ELSE
     13  f9f8				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  f9f8				  -	      CPX	_STK_LVL_3
     15  f9f8				  -	      ELSE
     16  f9f8				  -	      CPX	#_STK_LVL_3
     17  f9f8				  -	      ENDIF
     18  f9f8				  -	      BNE	.loop
     19  f9f8				  -	      ENDIF
     20  f9f8				  -	      ENDIF
     21  f9f8				  -	      ENDIF
     22  f9f8					      ELSE
     23  f9f8		       e8		      INX
     24  f9f9				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  f9f9				  -	      BNE	.loop
     26  f9f9					      ELSE
     27  f9f9				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  f9f9				  -	      BMI	.loop
     29  f9f9					      ELSE
     30  f9f9				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  f9f9				  -	      BPL	.loop
     32  f9f9					      ELSE
     33  f9f9				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  f9f9				  -	      CPX	_STK_LVL_3
     35  f9f9					      ELSE
     36  f9f9		       e0 5f		      CPX	#_STK_LVL_3
     37  f9fb					      ENDIF
     38  f9fb		       d0 f4		      BNE	.loop
     39  f9fd					      ENDIF
     40  f9fd					      ENDIF
     41  f9fd					      ENDIF
     42  f9fd					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  f9fd					      INCLUDE	"STACKPOP3.ASM"
     19  f9fd					      LIST	ON
------- FILE next_x
    205  f9fd		       60		      RTS
    206  f9fe
    207  f9fe							; Changes X
    208  f9fe				   _DISABLE_SD_AFTER_OPERATION
    209  f9fe		       a5 c5		      LDA	_response
    210  fa00		       48		      PHA
    211  fa01		       20 3d fb 	      JSR	_READ_FROM_SD
    212  fa04		       68		      PLA
    213  fa05		       85 c5		      STA	_response
    214  fa07							; proceed with dummy clock
    215  fa07
    216  fa07							; Changes Y
    217  fa07				   _DUMMY_CLOCK_WITH_DISABLED_CARD
    218  fa07		       a5 c5		      LDA	_response
    219  fa09		       48		      PHA
    220  fa0a							; CS = DI = HIGH
    221  fa0a		       a9 e0		      LDA	#%11100000
    222  fa0c		       8d 10 80 	      STA	VIA_FIRST_RB
    223  fa0f		       a9 04		      LDA	#%00000100
    224  fa11		       8d 1b 80 	      STA	VIA_FIRST_ACR
    225  fa14		       78		      SEI
    226  fa15		       ad 1a 80 	      LDA	VIA_FIRST_SR	; trigger shifting
    227  fa18		       20 43 fb 	      JSR	_WAIT_FOR_SHIFT_FLAG
    228  fa1b		       68		      PLA
    229  fa1c		       85 c5		      STA	_response
    230  fa1e		       60		      RTS
    231  fa1f
    232  fa1f							; CMD 0
    233  fa1f							; Changes X & Y
    234  fa1f				   _CMD_GO_IDLE_STATE
    235  fa1f		       a9 40		      LDA	#[ 0 | $40 ]
    236  fa21		       85 cc		      STA	_cmd
    237  fa23		       a9 00		      LDA	#0
    238  fa25		       85 c8		      STA	_arg
    239  fa27		       85 c9		      STA	_arg+1
    240  fa29		       85 ca		      STA	_arg+2
    241  fa2b		       85 cb		      STA	_arg+3
    242  fa2d		       a9 95		      LDA	#$95
    243  fa2f		       85 c7		      STA	_crc
    244  fa31		       20 e2 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    245  fa34		       48		      PHA
    246  fa35		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    247  fa38		       68		      PLA
      0  fa39					      IF_NEQ
      1  fa39				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa39		       f0 0a		      BEQ	.tmp
      3  fa39				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa39				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa3b					      INCLUDE	"STACKPUSH.ASM"
     22  fa3b					      LIST	ON
------- FILE if_neq
      0  fa3b					      IF_NEG
      0  fa3b					      IF_MINUS
      1  fa3b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa3b		       10 05		      BPL	.tmp
      3  fa3b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa3b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa3d					      INCLUDE	"STACKPUSH.ASM"
     22  fa3d					      LIST	ON
------- FILE if_minus
    250  fa3d		       a9 05		      LDA	#IO_SD_BUSY_AFTER_GO_IDLE_STATE
      0  fa3f					      ELSE_
      1  fa3f				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa3f		       4c 44 fa 	      JMP	.tmp
      3  fa42				   _STRUCT_MAC_LABEL_18
      4  fa42				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa42				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    252  fa42		       a9 04		      LDA	#IO_SD_BUSY_BEFORE_GO_IDLE_STATE
      0  fa44					      END_IF
      1  fa44				   _STRUCT_MAC_LABEL_19
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa44					      INCLUDE	"STACKPOP.ASM"
     21  fa44					      LIST	ON
------- FILE end_if
    254  fa44		       60		      RTS
      0  fa45					      END_IF
      1  fa45				   _STRUCT_MAC_LABEL_17
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa45					      INCLUDE	"STACKPOP.ASM"
     21  fa45					      LIST	ON
------- FILE end_if
    256  fa45		       a5 c5		      LDA	_response
    257  fa47		       c9 01		      CMP	#1	; R1 idle
      0  fa49					      IF_EQ
      1  fa49				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa49		       d0 05		      BNE	.tmp
      3  fa49				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa49				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa4b					      INCLUDE	"STACKPUSH.ASM"
     22  fa4b					      LIST	ON
------- FILE if_eq
    259  fa4b		       a9 00		      LDA	#_SD_OK
      0  fa4d					      ELSE_
      1  fa4d				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa4d		       4c 52 fa 	      JMP	.tmp
      3  fa50				   _STRUCT_MAC_LABEL_20
      4  fa50				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa50				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    261  fa50		       a9 06		      LDA	#IO_SD_NOT_IDLE_AFTER_GO_IDLE_STATE
      0  fa52					      END_IF
      1  fa52				   _STRUCT_MAC_LABEL_21
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa52					      INCLUDE	"STACKPOP.ASM"
     21  fa52					      LIST	ON
------- FILE end_if
    263  fa52		       60		      RTS
    264  fa53
    265  fa53							; CMD 8
    266  fa53							; Changes X & Y
    267  fa53				   _CMD_SEND_IF_COND
    268  fa53		       a9 48		      LDA	#[ 8 | $40 ]
    269  fa55		       85 cc		      STA	_cmd
    270  fa57		       a9 aa		      LDA	#$AA
    271  fa59		       85 c8		      STA	_arg
    272  fa5b		       a9 01		      LDA	#1
    273  fa5d		       85 c9		      STA	_arg+1
    274  fa5f		       a9 87		      LDA	#$87
    275  fa61		       85 c7		      STA	_crc
    276  fa63		       20 e2 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    277  fa66		       48		      PHA
    278  fa67		       a5 c5		      LDA	_response
    279  fa69		       48		      PHA
    280  fa6a							; Read 32 bits of data
    281  fa6a		       20 2b fb 	      JSR	_SET_READ_FROM_SD
      0  fa6d					      FOR_Y	0, UP_TO, 4
      1  fa6d				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fa6d				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fa6d				  -	      ERR
      4  fa6d					      ENDIF
      5  fa6d				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fa6d				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fa6d				  -	      ERR
      8  fa6d					      ENDIF
      9  fa6d				  -	      IF	[ 0 == ACCUM ]
     10  fa6d				  -	      TAY
     11  fa6d					      ELSE
     12  fa6d				  -	      IF	[ 0 == X_REG ]
     13  fa6d				  -	      PHA
     14  fa6d				  -	      TXA
     15  fa6d				  -	      TAY
     16  fa6d				  -	      PLA
     17  fa6d					      ELSE
     18  fa6d					      IF	[ 0 != Y_REG ]
     19  fa6d		       a0 00		      LDY	#0
     20  fa6f					      ENDIF
     21  fa6f					      ENDIF
     22  fa6f					      ENDIF
     23  fa6f				   _TO_PUSH_3 SET	4
     24  fa6f				   _TO_PUSH_2 SET	UP_TO
     25  fa6f				   _STRUCT_MAC_LABEL_22
     26  fa6f				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fa6f				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fa6f					      INCLUDE	"STKPUSH3.ASM"
     22  fa6f					      LIST	ON
------- FILE for_y
    283  fa6f		       20 3d fb 	      JSR	_READ_FROM_SD
      0  fa72					      NEXT_Y
      1  fa72				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fa72				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fa72				  -	      DEY
      4  fa72				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fa72				  -	      BNE	.loop
      6  fa72				  -	      ELSE
      7  fa72				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fa72				  -	      BPL	.loop
      9  fa72				  -	      ELSE
     10  fa72				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fa72				  -	      BMI	.loop
     12  fa72				  -	      ELSE
     13  fa72				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fa72				  -	      CPY	_STK_LVL_3
     15  fa72				  -	      ELSE
     16  fa72				  -	      CPY	#_STK_LVL_3
     17  fa72				  -	      ENDIF
     18  fa72				  -	      BNE	.loop
     19  fa72				  -	      ENDIF
     20  fa72				  -	      ENDIF
     21  fa72				  -	      ENDIF
     22  fa72					      ELSE
     23  fa72		       c8		      INY
     24  fa73				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fa73				  -	      BNE	.loop
     26  fa73					      ELSE
     27  fa73				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fa73				  -	      BMI	.loop
     29  fa73					      ELSE
     30  fa73				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fa73				  -	      BPL	.loop
     32  fa73					      ELSE
     33  fa73				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fa73				  -	      CPY	_STK_LVL_3
     35  fa73					      ELSE
     36  fa73		       c0 04		      CPY	#_STK_LVL_3
     37  fa75					      ENDIF
     38  fa75		       d0 f8		      BNE	.loop
     39  fa77					      ENDIF
     40  fa77					      ENDIF
     41  fa77					      ENDIF
     42  fa77					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fa77					      INCLUDE	"STACKPOP3.ASM"
     19  fa77					      LIST	ON
------- FILE next_y
    285  fa77		       68		      PLA
    286  fa78		       85 c5		      STA	_response
    287  fa7a		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    288  fa7d		       68		      PLA
      0  fa7e					      IF_NEQ
      1  fa7e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa7e		       f0 0a		      BEQ	.tmp
      3  fa7e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa7e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa80					      INCLUDE	"STACKPUSH.ASM"
     22  fa80					      LIST	ON
------- FILE if_neq
      0  fa80					      IF_NEG
      0  fa80					      IF_MINUS
      1  fa80				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa80		       10 05		      BPL	.tmp
      3  fa80				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa80				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa82					      INCLUDE	"STACKPUSH.ASM"
     22  fa82					      LIST	ON
------- FILE if_minus
    291  fa82		       a9 08		      LDA	#IO_SD_BUSY_AFTER_SEND_IF_COND
      0  fa84					      ELSE_
      1  fa84				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa84		       4c 89 fa 	      JMP	.tmp
      3  fa87				   _STRUCT_MAC_LABEL_24
      4  fa87				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa87				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    293  fa87		       a9 07		      LDA	#IO_SD_BUSY_BEFORE_SEND_IF_COND
      0  fa89					      END_IF
      1  fa89				   _STRUCT_MAC_LABEL_25
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa89					      INCLUDE	"STACKPOP.ASM"
     21  fa89					      LIST	ON
------- FILE end_if
    295  fa89		       60		      RTS
      0  fa8a					      END_IF
      1  fa8a				   _STRUCT_MAC_LABEL_23
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa8a					      INCLUDE	"STACKPOP.ASM"
     21  fa8a					      LIST	ON
------- FILE end_if
    297  fa8a		       a5 c5		      LDA	_response
    298  fa8c		       c9 01		      CMP	#1	; R1 idle
      0  fa8e					      IF_EQ
      1  fa8e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa8e		       d0 05		      BNE	.tmp
      3  fa8e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fa8e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fa90					      INCLUDE	"STACKPUSH.ASM"
     22  fa90					      LIST	ON
------- FILE if_eq
    300  fa90		       a9 00		      LDA	#_SD_OK
      0  fa92					      ELSE_
      1  fa92				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fa92		       4c 97 fa 	      JMP	.tmp
      3  fa95				   _STRUCT_MAC_LABEL_26
      4  fa95				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fa95				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    302  fa95		       a9 09		      LDA	#IO_SD_NOT_IDLE_AFTER_SEND_IF_COND
      0  fa97					      END_IF
      1  fa97				   _STRUCT_MAC_LABEL_27
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fa97					      INCLUDE	"STACKPOP.ASM"
     21  fa97					      LIST	ON
------- FILE end_if
    304  fa97		       60		      RTS
    305  fa98
    306  fa98							; CMD 41
    307  fa98				   _CMD_APP_SEND_OP_COND
    308  fa98							; Send CMD41 with leading CMD55
    309  fa98		       a9 77		      LDA	#[ 55 | $40 ]
    310  fa9a		       85 cc		      STA	_cmd
    311  fa9c		       a9 00		      LDA	#0
    312  fa9e		       85 c8		      STA	_arg
    313  faa0		       85 c9		      STA	_arg+1
    314  faa2		       85 ca		      STA	_arg+2
    315  faa4		       85 cb		      STA	_arg+3
    316  faa6		       a9 65		      LDA	#$65
    317  faa8		       85 c7		      STA	_crc
    318  faaa		       20 e2 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    319  faad		       48		      PHA
    320  faae							; JSR _DISABLE_SD_AFTER_OPERATION
    321  faae		       68		      PLA
      0  faaf					      IF_NEQ
      1  faaf				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  faaf		       f0 0a		      BEQ	.tmp
      3  faaf				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  faaf				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fab1					      INCLUDE	"STACKPUSH.ASM"
     22  fab1					      LIST	ON
------- FILE if_neq
      0  fab1					      IF_NEG
      0  fab1					      IF_MINUS
      1  fab1				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fab1		       10 05		      BPL	.tmp
      3  fab1				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fab1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fab3					      INCLUDE	"STACKPUSH.ASM"
     22  fab3					      LIST	ON
------- FILE if_minus
    324  fab3		       a9 0b		      LDA	#IO_SD_BUSY_AFTER_APP_CMD
      0  fab5					      ELSE_
      1  fab5				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fab5		       4c ba fa 	      JMP	.tmp
      3  fab8				   _STRUCT_MAC_LABEL_29
      4  fab8				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fab8				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    326  fab8		       a9 0a		      LDA	#IO_SD_BUSY_BEFORE_APP_CMD
      0  faba					      END_IF
      1  faba				   _STRUCT_MAC_LABEL_30
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  faba					      INCLUDE	"STACKPOP.ASM"
     21  faba					      LIST	ON
------- FILE end_if
    328  faba		       60		      RTS
      0  fabb					      END_IF
      1  fabb				   _STRUCT_MAC_LABEL_28
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fabb					      INCLUDE	"STACKPOP.ASM"
     21  fabb					      LIST	ON
------- FILE end_if
    330  fabb
    331  fabb		       a9 69		      LDA	#[ 41 | $40 ]
    332  fabd		       85 cc		      STA	_cmd
    333  fabf		       a9 40		      LDA	#$40
    334  fac1		       85 cb		      STA	_arg+3
    335  fac3		       a9 77		      LDA	#$77
    336  fac5		       85 c7		      STA	_crc
    337  fac7		       20 e2 fa 	      JSR	_SEND_SD_COMMAND_AND_WAIT_R1
    338  faca		       48		      PHA
    339  facb		       20 fe f9 	      JSR	_DISABLE_SD_AFTER_OPERATION
    340  face		       68		      PLA
      0  facf					      IF_NEQ
      1  facf				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  facf		       f0 0a		      BEQ	.tmp
      3  facf				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  facf				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fad1					      INCLUDE	"STACKPUSH.ASM"
     22  fad1					      LIST	ON
------- FILE if_neq
      0  fad1					      IF_NEG
      0  fad1					      IF_MINUS
      1  fad1				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fad1		       10 05		      BPL	.tmp
      3  fad1				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fad1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fad3					      INCLUDE	"STACKPUSH.ASM"
     22  fad3					      LIST	ON
------- FILE if_minus
    343  fad3		       a9 0d		      LDA	#IO_SD_BUSY_AFTER_APP_SEND_OP_COND
      0  fad5					      ELSE_
      1  fad5				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fad5		       4c da fa 	      JMP	.tmp
      3  fad8				   _STRUCT_MAC_LABEL_32
      4  fad8				   _STK_LVL_1 SET	_STRUC_MAC_I
      5  fad8				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
    345  fad8		       a9 0c		      LDA	#IO_SD_BUSY_BEFORE_APP_SEND_OP_COND
      0  fada					      END_IF
      1  fada				   _STRUCT_MAC_LABEL_33
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fada					      INCLUDE	"STACKPOP.ASM"
     21  fada					      LIST	ON
------- FILE end_if
    347  fada		       60		      RTS
      0  fadb					      END_IF
      1  fadb				   _STRUCT_MAC_LABEL_31
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fadb					      INCLUDE	"STACKPOP.ASM"
     21  fadb					      LIST	ON
------- FILE end_if
    349  fadb		       a5 c5		      LDA	_response
      0  fadd					      IF_NEQ
      1  fadd				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fadd		       f0 02		      BEQ	.tmp
      3  fadd				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fadd				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 4 PASS 3
      0  fadf					      INCLUDE	"STACKPUSH.ASM"
     22  fadf					      LIST	ON
------- FILE if_neq
    351  fadf		       a9 0e		      LDA	#IO_SD_ERROR_AFTER_APP_SEND_OP_COND
      0  fae1					      END_IF
      1  fae1				   _STRUCT_MAC_LABEL_34
------- FILE STACKPOP.ASM LEVEL 4 PASS 3
      0  fae1					      INCLUDE	"STACKPOP.ASM"
     21  fae1					      LIST	ON
------- FILE end_if
    353  fae1		       60		      RTS
    354  fae2
    355  fae2		       00 00	   _SD_OK     =	0
    356  fae2		       00 01	   _SD_BUSY_BEFORE_COMMAND =	1
    357  fae2							; For negative flag
    358  fae2		       00 ff	   _SD_BUSY_AFTER_COMMAND =	$FF
    359  fae2							; Changes X and Y
    360  fae2				   _SEND_SD_COMMAND_AND_WAIT_R1
    361  fae2					      SUBROUTINE
    362  fae2		       20 2b fb 	      JSR	_SET_READ_FROM_SD
      0  fae5					      FOR_Y	0, UP_TO, $F0
      1  fae5				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fae5				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fae5				  -	      ERR
      4  fae5					      ENDIF
      5  fae5				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fae5				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fae5				  -	      ERR
      8  fae5					      ENDIF
      9  fae5				  -	      IF	[ 0 == ACCUM ]
     10  fae5				  -	      TAY
     11  fae5					      ELSE
     12  fae5				  -	      IF	[ 0 == X_REG ]
     13  fae5				  -	      PHA
     14  fae5				  -	      TXA
     15  fae5				  -	      TAY
     16  fae5				  -	      PLA
     17  fae5					      ELSE
     18  fae5					      IF	[ 0 != Y_REG ]
     19  fae5		       a0 00		      LDY	#0
     20  fae7					      ENDIF
     21  fae7					      ENDIF
     22  fae7					      ENDIF
     23  fae7				   _TO_PUSH_3 SET	$F0
     24  fae7				   _TO_PUSH_2 SET	UP_TO
     25  fae7				   _STRUCT_MAC_LABEL_35
     26  fae7				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fae7				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fae7					      INCLUDE	"STKPUSH3.ASM"
     22  fae7					      LIST	ON
------- FILE for_y
    364  fae7		       20 3d fb 	      JSR	_READ_FROM_SD
    365  faea		       a5 c5		      LDA	_response
    366  faec		       c9 ff		      CMP	#$FF
    367  faee		       f0 08		      BEQ	.notBusy
      0  faf0					      NEXT_Y
      1  faf0				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  faf0				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  faf0				  -	      DEY
      4  faf0				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  faf0				  -	      BNE	.loop
      6  faf0				  -	      ELSE
      7  faf0				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  faf0				  -	      BPL	.loop
      9  faf0				  -	      ELSE
     10  faf0				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  faf0				  -	      BMI	.loop
     12  faf0				  -	      ELSE
     13  faf0				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  faf0				  -	      CPY	_STK_LVL_3
     15  faf0				  -	      ELSE
     16  faf0				  -	      CPY	#_STK_LVL_3
     17  faf0				  -	      ENDIF
     18  faf0				  -	      BNE	.loop
     19  faf0				  -	      ENDIF
     20  faf0				  -	      ENDIF
     21  faf0				  -	      ENDIF
     22  faf0					      ELSE
     23  faf0		       c8		      INY
     24  faf1				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  faf1				  -	      BNE	.loop
     26  faf1					      ELSE
     27  faf1				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  faf1				  -	      BMI	.loop
     29  faf1					      ELSE
     30  faf1				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  faf1				  -	      BPL	.loop
     32  faf1					      ELSE
     33  faf1				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  faf1				  -	      CPY	_STK_LVL_3
     35  faf1					      ELSE
     36  faf1		       c0 f0		      CPY	#_STK_LVL_3
     37  faf3					      ENDIF
     38  faf3		       d0 f2		      BNE	.loop
     39  faf5					      ENDIF
     40  faf5					      ENDIF
     41  faf5					      ENDIF
     42  faf5					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  faf5					      INCLUDE	"STACKPOP3.ASM"
     19  faf5					      LIST	ON
------- FILE next_y
    369  faf5		       a9 01		      LDA	#_SD_BUSY_BEFORE_COMMAND
    370  faf7		       60		      RTS
    371  faf8				   .notBusy
    372  faf8							; JSR _DISABLE_SD_AFTER_OPERATION
    373  faf8							; It's ready. Sending command, arg and crc
    374  faf8							; They are sequential in RAM
    375  faf8		       20 20 fb 	      JSR	_SET_WRITE_TO_SD
      0  fafb					      FOR_Y	5, DOWN_TO, NEG_NRs
      1  fafb				  -	      IF	[ !(5 == ACCUM || 5 == X_REG || 5 == Y_REG || 5 < $100) ]
      2  fafb				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fafb				  -	      ERR
      4  fafb					      ENDIF
      5  fafb				  -	      IF	[ !(DOWN_TO == UP_TO || DOWN_TO == DOWN_TO) ]
      6  fafb				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fafb				  -	      ERR
      8  fafb					      ENDIF
      9  fafb				  -	      IF	[ 5 == ACCUM ]
     10  fafb				  -	      TAY
     11  fafb					      ELSE
     12  fafb				  -	      IF	[ 5 == X_REG ]
     13  fafb				  -	      PHA
     14  fafb				  -	      TXA
     15  fafb				  -	      TAY
     16  fafb				  -	      PLA
     17  fafb					      ELSE
     18  fafb					      IF	[ 5 != Y_REG ]
     19  fafb		       a0 05		      LDY	#5
     20  fafd					      ENDIF
     21  fafd					      ENDIF
     22  fafd					      ENDIF
     23  fafd				   _TO_PUSH_3 SET	NEG_NRs
     24  fafd				   _TO_PUSH_2 SET	DOWN_TO
     25  fafd				   _STRUCT_MAC_LABEL_36
     26  fafd				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fafd				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fafd					      INCLUDE	"STKPUSH3.ASM"
     22  fafd					      LIST	ON
------- FILE for_y
    377  fafd		       b9 c7 00 	      LDA	_crc,Y
    378  fb00		       20 36 fb 	      JSR	_WRITE_TO_SD
      0  fb03					      NEXT_Y
      1  fb03				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fb03					      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fb03		       88		      DEY
      4  fb04				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fb04				  -	      BNE	.loop
      6  fb04					      ELSE
      7  fb04					      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fb04		       10 f7		      BPL	.loop
      9  fb06				  -	      ELSE
     10  fb06				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb06				  -	      BMI	.loop
     12  fb06				  -	      ELSE
     13  fb06				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb06				  -	      CPY	_STK_LVL_3
     15  fb06				  -	      ELSE
     16  fb06				  -	      CPY	#_STK_LVL_3
     17  fb06				  -	      ENDIF
     18  fb06				  -	      BNE	.loop
     19  fb06				  -	      ENDIF
     20  fb06					      ENDIF
     21  fb06					      ENDIF
     22  fb06				  -	      ELSE
     23  fb06				  -	      INY
     24  fb06				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb06				  -	      BNE	.loop
     26  fb06				  -	      ELSE
     27  fb06				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb06				  -	      BMI	.loop
     29  fb06				  -	      ELSE
     30  fb06				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb06				  -	      BPL	.loop
     32  fb06				  -	      ELSE
     33  fb06				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb06				  -	      CPY	_STK_LVL_3
     35  fb06				  -	      ELSE
     36  fb06				  -	      CPY	#_STK_LVL_3
     37  fb06				  -	      ENDIF
     38  fb06				  -	      BNE	.loop
     39  fb06				  -	      ENDIF
     40  fb06				  -	      ENDIF
     41  fb06				  -	      ENDIF
     42  fb06					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fb06					      INCLUDE	"STACKPOP3.ASM"
     19  fb06					      LIST	ON
------- FILE next_y
    380  fb06							; We need to wait for R1 response
    381  fb06							; It starts with 0 in 7th bit
    382  fb06		       20 2b fb 	      JSR	_SET_READ_FROM_SD
    383  fb09		       20 3d fb 	      JSR	_READ_FROM_SD	; to trigger shift in
      0  fb0c					      FOR_Y	0, UP_TO, $F0
      1  fb0c				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fb0c				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fb0c				  -	      ERR
      4  fb0c					      ENDIF
      5  fb0c				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fb0c				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fb0c				  -	      ERR
      8  fb0c					      ENDIF
      9  fb0c				  -	      IF	[ 0 == ACCUM ]
     10  fb0c				  -	      TAY
     11  fb0c					      ELSE
     12  fb0c				  -	      IF	[ 0 == X_REG ]
     13  fb0c				  -	      PHA
     14  fb0c				  -	      TXA
     15  fb0c				  -	      TAY
     16  fb0c				  -	      PLA
     17  fb0c					      ELSE
     18  fb0c					      IF	[ 0 != Y_REG ]
     19  fb0c		       a0 00		      LDY	#0
     20  fb0e					      ENDIF
     21  fb0e					      ENDIF
     22  fb0e					      ENDIF
     23  fb0e				   _TO_PUSH_3 SET	$F0
     24  fb0e				   _TO_PUSH_2 SET	UP_TO
     25  fb0e				   _STRUCT_MAC_LABEL_37
     26  fb0e				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fb0e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 4 PASS 3
      0  fb0e					      INCLUDE	"STKPUSH3.ASM"
     22  fb0e					      LIST	ON
------- FILE for_y
    385  fb0e		       20 3d fb 	      JSR	_READ_FROM_SD
    386  fb11		       a5 c5		      LDA	_response
    387  fb13		       10 08		      BPL	.r1Received
      0  fb15					      NEXT_Y
      1  fb15				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fb15				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fb15				  -	      DEY
      4  fb15				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fb15				  -	      BNE	.loop
      6  fb15				  -	      ELSE
      7  fb15				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fb15				  -	      BPL	.loop
      9  fb15				  -	      ELSE
     10  fb15				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb15				  -	      BMI	.loop
     12  fb15				  -	      ELSE
     13  fb15				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb15				  -	      CPY	_STK_LVL_3
     15  fb15				  -	      ELSE
     16  fb15				  -	      CPY	#_STK_LVL_3
     17  fb15				  -	      ENDIF
     18  fb15				  -	      BNE	.loop
     19  fb15				  -	      ENDIF
     20  fb15				  -	      ENDIF
     21  fb15				  -	      ENDIF
     22  fb15					      ELSE
     23  fb15		       c8		      INY
     24  fb16				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb16				  -	      BNE	.loop
     26  fb16					      ELSE
     27  fb16				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb16				  -	      BMI	.loop
     29  fb16					      ELSE
     30  fb16				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb16				  -	      BPL	.loop
     32  fb16					      ELSE
     33  fb16				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb16				  -	      CPY	_STK_LVL_3
     35  fb16					      ELSE
     36  fb16		       c0 f0		      CPY	#_STK_LVL_3
     37  fb18					      ENDIF
     38  fb18		       d0 f4		      BNE	.loop
     39  fb1a					      ENDIF
     40  fb1a					      ENDIF
     41  fb1a					      ENDIF
     42  fb1a					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 4 PASS 3
      0  fb1a					      INCLUDE	"STACKPOP3.ASM"
     19  fb1a					      LIST	ON
------- FILE next_y
    389  fb1a		       a9 ff		      LDA	#_SD_BUSY_AFTER_COMMAND
    390  fb1c		       60		      RTS
    391  fb1d				   .r1Received
    392  fb1d		       a9 00		      LDA	#_SD_OK
    393  fb1f		       60		      RTS
    394  fb20
    395  fb20				   _SET_WRITE_TO_SD
    396  fb20		       a9 14		      LDA	#%00010100
    397  fb22		       8d 1b 80 	      STA	VIA_FIRST_ACR
    398  fb25		       a9 40		      LDA	#%01000000
    399  fb27		       8d 10 80 	      STA	VIA_FIRST_RB
    400  fb2a		       60		      RTS
    401  fb2b
    402  fb2b				   _SET_READ_FROM_SD
    403  fb2b		       a9 04		      LDA	#%00000100
    404  fb2d		       8d 1b 80 	      STA	VIA_FIRST_ACR
    405  fb30		       a9 20		      LDA	#%00100000
    406  fb32		       8d 10 80 	      STA	VIA_FIRST_RB
    407  fb35		       60		      RTS
    408  fb36
    409  fb36							; Write A to SD card
    410  fb36				   _WRITE_TO_SD
    411  fb36		       78		      SEI
    412  fb37		       8d 1a 80 	      STA	VIA_FIRST_SR
    413  fb3a		       4c 43 fb 	      JMP	_WAIT_FOR_SHIFT_FLAG
    414  fb3d
    415  fb3d				   _READ_FROM_SD
    416  fb3d		       78		      SEI
    417  fb3e		       ad 1a 80 	      LDA	VIA_FIRST_SR	; read SR to trigger shift in
    418  fb41		       85 c5		      STA	_response
    419  fb43							; JMP _WAIT_FOR_SHIFT_FLAG
    420  fb43
    421  fb43				   _WAIT_FOR_SHIFT_FLAG
    422  fb43					      SUBROUTINE
    423  fb43		       a9 04		      LDA	#%00000100
    424  fb45				   .loop
    425  fb45		       2c 1d 80 	      BIT	VIA_FIRST_IFR
    426  fb48		       f0 fb		      BEQ	.loop
    427  fb4a		       8d 1d 80 	      STA	VIA_FIRST_IFR
    428  fb4d		       58		      CLI
    429  fb4e		       60		      RTS
------- FILE fat.asm
      2  fb4f
      3  fb4f		       01 fe	   _BOOT_SECTOR_SIGNATURE_OFFSET =	$1FE	; 2 bytes: 55 aa
      4  fb4f		       01 be	   _PARTITION_OFFSET =	$1BE	; 16 bytes per record, 4 records
      5  fb4f		       00 04	   _PARTITION_TYPE_OFFSET =	$4	; 1 byte
      6  fb4f		       00 08	   _PARTITION_START_LBA_OFFSET =	$8	; 4 bytes
      7  fb4f
      8  fb4f		       00 0b	   _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST =	$B	; 2 bytes
      9  fb4f		       00 0d	   _FAT_FIRST_SECTOR_SECTORS_PER_CLUSTER_OFFEST =	$D	; 1 byte
     10  fb4f		       00 0e	   _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET =	$E	; 2 bytes
     11  fb4f		       00 10	   _FAT_FIRST_SECTOR_NUBMER_OF_FATs_OFFSET =	$10	; 1 byte
     12  fb4f		       00 15	   _FAT_FIRST_SECTOR_MEDIA_DESCRIPTOR_OFFSET =	$15	; 1 byte
     13  fb4f		       00 20	   _FAT_FIRST_SECTOR_TOTAL_LOGICAL_SECTORS_OFFSET =	$20	; 4 bytes
     14  fb4f		       00 24	   _FAT_FIRST_SECTOR_LOGICAL_SECTORS_PER_FAT_OFFSET =	$24	; 4 bytes
     15  fb4f		       00 2c	   _FAT_FIRST_SECTOR_ROOT_DIRECTORY_CLUSTER_NUMBER_OFFSET =	$2C	; 4 bytes
     16  fb4f		       00 30	   _FAT_FRIST_SECTOR_FS_INFORMATION_SECTOR_NUMBER_OFFSET =	$30	; 2 bytes
     17  fb4f
     18  fb4f		       00 14	   _DIR_RECORD_HIGH_START_CLUSTER_OFFSET =	$14	; 2 bytes
     19  fb4f		       00 1a	   _DIR_RECORD_LOW_START_CLUSTER_OFFSET =	$1a	; 2 bytes
     20  fb4f		       00 1c	   _DIR_RECORD_FILE_SIZE_OFFSET =	$1c	; 4 bytes
     21  fb4f		       00 0b	   _DIR_RECORD_FLAGS_OFFSET =	$B	; 1 byte
     22  fb4f		       00 20	   _DIR_RECORD_SIZE =	32
     23  fb4f		       00 e5	   _DIR_RECORD_REMOVED_FILE_NAME =	$E5
     24  fb4f		       00 0f	   _DIR_RECORD_VFAT_FLAG =	$0F
     25  fb4f
     26  fb4f					      SEG	code
     27  fb4f				   INIT_FAT
     28  fb4f					      SUBROUTINE
     29  fb4f		       20 00 f9 	      JSR	INIT_SD
      0  fb52					      RTS_IF_NE
      1  fb52		       f0 01		      BEQ	.tmp
      2  fb54		       60		      RTS
      3  fb55				   .tmp
     31  fb55
     32  fb55							; Read boot sector
     33  fb55							; A = 0 already
     34  fb55		       85 c8		      STA	sdSector
     35  fb57		       85 c9		      STA	sdSector+1
     36  fb59		       85 ca		      STA	sdSector+2
     37  fb5b		       85 cb		      STA	sdSector+3
     38  fb5d		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fb60					      RTS_IF_NE
      1  fb60		       f0 01		      BEQ	.tmp
      2  fb62		       60		      RTS
      3  fb63				   .tmp
     40  fb63
     41  fb63							; Check boot sector signature
     42  fb63		       ad fe 7f 	      LDA	sdPageStart + _BOOT_SECTOR_SIGNATURE_OFFSET
     43  fb66		       c9 55		      CMP	#$55
     44  fb68		       d0 07		      BNE	.wrongBootSign
     45  fb6a		       ad ff 7f 	      LDA	sdPageStart + _BOOT_SECTOR_SIGNATURE_OFFSET+1
     46  fb6d		       c9 aa		      CMP	#$AA
     47  fb6f		       f0 03		      BEQ	.goodBootSign
     48  fb71				   .wrongBootSign
     49  fb71		       a9 13		      LDA	#IO_WRONG_BOOT_SIGNATURE
     50  fb73		       60		      RTS
     51  fb74				   .goodBootSign
     52  fb74
     53  fb74							; Check partition type
     54  fb74		       ad c2 7f 	      LDA	sdPageStart + _PARTITION_OFFSET + _PARTITION_TYPE_OFFSET
     55  fb77		       c9 0c		      CMP	#$0C
      0  fb79					      IF_NEQ
      1  fb79				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fb79		       f0 03		      BEQ	.tmp
      3  fb79				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fb79				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fb7b					      INCLUDE	"STACKPUSH.ASM"
     22  fb7b					      LIST	ON
------- FILE if_neq
     57  fb7b		       a9 14		      LDA	#IO_WRONG_PARTITION_TYPE
     58  fb7d		       60		      RTS
      0  fb7e					      END_IF
      1  fb7e				   _STRUCT_MAC_LABEL_38
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fb7e					      INCLUDE	"STACKPOP.ASM"
     21  fb7e					      LIST	ON
------- FILE end_if
     60  fb7e
     61  fb7e							; Read partition start
      0  fb7e					      FOR_X	0, UP_TO, 4
      1  fb7e				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fb7e				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fb7e				  -	      ERR
      4  fb7e					      ENDIF
      5  fb7e				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fb7e				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fb7e				  -	      ERR
      8  fb7e					      ENDIF
      9  fb7e				  -	      IF	[ 0 == ACCUM ]
     10  fb7e				  -	      TAX
     11  fb7e					      ELSE
     12  fb7e				  -	      IF	[ 0 == Y_REG ]
     13  fb7e				  -	      PHA
     14  fb7e				  -	      TYA
     15  fb7e				  -	      TAX
     16  fb7e				  -	      PLA
     17  fb7e					      ELSE
     18  fb7e					      IF	[ 0 != X_REG ]
     19  fb7e		       a2 00		      LDX	#0
     20  fb80					      ENDIF
     21  fb80					      ENDIF
     22  fb80					      ENDIF
     23  fb80				   _TO_PUSH_3 SET	4
     24  fb80				   _TO_PUSH_2 SET	UP_TO
     25  fb80				   _STRUCT_MAC_LABEL_39
     26  fb80				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fb80				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fb80					      INCLUDE	"STKPUSH3.ASM"
     22  fb80					      LIST	ON
------- FILE for_x
     63  fb80		       bd c6 7f 	      LDA	[sdPageStart + _PARTITION_OFFSET + _PARTITION_START_LBA_OFFSET],X
     64  fb83		       95 c8		      STA	sdSector,X
     65  fb85		       95 cf		      STA	_fatSector,X
      0  fb87					      NEXT_X
      1  fb87				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fb87				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fb87				  -	      DEX
      4  fb87				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fb87				  -	      BNE	.loop
      6  fb87				  -	      ELSE
      7  fb87				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fb87				  -	      BPL	.loop
      9  fb87				  -	      ELSE
     10  fb87				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fb87				  -	      BMI	.loop
     12  fb87				  -	      ELSE
     13  fb87				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fb87				  -	      CPX	_STK_LVL_3
     15  fb87				  -	      ELSE
     16  fb87				  -	      CPX	#_STK_LVL_3
     17  fb87				  -	      ENDIF
     18  fb87				  -	      BNE	.loop
     19  fb87				  -	      ENDIF
     20  fb87				  -	      ENDIF
     21  fb87				  -	      ENDIF
     22  fb87					      ELSE
     23  fb87		       e8		      INX
     24  fb88				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fb88				  -	      BNE	.loop
     26  fb88					      ELSE
     27  fb88				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fb88				  -	      BMI	.loop
     29  fb88					      ELSE
     30  fb88				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fb88				  -	      BPL	.loop
     32  fb88					      ELSE
     33  fb88				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fb88				  -	      CPX	_STK_LVL_3
     35  fb88					      ELSE
     36  fb88		       e0 04		      CPX	#_STK_LVL_3
     37  fb8a					      ENDIF
     38  fb8a		       d0 f4		      BNE	.loop
     39  fb8c					      ENDIF
     40  fb8c					      ENDIF
     41  fb8c					      ENDIF
     42  fb8c					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fb8c					      INCLUDE	"STACKPOP3.ASM"
     19  fb8c					      LIST	ON
------- FILE next_x
     67  fb8c		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fb8f					      RTS_IF_NE
      1  fb8f		       f0 01		      BEQ	.tmp
      2  fb91		       60		      RTS
      3  fb92				   .tmp
     69  fb92
     70  fb92							; Read FAT first sector
     71  fb92							; Read bytes per logical sector
     72  fb92		       ad 0b 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST
     73  fb95		       d0 07		      BNE	.wrongBytesPerLogicalSector
     74  fb97		       ad 0c 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_BYTES_PER_LOGICAL_SECTOR_OFFEST + 1
     75  fb9a		       c9 02		      CMP	#2
     76  fb9c		       f0 03		      BEQ	.proceed
     77  fb9e				   .wrongBytesPerLogicalSector
     78  fb9e		       a9 15		      LDA	#IO_WRONG_BYTES_PER_LOGICAL_SECTOR
     79  fba0		       60		      RTS
     80  fba1				   .proceed
     81  fba1
     82  fba1							; Check number of FATs
     83  fba1		       ad 10 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_NUBMER_OF_FATs_OFFSET
     84  fba4		       c9 02		      CMP	#2
      0  fba6					      IF_NEQ
      1  fba6				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fba6		       f0 03		      BEQ	.tmp
      3  fba6				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fba6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fba8					      INCLUDE	"STACKPUSH.ASM"
     22  fba8					      LIST	ON
------- FILE if_neq
     86  fba8		       a9 16		      LDA	#IO_WRONG_FATS_NUMBER
     87  fbaa		       60		      RTS
      0  fbab					      END_IF
      1  fbab				   _STRUCT_MAC_LABEL_40
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbab					      INCLUDE	"STACKPOP.ASM"
     21  fbab					      LIST	ON
------- FILE end_if
     89  fbab
     90  fbab							; Check media descriptor
     91  fbab		       ad 15 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_MEDIA_DESCRIPTOR_OFFSET
     92  fbae		       c9 f8		      CMP	#$F8
      0  fbb0					      IF_NEQ
      1  fbb0				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbb0		       f0 03		      BEQ	.tmp
      3  fbb0				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbb0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbb2					      INCLUDE	"STACKPUSH.ASM"
     22  fbb2					      LIST	ON
------- FILE if_neq
     94  fbb2		       a9 17		      LDA	#IO_WRONG_FAT_MEDIA_DESCRIPTOR
     95  fbb4		       60		      RTS
      0  fbb5					      END_IF
      1  fbb5				   _STRUCT_MAC_LABEL_41
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbb5					      INCLUDE	"STACKPOP.ASM"
     21  fbb5					      LIST	ON
------- FILE end_if
     97  fbb5
     98  fbb5							; Read sectors per cluster
     99  fbb5		       ad 0d 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_SECTORS_PER_CLUSTER_OFFEST
      0  fbb8					      IF_ZERO
      0  fbb8					      IF_EQ
      1  fbb8				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbb8		       d0 03		      BNE	.tmp
      3  fbb8				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbb8				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbba					      INCLUDE	"STACKPUSH.ASM"
     22  fbba					      LIST	ON
------- FILE if_eq
    101  fbba		       a9 18		      LDA	#IO_ZERO_SECTORS_PER_CLUSTER
    102  fbbc		       60		      RTS
      0  fbbd					      END_IF
      1  fbbd				   _STRUCT_MAC_LABEL_42
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbbd					      INCLUDE	"STACKPOP.ASM"
     21  fbbd					      LIST	ON
------- FILE end_if
    104  fbbd		       85 d7		      STA	_sectorsPerCluster
    105  fbbf
    106  fbbf							; Read root dir cluster
      0  fbbf					      FOR_X	0, UP_TO, 4
      1  fbbf				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fbbf				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fbbf				  -	      ERR
      4  fbbf					      ENDIF
      5  fbbf				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fbbf				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fbbf				  -	      ERR
      8  fbbf					      ENDIF
      9  fbbf				  -	      IF	[ 0 == ACCUM ]
     10  fbbf				  -	      TAX
     11  fbbf					      ELSE
     12  fbbf				  -	      IF	[ 0 == Y_REG ]
     13  fbbf				  -	      PHA
     14  fbbf				  -	      TYA
     15  fbbf				  -	      TAX
     16  fbbf				  -	      PLA
     17  fbbf					      ELSE
     18  fbbf					      IF	[ 0 != X_REG ]
     19  fbbf		       a2 00		      LDX	#0
     20  fbc1					      ENDIF
     21  fbc1					      ENDIF
     22  fbc1					      ENDIF
     23  fbc1				   _TO_PUSH_3 SET	4
     24  fbc1				   _TO_PUSH_2 SET	UP_TO
     25  fbc1				   _STRUCT_MAC_LABEL_43
     26  fbc1				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fbc1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fbc1					      INCLUDE	"STKPUSH3.ASM"
     22  fbc1					      LIST	ON
------- FILE for_x
    108  fbc1		       bd 2c 7e 	      LDA	[sdPageStart + _FAT_FIRST_SECTOR_ROOT_DIRECTORY_CLUSTER_NUMBER_OFFSET],X
    109  fbc4		       95 d8		      STA	_rootDirectoryClusterNumber,X
      0  fbc6					      NEXT_X
      1  fbc6				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fbc6				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fbc6				  -	      DEX
      4  fbc6				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fbc6				  -	      BNE	.loop
      6  fbc6				  -	      ELSE
      7  fbc6				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fbc6				  -	      BPL	.loop
      9  fbc6				  -	      ELSE
     10  fbc6				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fbc6				  -	      BMI	.loop
     12  fbc6				  -	      ELSE
     13  fbc6				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fbc6				  -	      CPX	_STK_LVL_3
     15  fbc6				  -	      ELSE
     16  fbc6				  -	      CPX	#_STK_LVL_3
     17  fbc6				  -	      ENDIF
     18  fbc6				  -	      BNE	.loop
     19  fbc6				  -	      ENDIF
     20  fbc6				  -	      ENDIF
     21  fbc6				  -	      ENDIF
     22  fbc6					      ELSE
     23  fbc6		       e8		      INX
     24  fbc7				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fbc7				  -	      BNE	.loop
     26  fbc7					      ELSE
     27  fbc7				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fbc7				  -	      BMI	.loop
     29  fbc7					      ELSE
     30  fbc7				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fbc7				  -	      BPL	.loop
     32  fbc7					      ELSE
     33  fbc7				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fbc7				  -	      CPX	_STK_LVL_3
     35  fbc7					      ELSE
     36  fbc7		       e0 04		      CPX	#_STK_LVL_3
     37  fbc9					      ENDIF
     38  fbc9		       d0 f6		      BNE	.loop
     39  fbcb					      ENDIF
     40  fbcb					      ENDIF
     41  fbcb					      ENDIF
     42  fbcb					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fbcb					      INCLUDE	"STACKPOP3.ASM"
     19  fbcb					      LIST	ON
------- FILE next_x
    111  fbcb
    112  fbcb							; Calc FAT #1 region sector
    113  fbcb							; It is partition start sector (already in FAT_SECTOR_#) + fat reserved logical sectors
    114  fbcb		       18		      CLC
    115  fbcc		       ad 0e 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET
    116  fbcf		       65 cf		      ADC	_fatSector
    117  fbd1		       85 cf		      STA	_fatSector
    118  fbd3		       ad 0f 7e 	      LDA	sdPageStart + _FAT_FIRST_SECTOR_RESERVED_LOGICAL_SECTORS_OFFSET + 1
    119  fbd6		       65 d0		      ADC	_fatSector + 1
    120  fbd8		       85 d0		      STA	_fatSector + 1
      0  fbda					      IF_C_SET
      1  fbda				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbda		       90 06		      BCC	.tmp
      3  fbda				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbda				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbdc					      INCLUDE	"STACKPUSH.ASM"
     22  fbdc					      LIST	ON
------- FILE if_c_set
    122  fbdc		       e6 d1		      INC	_fatSector + 2
      0  fbde					      IF_ZERO
      0  fbde					      IF_EQ
      1  fbde				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fbde		       d0 02		      BNE	.tmp
      3  fbde				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fbde				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fbe0					      INCLUDE	"STACKPUSH.ASM"
     22  fbe0					      LIST	ON
------- FILE if_eq
    124  fbe0		       e6 d2		      INC	_fatSector + 3
      0  fbe2					      END_IF
      1  fbe2				   _STRUCT_MAC_LABEL_45
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbe2					      INCLUDE	"STACKPOP.ASM"
     21  fbe2					      LIST	ON
------- FILE end_if
      0  fbe2					      END_IF
      1  fbe2				   _STRUCT_MAC_LABEL_44
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fbe2					      INCLUDE	"STACKPOP.ASM"
     21  fbe2					      LIST	ON
------- FILE end_if
    127  fbe2
    128  fbe2							; Calc DATA region sector
    129  fbe2							; It is FAT_SECTOR + SECTORS_PER_FAT * NUMBER_OF_FATs (expected as 2)
      0  fbe2					      FOR_X	0, UP_TO, 4
      1  fbe2				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fbe2				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fbe2				  -	      ERR
      4  fbe2					      ENDIF
      5  fbe2				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fbe2				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fbe2				  -	      ERR
      8  fbe2					      ENDIF
      9  fbe2				  -	      IF	[ 0 == ACCUM ]
     10  fbe2				  -	      TAX
     11  fbe2					      ELSE
     12  fbe2				  -	      IF	[ 0 == Y_REG ]
     13  fbe2				  -	      PHA
     14  fbe2				  -	      TYA
     15  fbe2				  -	      TAX
     16  fbe2				  -	      PLA
     17  fbe2					      ELSE
     18  fbe2					      IF	[ 0 != X_REG ]
     19  fbe2		       a2 00		      LDX	#0
     20  fbe4					      ENDIF
     21  fbe4					      ENDIF
     22  fbe4					      ENDIF
     23  fbe4				   _TO_PUSH_3 SET	4
     24  fbe4				   _TO_PUSH_2 SET	UP_TO
     25  fbe4				   _STRUCT_MAC_LABEL_46
     26  fbe4				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fbe4				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fbe4					      INCLUDE	"STKPUSH3.ASM"
     22  fbe4					      LIST	ON
------- FILE for_x
    131  fbe4		       bd 24 7e 	      LDA	[sdPageStart + _FAT_FIRST_SECTOR_LOGICAL_SECTORS_PER_FAT_OFFSET],X
    132  fbe7		       95 d3		      STA	_dataSector,X
      0  fbe9					      NEXT_X
      1  fbe9				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fbe9				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fbe9				  -	      DEX
      4  fbe9				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fbe9				  -	      BNE	.loop
      6  fbe9				  -	      ELSE
      7  fbe9				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fbe9				  -	      BPL	.loop
      9  fbe9				  -	      ELSE
     10  fbe9				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fbe9				  -	      BMI	.loop
     12  fbe9				  -	      ELSE
     13  fbe9				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fbe9				  -	      CPX	_STK_LVL_3
     15  fbe9				  -	      ELSE
     16  fbe9				  -	      CPX	#_STK_LVL_3
     17  fbe9				  -	      ENDIF
     18  fbe9				  -	      BNE	.loop
     19  fbe9				  -	      ENDIF
     20  fbe9				  -	      ENDIF
     21  fbe9				  -	      ENDIF
     22  fbe9					      ELSE
     23  fbe9		       e8		      INX
     24  fbea				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fbea				  -	      BNE	.loop
     26  fbea					      ELSE
     27  fbea				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fbea				  -	      BMI	.loop
     29  fbea					      ELSE
     30  fbea				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fbea				  -	      BPL	.loop
     32  fbea					      ELSE
     33  fbea				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fbea				  -	      CPX	_STK_LVL_3
     35  fbea					      ELSE
     36  fbea		       e0 04		      CPX	#_STK_LVL_3
     37  fbec					      ENDIF
     38  fbec		       d0 f6		      BNE	.loop
     39  fbee					      ENDIF
     40  fbee					      ENDIF
     41  fbee					      ENDIF
     42  fbee					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fbee					      INCLUDE	"STACKPOP3.ASM"
     19  fbee					      LIST	ON
------- FILE next_x
    134  fbee							; multiply it by 2
    135  fbee		       06 d3		      ASL	_dataSector
    136  fbf0		       26 d4		      ROL	_dataSector + 1
    137  fbf2		       26 d5		      ROL	_dataSector + 2
    138  fbf4		       26 d6		      ROL	_dataSector + 3
    139  fbf6							; Add FAT_SECTOR
    140  fbf6		       18		      CLC
    141  fbf7		       a5 d3		      LDA	_dataSector
    142  fbf9		       65 cf		      ADC	_fatSector
    143  fbfb		       85 d3		      STA	_dataSector
    144  fbfd		       a5 d4		      LDA	_dataSector + 1
    145  fbff		       65 d0		      ADC	_fatSector + 1
    146  fc01		       85 d4		      STA	_dataSector + 1
    147  fc03		       a5 d5		      LDA	_dataSector + 2
    148  fc05		       65 d1		      ADC	_fatSector + 2
    149  fc07		       85 d5		      STA	_dataSector + 2
    150  fc09		       a5 d6		      LDA	_dataSector + 3
    151  fc0b		       65 d2		      ADC	_fatSector + 3
    152  fc0d		       85 d6		      STA	_dataSector + 3
    153  fc0f							; subtract two clusters for simplification
    154  fc0f		       a5 d7		      LDA	_sectorsPerCluster
    155  fc11		       0a		      ASL
    156  fc12		       85 e0		      STA	_tmpDoubleClusters
    157  fc14		       38		      SEC
    158  fc15		       a5 d3		      LDA	_dataSector
    159  fc17		       e5 e0		      SBC	_tmpDoubleClusters
    160  fc19		       85 d3		      STA	_dataSector
      0  fc1b					      IF_C_CLR
      1  fc1b				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc1b		       b0 0a		      BCS	.tmp
      3  fc1b				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc1b				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc1d					      INCLUDE	"STACKPUSH.ASM"
     22  fc1d					      LIST	ON
------- FILE if_c_clr
    162  fc1d		       c6 d4		      DEC	_dataSector + 1
      0  fc1f					      IF_ZERO
      0  fc1f					      IF_EQ
      1  fc1f				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc1f		       d0 06		      BNE	.tmp
      3  fc1f				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc1f				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc21					      INCLUDE	"STACKPUSH.ASM"
     22  fc21					      LIST	ON
------- FILE if_eq
    164  fc21		       c6 d5		      DEC	_dataSector + 2
      0  fc23					      IF_ZERO
      0  fc23					      IF_EQ
      1  fc23				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc23		       d0 02		      BNE	.tmp
      3  fc23				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc23				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc25					      INCLUDE	"STACKPUSH.ASM"
     22  fc25					      LIST	ON
------- FILE if_eq
    166  fc25		       c6 d6		      DEC	_dataSector + 3
      0  fc27					      END_IF
      1  fc27				   _STRUCT_MAC_LABEL_49
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc27					      INCLUDE	"STACKPOP.ASM"
     21  fc27					      LIST	ON
------- FILE end_if
      0  fc27					      END_IF
      1  fc27				   _STRUCT_MAC_LABEL_48
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc27					      INCLUDE	"STACKPOP.ASM"
     21  fc27					      LIST	ON
------- FILE end_if
      0  fc27					      END_IF
      1  fc27				   _STRUCT_MAC_LABEL_47
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fc27					      INCLUDE	"STACKPOP.ASM"
     21  fc27					      LIST	ON
------- FILE end_if
    170  fc27		       a9 00		      LDA	#0
    171  fc29		       60		      RTS
    172  fc2a
    173 U00cd					      SEG.U	zpVars
    174 U00cd		       00 00	   filenamePointer ds	2
    175 U00cf		       00 00 00 00 _fatSector ds	4
    176 U00d3							; it will be pseudo data sector !!!
    177 U00d3							; = real data region - 2 * sectors per cluster
    178 U00d3							; for easy cluster address calculation
    179 U00d3		       00 00 00 00 _dataSector ds	4
    180 U00d7		       00	   _sectorsPerCluster ds	1
    181 U00d8		       00 00 00 00 _rootDirectoryClusterNumber ds	4
    182 U00dc		       00 00 00 00 _openedCluster ds	4
    183 U00e0		       00	   _openedSectorInCluster ds	1
    184 U00e0		       00 e0	   _tmpDoubleClusters =	_openedSectorInCluster
    185 U00e1		       00 00 00 00 _openedSector ds	4
    186 U00e5		       00 00 00 00 _openedFileSize ds	4
    187 U00e9
    188  fc2a					      SEG	code
    189  fc2a				   OPEN_FILE_BY_NAME
    190  fc2a		       8a		      TXA
    191  fc2b		       48		      PHA
    192  fc2c		       98		      TYA
    193  fc2d		       48		      PHA
    194  fc2e		       20 3a fc 	      JSR	_INNER_OPEN_FILE_BY_NAME
    195  fc31		       85 c7		      STA	_crc	; I hope it will be OK
    196  fc33		       68		      PLA
    197  fc34		       a8		      TAY
    198  fc35		       68		      PLA
    199  fc36		       aa		      TAX
    200  fc37		       a5 c7		      LDA	_crc
    201  fc39		       60		      RTS
    202  fc3a
    203  fc3a				   _INNER_OPEN_FILE_BY_NAME
    204  fc3a					      SUBROUTINE
    205  fc3a		       20 57 fc 	      JSR	_OPEN_ROOT
      0  fc3d					      RTS_IF_NE
      1  fc3d		       f0 01		      BEQ	.tmp
      2  fc3f		       60		      RTS
      3  fc40				   .tmp
    207  fc40				   .loop
    208  fc40		       20 1f fd 	      JSR	_EXTRACT_NEXT_NAME
    209  fc43		       f0 0c		      BEQ	.openIt
    210  fc45		       30 03		      BMI	.opened
    211  fc47		       a9 03		      LDA	#IO_INVALID_FILENAME_FORMAT
    212  fc49		       60		      RTS
    213  fc4a				   .opened
    214  fc4a		       a9 ff		      LDA	#$FF
    215  fc4c		       85 ea		      STA	half_sector_pointer + 1
    216  fc4e		       a9 00		      LDA	#IO_OK
    217  fc50		       60		      RTS
    218  fc51				   .openIt
    219  fc51		       20 b1 fd 	      JSR	_OPEN_FILE_IN_FOLDER
    220  fc54		       f0 ea		      BEQ	.loop
    221  fc56		       60		      RTS
    222  fc57
    223  fc57							; Changes X & Y
    224  fc57				   _OPEN_ROOT
      0  fc57					      FOR_X	0, UP_TO, 4
      1  fc57				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fc57				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fc57				  -	      ERR
      4  fc57					      ENDIF
      5  fc57				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fc57				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fc57				  -	      ERR
      8  fc57					      ENDIF
      9  fc57				  -	      IF	[ 0 == ACCUM ]
     10  fc57				  -	      TAX
     11  fc57					      ELSE
     12  fc57				  -	      IF	[ 0 == Y_REG ]
     13  fc57				  -	      PHA
     14  fc57				  -	      TYA
     15  fc57				  -	      TAX
     16  fc57				  -	      PLA
     17  fc57					      ELSE
     18  fc57					      IF	[ 0 != X_REG ]
     19  fc57		       a2 00		      LDX	#0
     20  fc59					      ENDIF
     21  fc59					      ENDIF
     22  fc59					      ENDIF
     23  fc59				   _TO_PUSH_3 SET	4
     24  fc59				   _TO_PUSH_2 SET	UP_TO
     25  fc59				   _STRUCT_MAC_LABEL_50
     26  fc59				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fc59				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fc59					      INCLUDE	"STKPUSH3.ASM"
     22  fc59					      LIST	ON
------- FILE for_x
    226  fc59		       b5 d8		      LDA	_rootDirectoryClusterNumber,X
    227  fc5b		       95 dc		      STA	_openedCluster,X
      0  fc5d					      NEXT_X
      1  fc5d				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fc5d				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fc5d				  -	      DEX
      4  fc5d				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fc5d				  -	      BNE	.loop
      6  fc5d				  -	      ELSE
      7  fc5d				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fc5d				  -	      BPL	.loop
      9  fc5d				  -	      ELSE
     10  fc5d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fc5d				  -	      BMI	.loop
     12  fc5d				  -	      ELSE
     13  fc5d				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fc5d				  -	      CPX	_STK_LVL_3
     15  fc5d				  -	      ELSE
     16  fc5d				  -	      CPX	#_STK_LVL_3
     17  fc5d				  -	      ENDIF
     18  fc5d				  -	      BNE	.loop
     19  fc5d				  -	      ENDIF
     20  fc5d				  -	      ENDIF
     21  fc5d				  -	      ENDIF
     22  fc5d					      ELSE
     23  fc5d		       e8		      INX
     24  fc5e				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fc5e				  -	      BNE	.loop
     26  fc5e					      ELSE
     27  fc5e				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fc5e				  -	      BMI	.loop
     29  fc5e					      ELSE
     30  fc5e				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fc5e				  -	      BPL	.loop
     32  fc5e					      ELSE
     33  fc5e				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fc5e				  -	      CPX	_STK_LVL_3
     35  fc5e					      ELSE
     36  fc5e		       e0 04		      CPX	#_STK_LVL_3
     37  fc60					      ENDIF
     38  fc60		       d0 f7		      BNE	.loop
     39  fc62					      ENDIF
     40  fc62					      ENDIF
     41  fc62					      ENDIF
     42  fc62					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fc62					      INCLUDE	"STACKPOP3.ASM"
     19  fc62					      LIST	ON
------- FILE next_x
    229  fc62							; JMP _OPEN_CLUSTER ; not needed, the _OPEN_CLUSTER goes next
    230  fc62							; end is here
    231  fc62
    232  fc62							; expects _openedCluster
    233  fc62							; sets opened sector and reads it
    234  fc62							; sets sector in cluster to 0
    235  fc62							; Changes X & Y
    236  fc62				   _OPEN_CLUSTER
    237  fc62		       a9 00		      LDA	#0
    238  fc64		       85 e0		      STA	_openedSectorInCluster
    239  fc66							; openedSector = openedCluster*sectorsPerCluster + pseudoDataRegion
    240  fc66							;   copy
      0  fc66					      FOR_X	0, UP_TO, 4
      1  fc66				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fc66				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fc66				  -	      ERR
      4  fc66					      ENDIF
      5  fc66				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fc66				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fc66				  -	      ERR
      8  fc66					      ENDIF
      9  fc66				  -	      IF	[ 0 == ACCUM ]
     10  fc66				  -	      TAX
     11  fc66					      ELSE
     12  fc66				  -	      IF	[ 0 == Y_REG ]
     13  fc66				  -	      PHA
     14  fc66				  -	      TYA
     15  fc66				  -	      TAX
     16  fc66				  -	      PLA
     17  fc66					      ELSE
     18  fc66					      IF	[ 0 != X_REG ]
     19  fc66		       a2 00		      LDX	#0
     20  fc68					      ENDIF
     21  fc68					      ENDIF
     22  fc68					      ENDIF
     23  fc68				   _TO_PUSH_3 SET	4
     24  fc68				   _TO_PUSH_2 SET	UP_TO
     25  fc68				   _STRUCT_MAC_LABEL_51
     26  fc68				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fc68				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fc68					      INCLUDE	"STKPUSH3.ASM"
     22  fc68					      LIST	ON
------- FILE for_x
    242  fc68		       b5 dc		      LDA	_openedCluster,X
    243  fc6a		       95 e1		      STA	_openedSector,X
      0  fc6c					      NEXT_X
      1  fc6c				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fc6c				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fc6c				  -	      DEX
      4  fc6c				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fc6c				  -	      BNE	.loop
      6  fc6c				  -	      ELSE
      7  fc6c				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fc6c				  -	      BPL	.loop
      9  fc6c				  -	      ELSE
     10  fc6c				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fc6c				  -	      BMI	.loop
     12  fc6c				  -	      ELSE
     13  fc6c				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fc6c				  -	      CPX	_STK_LVL_3
     15  fc6c				  -	      ELSE
     16  fc6c				  -	      CPX	#_STK_LVL_3
     17  fc6c				  -	      ENDIF
     18  fc6c				  -	      BNE	.loop
     19  fc6c				  -	      ENDIF
     20  fc6c				  -	      ENDIF
     21  fc6c				  -	      ENDIF
     22  fc6c					      ELSE
     23  fc6c		       e8		      INX
     24  fc6d				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fc6d				  -	      BNE	.loop
     26  fc6d					      ELSE
     27  fc6d				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fc6d				  -	      BMI	.loop
     29  fc6d					      ELSE
     30  fc6d				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fc6d				  -	      BPL	.loop
     32  fc6d					      ELSE
     33  fc6d				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fc6d				  -	      CPX	_STK_LVL_3
     35  fc6d					      ELSE
     36  fc6d		       e0 04		      CPX	#_STK_LVL_3
     37  fc6f					      ENDIF
     38  fc6f		       d0 f7		      BNE	.loop
     39  fc71					      ENDIF
     40  fc71					      ENDIF
     41  fc71					      ENDIF
     42  fc71					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fc71					      INCLUDE	"STACKPOP3.ASM"
     19  fc71					      LIST	ON
------- FILE next_x
    245  fc71							;   multiply
    246  fc71		       a5 d7		      LDA	_sectorsPerCluster
      0  fc73					      BEGIN
      1  fc73				   _STRUCT_MAC_LABEL_52
      2  fc73				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  fc73				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc73					      INCLUDE	"STACKPUSH.ASM"
     22  fc73					      LIST	ON
------- FILE begin
    248  fc73		       4a		      LSR
      0  fc74					      WHILE_C_CLR
      0  fc74					      IF_C_CLR
      1  fc74				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fc74		       b0 0b		      BCS	.tmp
      3  fc74				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fc74				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fc76					      INCLUDE	"STACKPUSH.ASM"
     22  fc76					      LIST	ON
------- FILE if_c_clr
    250  fc76		       06 e1		      ASL	_openedSector
    251  fc78		       26 e2		      ROL	_openedSector + 1
    252  fc7a		       26 e3		      ROL	_openedSector + 2
    253  fc7c		       26 e4		      ROL	_openedSector + 3
      0  fc7e					      REPEAT_
      1  fc7e				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
      2  fc7e		       4c 73 fc 	      JMP	.tmp
      3  fc81				   _STRUCT_MAC_LABEL_53
------- FILE STACKPOP2.ASM LEVEL 3 PASS 3
      0  fc81					      INCLUDE	"STACKPOP2.ASM"
     20  fc81					      LIST	ON
------- FILE repeat_
    255  fc81							;   add pseudo data region
    256  fc81		       18		      CLC
    257  fc82		       a5 e1		      LDA	_openedSector
    258  fc84		       65 d3		      ADC	_dataSector
    259  fc86		       85 e1		      STA	_openedSector
    260  fc88		       85 c8		      STA	sdSector
    261  fc8a		       a5 e2		      LDA	_openedSector + 1
    262  fc8c		       65 d4		      ADC	_dataSector + 1
    263  fc8e		       85 e2		      STA	_openedSector + 1
    264  fc90		       85 c9		      STA	sdSector + 1
    265  fc92		       a5 e3		      LDA	_openedSector + 2
    266  fc94		       65 d5		      ADC	_dataSector + 2
    267  fc96		       85 e3		      STA	_openedSector + 2
    268  fc98		       85 ca		      STA	sdSector + 2
    269  fc9a		       a5 e4		      LDA	_openedSector + 3
    270  fc9c		       65 d6		      ADC	_dataSector + 3
    271  fc9e		       85 e4		      STA	_openedSector + 3
    272  fca0		       85 cb		      STA	sdSector + 3
    273  fca2		       4c 67 f9 	      JMP	READ_SD_SECTOR
    274  fca5							; end is here
    275  fca5
    276 U00e9					      SEG.U	zpVars
    277 U00e9		       00 00	   half_sector_pointer ds	2
    278 U00eb		       00	   half_sector_size ds	1
    279 U00ec
    280  fca5					      SEG	code
    281  fca5							; The method called from the beggining of reading the file and for each next sub-sector
    282  fca5				   READ_NEXT_HALF_SECTOR
    283  fca5		       20 f4 fc 	      JSR	_CHECK_ZERO_SIZE
      0  fca8					      RTS_IF_NE
      1  fca8		       f0 01		      BEQ	.tmp
      2  fcaa		       60		      RTS
      3  fcab				   .tmp
    285  fcab
    286  fcab							; first run:
    287  fcab							;   if file_size > FF
    288  fcab							;	 half_sector_size = FF
    289  fcab							;   else
    290  fcab							;	 half_sector_size = file_size
    291  fcab							; not first run:
    292  fcab							;   file_size -= 100 && check borrow bit to return END of file
    293  fcab							;   update_half_sector_size
    294  fcab							;   update pointer to next half of sector in memory
    295  fcab							;   or read next sector
    296  fcab
    297  fcab		       a5 ea		      LDA	half_sector_pointer + 1
    298  fcad							; if can't be on upper memory, so it's first run
    299  fcad		       10 0e		      BPL	.secondRun
      0  fcaf					      WRITE_WORD	sdPageStart, half_sector_pointer
      1  fcaf		       a9 00		      LDA	#<sdPageStart
      2  fcb1		       85 e9		      STA	half_sector_pointer
      3  fcb3		       a9 7e		      LDA	#>sdPageStart
      4  fcb5		       85 ea		      STA	half_sector_pointer+1
    301  fcb7		       20 0a fd 	      JSR	_UPDATE_HALF_SECTOR_SIZE
    302  fcba		       a9 00		      LDA	#IO_OK
    303  fcbc		       60		      RTS
    304  fcbd				   .secondRun
    305  fcbd							;   file_size -= 100 && check borrow bit to return END of file
    306  fcbd		       a5 e6		      LDA	_openedFileSize+1
    307  fcbf		       38		      SEC
    308  fcc0		       e9 01		      SBC	#1
    309  fcc2		       85 e6		      STA	_openedFileSize+1
      0  fcc4					      IF_C_CLR
      1  fcc4				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fcc4		       b0 15		      BCS	.tmp
      3  fcc4				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fcc4				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fcc6					      INCLUDE	"STACKPUSH.ASM"
     22  fcc6					      LIST	ON
------- FILE if_c_clr
    311  fcc6		       a5 e7		      LDA	_openedFileSize+2
    312  fcc8		       38		      SEC
    313  fcc9		       e9 01		      SBC	#1
    314  fccb		       85 e7		      STA	_openedFileSize+2
      0  fccd					      IF_C_CLR
      1  fccd				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fccd		       b0 0c		      BCS	.tmp
      3  fccd				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fccd				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fccf					      INCLUDE	"STACKPUSH.ASM"
     22  fccf					      LIST	ON
------- FILE if_c_clr
    316  fccf		       a5 e8		      LDA	_openedFileSize+3
    317  fcd1		       38		      SEC
    318  fcd2		       e9 01		      SBC	#1
    319  fcd4		       85 e8		      STA	_openedFileSize+3
      0  fcd6					      IF_C_CLR
      1  fcd6				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fcd6		       b0 03		      BCS	.tmp
      3  fcd6				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fcd6				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fcd8					      INCLUDE	"STACKPUSH.ASM"
     22  fcd8					      LIST	ON
------- FILE if_c_clr
    321  fcd8		       a9 01		      LDA	#IO_END_OF_FILE
    322  fcda		       60		      RTS
      0  fcdb					      END_IF
      1  fcdb				   _STRUCT_MAC_LABEL_56
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fcdb					      INCLUDE	"STACKPOP.ASM"
     21  fcdb					      LIST	ON
------- FILE end_if
      0  fcdb					      END_IF
      1  fcdb				   _STRUCT_MAC_LABEL_55
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fcdb					      INCLUDE	"STACKPOP.ASM"
     21  fcdb					      LIST	ON
------- FILE end_if
      0  fcdb					      END_IF
      1  fcdb				   _STRUCT_MAC_LABEL_54
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fcdb					      INCLUDE	"STACKPOP.ASM"
     21  fcdb					      LIST	ON
------- FILE end_if
    326  fcdb		       20 f4 fc 	      JSR	_CHECK_ZERO_SIZE
      0  fcde					      RTS_IF_NE
      1  fcde		       f0 01		      BEQ	.tmp
      2  fce0		       60		      RTS
      3  fce1				   .tmp
    328  fce1		       20 0a fd 	      JSR	_UPDATE_HALF_SECTOR_SIZE
    329  fce4		       a5 ea		      LDA	half_sector_pointer + 1
    330  fce6		       c9 7e		      CMP	#>sdPageStart
    331  fce8		       d0 05		      BNE	.readNextSector
    332  fcea		       e6 ea		      INC	half_sector_pointer + 1
    333  fcec		       a9 00		      LDA	#IO_OK
    334  fcee		       60		      RTS
    335  fcef				   .readNextSector
    336  fcef		       c6 ea		      DEC	half_sector_pointer + 1
    337  fcf1		       4c 24 fe 	      JMP	_READ_NEXT_SECTOR
    338  fcf4							; end of subroutine
    339  fcf4
    340  fcf4				   _CHECK_ZERO_SIZE
    341  fcf4					      SUBROUTINE
    342  fcf4		       a5 e5		      LDA	_openedFileSize
    343  fcf6		       d0 0f		      BNE	.proceed
    344  fcf8		       a5 e6		      LDA	_openedFileSize+1
    345  fcfa		       d0 0b		      BNE	.proceed
    346  fcfc		       a5 e7		      LDA	_openedFileSize+2
    347  fcfe		       d0 07		      BNE	.proceed
    348  fd00		       a5 e8		      LDA	_openedFileSize+3
    349  fd02		       d0 03		      BNE	.proceed
    350  fd04		       a9 01		      LDA	#IO_END_OF_FILE
    351  fd06		       60		      RTS
    352  fd07				   .proceed
    353  fd07		       a9 00		      LDA	#0
    354  fd09		       60		      RTS
    355  fd0a
    356  fd0a				   _UPDATE_HALF_SECTOR_SIZE
    357  fd0a					      SUBROUTINE
    358  fd0a		       a5 e6		      LDA	_openedFileSize+1
    359  fd0c		       d0 0c		      BNE	.fullPage
    360  fd0e		       a5 e7		      LDA	_openedFileSize+2
    361  fd10		       d0 08		      BNE	.fullPage
    362  fd12		       a5 e8		      LDA	_openedFileSize+3
    363  fd14		       d0 04		      BNE	.fullPage
    364  fd16		       a5 e5		      LDA	_openedFileSize	; must not be a 0
    365  fd18		       d0 02		      BNE	.end	; instead of JMP
    366  fd1a				   .fullPage
    367  fd1a		       a9 00		      LDA	#0
    368  fd1c				   .end
    369  fd1c		       85 eb		      STA	half_sector_size
    370  fd1e		       60		      RTS
    371  fd1f
    372 U00ec					      SEG.U	zpVars
    373 U00ec		       00 00 00 00*_fatFilename ds	11
    374 U00f7
    375  fd1f					      SEG	code
    376  fd1f		       00 00	   _EXTRACT_NEXT_NAME_OK =	0
    377  fd1f		       00 01	   _EXTRACT_NEXT_NAME_INVALID =	1
    378  fd1f		       00 ff	   _EXTRACT_NEXT_NAME_END =	$FF
    379  fd1f				   _EXTRACT_NEXT_NAME
    380  fd1f					      SUBROUTINE
    381  fd1f		       98		      TYA
    382  fd20		       48		      PHA
    383  fd21		       a0 00		      LDY	#0
    384  fd23		       b1 cd		      LDA	(filenamePointer),Y
    385  fd25							; check if it is the end of the name
      0  fd25					      IF_ZERO
      0  fd25					      IF_EQ
      1  fd25				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd25		       d0 05		      BNE	.tmp
      3  fd25				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd25				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd27					      INCLUDE	"STACKPUSH.ASM"
     22  fd27					      LIST	ON
------- FILE if_eq
    387  fd27		       68		      PLA
    388  fd28		       a8		      TAY
    389  fd29		       a9 ff		      LDA	#_EXTRACT_NEXT_NAME_END
    390  fd2b		       60		      RTS
      0  fd2c					      END_IF
      1  fd2c				   _STRUCT_MAC_LABEL_57
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd2c					      INCLUDE	"STACKPOP.ASM"
     21  fd2c					      LIST	ON
------- FILE end_if
    392  fd2c							; Skip '/'
    393  fd2c		       c9 2f		      CMP	#"/"
      0  fd2e					      IF_NEQ
      1  fd2e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd2e		       f0 03		      BEQ	.tmp
      3  fd2e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd2e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd30					      INCLUDE	"STACKPUSH.ASM"
     22  fd30					      LIST	ON
------- FILE if_neq
    395  fd30		       4c 99 fd 	      JMP	.extractNextNameInvalid
      0  fd33					      END_IF
      1  fd33				   _STRUCT_MAC_LABEL_58
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd33					      INCLUDE	"STACKPOP.ASM"
     21  fd33					      LIST	ON
------- FILE end_if
    397  fd33							; In order to skip it we need to increase the pointer
    398  fd33		       e6 cd		      INC	filenamePointer
      0  fd35					      IF_EQ		; if we have a zero after incrementing it overflows
      1  fd35				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fd35		       d0 02		      BNE	.tmp
      3  fd35				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fd35				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fd37					      INCLUDE	"STACKPUSH.ASM"
     22  fd37					      LIST	ON
------- FILE if_eq
    400  fd37		       e6 ce		      INC	filenamePointer+1
      0  fd39					      END_IF
      1  fd39				   _STRUCT_MAC_LABEL_59
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fd39					      INCLUDE	"STACKPOP.ASM"
     21  fd39					      LIST	ON
------- FILE end_if
    402  fd39							; Fill internal name with spaces
    403  fd39		       a9 20		      LDA	#" "
      0  fd3b					      FOR_Y	0, UP_TO, 11
      1  fd3b				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd3b				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd3b				  -	      ERR
      4  fd3b					      ENDIF
      5  fd3b				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd3b				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd3b				  -	      ERR
      8  fd3b					      ENDIF
      9  fd3b				  -	      IF	[ 0 == ACCUM ]
     10  fd3b				  -	      TAY
     11  fd3b					      ELSE
     12  fd3b				  -	      IF	[ 0 == X_REG ]
     13  fd3b				  -	      PHA
     14  fd3b				  -	      TXA
     15  fd3b				  -	      TAY
     16  fd3b				  -	      PLA
     17  fd3b					      ELSE
     18  fd3b					      IF	[ 0 != Y_REG ]
     19  fd3b		       a0 00		      LDY	#0
     20  fd3d					      ENDIF
     21  fd3d					      ENDIF
     22  fd3d					      ENDIF
     23  fd3d				   _TO_PUSH_3 SET	11
     24  fd3d				   _TO_PUSH_2 SET	UP_TO
     25  fd3d				   _STRUCT_MAC_LABEL_60
     26  fd3d				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd3d				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd3d					      INCLUDE	"STKPUSH3.ASM"
     22  fd3d					      LIST	ON
------- FILE for_y
    405  fd3d		       99 ec 00 	      STA	_fatFilename,Y
      0  fd40					      NEXT_Y
      1  fd40				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd40				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd40				  -	      DEY
      4  fd40				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd40				  -	      BNE	.loop
      6  fd40				  -	      ELSE
      7  fd40				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd40				  -	      BPL	.loop
      9  fd40				  -	      ELSE
     10  fd40				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd40				  -	      BMI	.loop
     12  fd40				  -	      ELSE
     13  fd40				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd40				  -	      CPY	_STK_LVL_3
     15  fd40				  -	      ELSE
     16  fd40				  -	      CPY	#_STK_LVL_3
     17  fd40				  -	      ENDIF
     18  fd40				  -	      BNE	.loop
     19  fd40				  -	      ENDIF
     20  fd40				  -	      ENDIF
     21  fd40				  -	      ENDIF
     22  fd40					      ELSE
     23  fd40		       c8		      INY
     24  fd41				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd41				  -	      BNE	.loop
     26  fd41					      ELSE
     27  fd41				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd41				  -	      BMI	.loop
     29  fd41					      ELSE
     30  fd41				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd41				  -	      BPL	.loop
     32  fd41					      ELSE
     33  fd41				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd41				  -	      CPY	_STK_LVL_3
     35  fd41					      ELSE
     36  fd41		       c0 0b		      CPY	#_STK_LVL_3
     37  fd43					      ENDIF
     38  fd43		       d0 f8		      BNE	.loop
     39  fd45					      ENDIF
     40  fd45					      ENDIF
     41  fd45					      ENDIF
     42  fd45					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd45					      INCLUDE	"STACKPOP3.ASM"
     19  fd45					      LIST	ON
------- FILE next_y
    407  fd45							; Copy file name
      0  fd45					      FOR_Y	0, UP_TO, 8
      1  fd45				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd45				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd45				  -	      ERR
      4  fd45					      ENDIF
      5  fd45				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd45				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd45				  -	      ERR
      8  fd45					      ENDIF
      9  fd45				  -	      IF	[ 0 == ACCUM ]
     10  fd45				  -	      TAY
     11  fd45					      ELSE
     12  fd45				  -	      IF	[ 0 == X_REG ]
     13  fd45				  -	      PHA
     14  fd45				  -	      TXA
     15  fd45				  -	      TAY
     16  fd45				  -	      PLA
     17  fd45					      ELSE
     18  fd45					      IF	[ 0 != Y_REG ]
     19  fd45		       a0 00		      LDY	#0
     20  fd47					      ENDIF
     21  fd47					      ENDIF
     22  fd47					      ENDIF
     23  fd47				   _TO_PUSH_3 SET	8
     24  fd47				   _TO_PUSH_2 SET	UP_TO
     25  fd47				   _STRUCT_MAC_LABEL_61
     26  fd47				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd47				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd47					      INCLUDE	"STKPUSH3.ASM"
     22  fd47					      LIST	ON
------- FILE for_y
    409  fd47		       b1 cd		      LDA	(filenamePointer),Y
    410  fd49		       f0 46		      BEQ	.end
    411  fd4b		       c9 2e		      CMP	#"."
    412  fd4d		       f0 1e		      BEQ	.nameCopied
    413  fd4f		       c9 2f		      CMP	#"/"
    414  fd51		       f0 3e		      BEQ	.end
    415  fd53		       20 9e fd 	      JSR	_TO_UPPER_CASE
    416  fd56		       99 ec 00 	      STA	_fatFilename,Y
      0  fd59					      NEXT_Y
      1  fd59				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd59				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd59				  -	      DEY
      4  fd59				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd59				  -	      BNE	.loop
      6  fd59				  -	      ELSE
      7  fd59				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd59				  -	      BPL	.loop
      9  fd59				  -	      ELSE
     10  fd59				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd59				  -	      BMI	.loop
     12  fd59				  -	      ELSE
     13  fd59				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd59				  -	      CPY	_STK_LVL_3
     15  fd59				  -	      ELSE
     16  fd59				  -	      CPY	#_STK_LVL_3
     17  fd59				  -	      ENDIF
     18  fd59				  -	      BNE	.loop
     19  fd59				  -	      ENDIF
     20  fd59				  -	      ENDIF
     21  fd59				  -	      ENDIF
     22  fd59					      ELSE
     23  fd59		       c8		      INY
     24  fd5a				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd5a				  -	      BNE	.loop
     26  fd5a					      ELSE
     27  fd5a				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd5a				  -	      BMI	.loop
     29  fd5a					      ELSE
     30  fd5a				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd5a				  -	      BPL	.loop
     32  fd5a					      ELSE
     33  fd5a				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd5a				  -	      CPY	_STK_LVL_3
     35  fd5a					      ELSE
     36  fd5a		       c0 08		      CPY	#_STK_LVL_3
     37  fd5c					      ENDIF
     38  fd5c		       d0 e9		      BNE	.loop
     39  fd5e					      ENDIF
     40  fd5e					      ENDIF
     41  fd5e					      ENDIF
     42  fd5e					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd5e					      INCLUDE	"STACKPOP3.ASM"
     19  fd5e					      LIST	ON
------- FILE next_y
    418  fd5e							; After the name must be either '.' or the end
    419  fd5e							; INY is not needed Y = 8 already at the end of the loop
    420  fd5e		       b1 cd		      LDA	(filenamePointer),Y
    421  fd60		       f0 2f		      BEQ	.end
    422  fd62		       c9 2f		      CMP	#"/"
    423  fd64		       f0 2b		      BEQ	.end
    424  fd66		       c9 2e		      CMP	#"."
    425  fd68		       f0 03		      BEQ	.nameCopied
    426  fd6a		       4c 99 fd 	      JMP	.extractNextNameInvalid
    427  fd6d				   .nameCopied
    428  fd6d		       c8		      INY		; in order to point on first extension character
    429  fd6e		       20 a6 fd 	      JSR	_SHIFT_FILENAME_POINTER_BY_Y
    430  fd71							; Copy extension
      0  fd71					      FOR_Y	0, UP_TO, 3
      1  fd71				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fd71				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fd71				  -	      ERR
      4  fd71					      ENDIF
      5  fd71				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fd71				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fd71				  -	      ERR
      8  fd71					      ENDIF
      9  fd71				  -	      IF	[ 0 == ACCUM ]
     10  fd71				  -	      TAY
     11  fd71					      ELSE
     12  fd71				  -	      IF	[ 0 == X_REG ]
     13  fd71				  -	      PHA
     14  fd71				  -	      TXA
     15  fd71				  -	      TAY
     16  fd71				  -	      PLA
     17  fd71					      ELSE
     18  fd71					      IF	[ 0 != Y_REG ]
     19  fd71		       a0 00		      LDY	#0
     20  fd73					      ENDIF
     21  fd73					      ENDIF
     22  fd73					      ENDIF
     23  fd73				   _TO_PUSH_3 SET	3
     24  fd73				   _TO_PUSH_2 SET	UP_TO
     25  fd73				   _STRUCT_MAC_LABEL_62
     26  fd73				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fd73				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fd73					      INCLUDE	"STKPUSH3.ASM"
     22  fd73					      LIST	ON
------- FILE for_y
    432  fd73		       b1 cd		      LDA	(filenamePointer),Y
    433  fd75		       f0 1a		      BEQ	.end
    434  fd77		       c9 2f		      CMP	#"/"
    435  fd79		       f0 16		      BEQ	.end
    436  fd7b		       20 9e fd 	      JSR	_TO_UPPER_CASE
    437  fd7e		       99 f4 00 	      STA	_fatFilename+8,Y
      0  fd81					      NEXT_Y
      1  fd81				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fd81				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fd81				  -	      DEY
      4  fd81				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fd81				  -	      BNE	.loop
      6  fd81				  -	      ELSE
      7  fd81				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fd81				  -	      BPL	.loop
      9  fd81				  -	      ELSE
     10  fd81				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fd81				  -	      BMI	.loop
     12  fd81				  -	      ELSE
     13  fd81				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fd81				  -	      CPY	_STK_LVL_3
     15  fd81				  -	      ELSE
     16  fd81				  -	      CPY	#_STK_LVL_3
     17  fd81				  -	      ENDIF
     18  fd81				  -	      BNE	.loop
     19  fd81				  -	      ENDIF
     20  fd81				  -	      ENDIF
     21  fd81				  -	      ENDIF
     22  fd81					      ELSE
     23  fd81		       c8		      INY
     24  fd82				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fd82				  -	      BNE	.loop
     26  fd82					      ELSE
     27  fd82				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fd82				  -	      BMI	.loop
     29  fd82					      ELSE
     30  fd82				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fd82				  -	      BPL	.loop
     32  fd82					      ELSE
     33  fd82				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fd82				  -	      CPY	_STK_LVL_3
     35  fd82					      ELSE
     36  fd82		       c0 03		      CPY	#_STK_LVL_3
     37  fd84					      ENDIF
     38  fd84		       d0 ed		      BNE	.loop
     39  fd86					      ENDIF
     40  fd86					      ENDIF
     41  fd86					      ENDIF
     42  fd86					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fd86					      INCLUDE	"STACKPOP3.ASM"
     19  fd86					      LIST	ON
------- FILE next_y
    439  fd86							; After extension it must be either '/' or end of line
    440  fd86		       b1 cd		      LDA	(filenamePointer),Y
    441  fd88		       f0 07		      BEQ	.end
    442  fd8a		       c9 2f		      CMP	#"/"
    443  fd8c		       f0 03		      BEQ	.end
    444  fd8e		       4c 99 fd 	      JMP	.extractNextNameInvalid
    445  fd91				   .end
    446  fd91		       20 a6 fd 	      JSR	_SHIFT_FILENAME_POINTER_BY_Y
    447  fd94		       68		      PLA
    448  fd95		       a8		      TAY
    449  fd96		       a9 00		      LDA	#_EXTRACT_NEXT_NAME_OK
    450  fd98		       60		      RTS
    451  fd99
    452  fd99				   .extractNextNameInvalid
    453  fd99		       68		      PLA
    454  fd9a		       a8		      TAY
    455  fd9b		       a9 01		      LDA	#_EXTRACT_NEXT_NAME_INVALID
    456  fd9d		       60		      RTS
    457  fd9e
    458  fd9e				   _TO_UPPER_CASE
    459  fd9e		       c9 60		      CMP	#$60
      0  fda0					      IF_GE
      0  fda0					      IF_C_SET
      1  fda0				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fda0		       90 03		      BCC	.tmp
      3  fda0				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fda0				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fda2					      INCLUDE	"STACKPUSH.ASM"
     22  fda2					      LIST	ON
------- FILE if_c_set
    461  fda2		       38		      SEC
    462  fda3		       e9 20		      SBC	#$20
      0  fda5					      END_IF
      1  fda5				   _STRUCT_MAC_LABEL_63
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fda5					      INCLUDE	"STACKPOP.ASM"
     21  fda5					      LIST	ON
------- FILE end_if
    464  fda5		       60		      RTS
    465  fda6
    466  fda6				   _SHIFT_FILENAME_POINTER_BY_Y
    467  fda6		       18		      CLC
    468  fda7		       98		      TYA
    469  fda8		       65 cd		      ADC	filenamePointer
    470  fdaa		       85 cd		      STA	filenamePointer
      0  fdac					      IF_C_SET
      1  fdac				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fdac		       90 02		      BCC	.tmp
      3  fdac				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fdac				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdae					      INCLUDE	"STACKPUSH.ASM"
     22  fdae					      LIST	ON
------- FILE if_c_set
    472  fdae		       e6 ce		      INC	filenamePointer+1
      0  fdb0					      END_IF
      1  fdb0				   _STRUCT_MAC_LABEL_64
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdb0					      INCLUDE	"STACKPOP.ASM"
     21  fdb0					      LIST	ON
------- FILE end_if
    474  fdb0		       60		      RTS
    475  fdb1
    476 U00f7					      SEG.U	zpVars
    477 U00f7		       00 00	   _dirReadPointer ds	2
    478 U00f9
    479  fdb1					      SEG	code
    480  fdb1				   _OPEN_FILE_IN_FOLDER
      0  fdb1					      BEGIN
      1  fdb1				   _STRUCT_MAC_LABEL_65
      2  fdb1				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  fdb1				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdb1					      INCLUDE	"STACKPUSH.ASM"
     22  fdb1					      LIST	ON
------- FILE begin
      0  fdb1					      WRITE_WORD	sdPageStart, _dirReadPointer
      1  fdb1		       a9 00		      LDA	#<sdPageStart
      2  fdb3		       85 f7		      STA	_dirReadPointer
      3  fdb5		       a9 7e		      LDA	#>sdPageStart
      4  fdb7		       85 f8		      STA	_dirReadPointer+1
    483  fdb9		       20 c7 fd 	      JSR	_OPEN_FILE_IN_THE_PAGE
      0  fdbc					      RTS_IF_PLUS
      1  fdbc		       30 01		      BMI	.tmp
      2  fdbe		       60		      RTS
      3  fdbf				   .tmp
    485  fdbf		       20 24 fe 	      JSR	_READ_NEXT_SECTOR
      0  fdc2					      UNTIL_NOT_ZERO
      0  fdc2					      UNTIL_NEQ
      1  fdc2				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fdc2		       f0 ed		      BEQ	.tmp
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdc4					      INCLUDE	"STACKPOP.ASM"
     21  fdc4					      LIST	ON
------- FILE until_neq
    487  fdc4		       a9 02		      LDA	#IO_FILE_NOT_FOUND
    488  fdc6		       60		      RTS
    489  fdc7
    490  fdc7							; uses X & Y
    491  fdc7				   _OPEN_FILE_IN_THE_PAGE
    492  fdc7					      SUBROUTINE
    493  fdc7							; it can be 16 dir records on the page
      0  fdc7					      FOR_X	0, UP_TO, 16
      1  fdc7				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fdc7				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fdc7				  -	      ERR
      4  fdc7					      ENDIF
      5  fdc7				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fdc7				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fdc7				  -	      ERR
      8  fdc7					      ENDIF
      9  fdc7				  -	      IF	[ 0 == ACCUM ]
     10  fdc7				  -	      TAX
     11  fdc7					      ELSE
     12  fdc7				  -	      IF	[ 0 == Y_REG ]
     13  fdc7				  -	      PHA
     14  fdc7				  -	      TYA
     15  fdc7				  -	      TAX
     16  fdc7				  -	      PLA
     17  fdc7					      ELSE
     18  fdc7					      IF	[ 0 != X_REG ]
     19  fdc7		       a2 00		      LDX	#0
     20  fdc9					      ENDIF
     21  fdc9					      ENDIF
     22  fdc9					      ENDIF
     23  fdc9				   _TO_PUSH_3 SET	16
     24  fdc9				   _TO_PUSH_2 SET	UP_TO
     25  fdc9				   _STRUCT_MAC_LABEL_66
     26  fdc9				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fdc9				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fdc9					      INCLUDE	"STKPUSH3.ASM"
     22  fdc9					      LIST	ON
------- FILE for_x
    495  fdc9		       a0 00		      LDY	#0
    496  fdcb		       b1 f7		      LDA	(_dirReadPointer),Y
    497  fdcd							; check if it is the end of folder
    498  fdcd		       f0 2d		      BEQ	.notFound
    499  fdcf							; check if the file is removed
    500  fdcf		       c9 e5		      CMP	#_DIR_RECORD_REMOVED_FILE_NAME
    501  fdd1		       f0 19		      BEQ	.nextRecord
    502  fdd3							; check if the record is VFAT name
    503  fdd3		       a0 0b		      LDY	#_DIR_RECORD_FLAGS_OFFSET
    504  fdd5		       b1 f7		      LDA	(_dirReadPointer),Y
    505  fdd7		       c9 0f		      CMP	#_DIR_RECORD_VFAT_FLAG
    506  fdd9		       f0 11		      BEQ	.nextRecord
    507  fddb							; check the name
      0  fddb					      FOR_Y	0, UP_TO, 11
      1  fddb				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fddb				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fddb				  -	      ERR
      4  fddb					      ENDIF
      5  fddb				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fddb				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fddb				  -	      ERR
      8  fddb					      ENDIF
      9  fddb				  -	      IF	[ 0 == ACCUM ]
     10  fddb				  -	      TAY
     11  fddb					      ELSE
     12  fddb				  -	      IF	[ 0 == X_REG ]
     13  fddb				  -	      PHA
     14  fddb				  -	      TXA
     15  fddb				  -	      TAY
     16  fddb				  -	      PLA
     17  fddb					      ELSE
     18  fddb					      IF	[ 0 != Y_REG ]
     19  fddb		       a0 00		      LDY	#0
     20  fddd					      ENDIF
     21  fddd					      ENDIF
     22  fddd					      ENDIF
     23  fddd				   _TO_PUSH_3 SET	11
     24  fddd				   _TO_PUSH_2 SET	UP_TO
     25  fddd				   _STRUCT_MAC_LABEL_67
     26  fddd				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fddd				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fddd					      INCLUDE	"STKPUSH3.ASM"
     22  fddd					      LIST	ON
------- FILE for_y
    509  fddd		       b1 f7		      LDA	(_dirReadPointer),Y
    510  fddf		       d9 ec 00 	      CMP	_fatFilename,Y
    511  fde2		       d0 08		      BNE	.nextRecord
      0  fde4					      NEXT_Y
      1  fde4				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fde4				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fde4				  -	      DEY
      4  fde4				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fde4				  -	      BNE	.loop
      6  fde4				  -	      ELSE
      7  fde4				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fde4				  -	      BPL	.loop
      9  fde4				  -	      ELSE
     10  fde4				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fde4				  -	      BMI	.loop
     12  fde4				  -	      ELSE
     13  fde4				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fde4				  -	      CPY	_STK_LVL_3
     15  fde4				  -	      ELSE
     16  fde4				  -	      CPY	#_STK_LVL_3
     17  fde4				  -	      ENDIF
     18  fde4				  -	      BNE	.loop
     19  fde4				  -	      ENDIF
     20  fde4				  -	      ENDIF
     21  fde4				  -	      ENDIF
     22  fde4					      ELSE
     23  fde4		       c8		      INY
     24  fde5				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fde5				  -	      BNE	.loop
     26  fde5					      ELSE
     27  fde5				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fde5				  -	      BMI	.loop
     29  fde5					      ELSE
     30  fde5				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fde5				  -	      BPL	.loop
     32  fde5					      ELSE
     33  fde5				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fde5				  -	      CPY	_STK_LVL_3
     35  fde5					      ELSE
     36  fde5		       c0 0b		      CPY	#_STK_LVL_3
     37  fde7					      ENDIF
     38  fde7		       d0 f4		      BNE	.loop
     39  fde9					      ENDIF
     40  fde9					      ENDIF
     41  fde9					      ENDIF
     42  fde9					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fde9					      INCLUDE	"STACKPOP3.ASM"
     19  fde9					      LIST	ON
------- FILE next_y
    513  fde9							; it's needed file
    514  fde9		       4c ff fd 	      JMP	_OPEN_CURRENT_DIR_RECORD
    515  fdec				   .nextRecord
    516  fdec		       18		      CLC
    517  fded		       a5 f7		      LDA	_dirReadPointer
    518  fdef		       69 20		      ADC	#_DIR_RECORD_SIZE
    519  fdf1		       85 f7		      STA	_dirReadPointer
      0  fdf3					      IF_C_SET
      1  fdf3				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fdf3		       90 02		      BCC	.tmp
      3  fdf3				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fdf3				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fdf5					      INCLUDE	"STACKPUSH.ASM"
     22  fdf5					      LIST	ON
------- FILE if_c_set
    521  fdf5		       e6 f8		      INC	_dirReadPointer + 1
      0  fdf7					      END_IF
      1  fdf7				   _STRUCT_MAC_LABEL_68
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fdf7					      INCLUDE	"STACKPOP.ASM"
     21  fdf7					      LIST	ON
------- FILE end_if
      0  fdf7					      NEXT_X
      1  fdf7				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fdf7				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fdf7				  -	      DEX
      4  fdf7				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fdf7				  -	      BNE	.loop
      6  fdf7				  -	      ELSE
      7  fdf7				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fdf7				  -	      BPL	.loop
      9  fdf7				  -	      ELSE
     10  fdf7				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fdf7				  -	      BMI	.loop
     12  fdf7				  -	      ELSE
     13  fdf7				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fdf7				  -	      CPX	_STK_LVL_3
     15  fdf7				  -	      ELSE
     16  fdf7				  -	      CPX	#_STK_LVL_3
     17  fdf7				  -	      ENDIF
     18  fdf7				  -	      BNE	.loop
     19  fdf7				  -	      ENDIF
     20  fdf7				  -	      ENDIF
     21  fdf7				  -	      ENDIF
     22  fdf7					      ELSE
     23  fdf7		       e8		      INX
     24  fdf8				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fdf8				  -	      BNE	.loop
     26  fdf8					      ELSE
     27  fdf8				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fdf8				  -	      BMI	.loop
     29  fdf8					      ELSE
     30  fdf8				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fdf8				  -	      BPL	.loop
     32  fdf8					      ELSE
     33  fdf8				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fdf8				  -	      CPX	_STK_LVL_3
     35  fdf8					      ELSE
     36  fdf8		       e0 10		      CPX	#_STK_LVL_3
     37  fdfa					      ENDIF
     38  fdfa		       d0 cd		      BNE	.loop
     39  fdfc					      ENDIF
     40  fdfc					      ENDIF
     41  fdfc					      ENDIF
     42  fdfc					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fdfc					      INCLUDE	"STACKPOP3.ASM"
     19  fdfc					      LIST	ON
------- FILE next_x
    524  fdfc				   .notFound
    525  fdfc		       a9 ff		      LDA	#$FF	; it's negative so I can recognize it easy
    526  fdfe		       60		      RTS
    527  fdff
    528  fdff				   _OPEN_CURRENT_DIR_RECORD
    529  fdff							; copy file size
      0  fdff					      FOR_Y	_DIR_RECORD_FILE_SIZE_OFFSET, UP_TO, _DIR_RECORD_FILE_SIZE_OFFSET + 4
      1  fdff				  -	      IF	[ !(_DIR_RECORD_FILE_SIZE_OFFSET == ACCUM || _DIR_RECORD_FILE_SIZE_OFFSET == X_REG || _DIR_RECORD_FILE_SIZE_OFFSET == Y_REG || _DIR_RECORD_FILE_SIZE_OFFSET < $100) ]
      2  fdff				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fdff				  -	      ERR
      4  fdff					      ENDIF
      5  fdff				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fdff				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fdff				  -	      ERR
      8  fdff					      ENDIF
      9  fdff				  -	      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET == ACCUM ]
     10  fdff				  -	      TAY
     11  fdff					      ELSE
     12  fdff				  -	      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET == X_REG ]
     13  fdff				  -	      PHA
     14  fdff				  -	      TXA
     15  fdff				  -	      TAY
     16  fdff				  -	      PLA
     17  fdff					      ELSE
     18  fdff					      IF	[ _DIR_RECORD_FILE_SIZE_OFFSET != Y_REG ]
     19  fdff		       a0 1c		      LDY	#_DIR_RECORD_FILE_SIZE_OFFSET
     20  fe01					      ENDIF
     21  fe01					      ENDIF
     22  fe01					      ENDIF
     23  fe01				   _TO_PUSH_3 SET	_DIR_RECORD_FILE_SIZE_OFFSET + 4
     24  fe01				   _TO_PUSH_2 SET	UP_TO
     25  fe01				   _STRUCT_MAC_LABEL_69
     26  fe01				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe01				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe01					      INCLUDE	"STKPUSH3.ASM"
     22  fe01					      LIST	ON
------- FILE for_y
    531  fe01		       b1 f7		      LDA	(_dirReadPointer),Y
    532  fe03		       99 c9 00 	      STA	[_openedFileSize-_DIR_RECORD_FILE_SIZE_OFFSET],Y
      0  fe06					      NEXT_Y
      1  fe06				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe06				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe06				  -	      DEY
      4  fe06				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe06				  -	      BNE	.loop
      6  fe06				  -	      ELSE
      7  fe06				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe06				  -	      BPL	.loop
      9  fe06				  -	      ELSE
     10  fe06				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe06				  -	      BMI	.loop
     12  fe06				  -	      ELSE
     13  fe06				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe06				  -	      CPY	_STK_LVL_3
     15  fe06				  -	      ELSE
     16  fe06				  -	      CPY	#_STK_LVL_3
     17  fe06				  -	      ENDIF
     18  fe06				  -	      BNE	.loop
     19  fe06				  -	      ENDIF
     20  fe06				  -	      ENDIF
     21  fe06				  -	      ENDIF
     22  fe06					      ELSE
     23  fe06		       c8		      INY
     24  fe07				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe07				  -	      BNE	.loop
     26  fe07					      ELSE
     27  fe07				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe07				  -	      BMI	.loop
     29  fe07					      ELSE
     30  fe07				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe07				  -	      BPL	.loop
     32  fe07					      ELSE
     33  fe07				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe07				  -	      CPY	_STK_LVL_3
     35  fe07					      ELSE
     36  fe07		       c0 20		      CPY	#_STK_LVL_3
     37  fe09					      ENDIF
     38  fe09		       d0 f6		      BNE	.loop
     39  fe0b					      ENDIF
     40  fe0b					      ENDIF
     41  fe0b					      ENDIF
     42  fe0b					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe0b					      INCLUDE	"STACKPOP3.ASM"
     19  fe0b					      LIST	ON
------- FILE next_y
    534  fe0b							; copy file start cluster
    535  fe0b		       a0 1a		      LDY	#_DIR_RECORD_LOW_START_CLUSTER_OFFSET
    536  fe0d		       b1 f7		      LDA	(_dirReadPointer),Y
    537  fe0f		       85 dc		      STA	_openedCluster
    538  fe11		       c8		      INY
    539  fe12		       b1 f7		      LDA	(_dirReadPointer),Y
    540  fe14		       85 dd		      STA	_openedCluster + 1
    541  fe16		       a0 14		      LDY	#_DIR_RECORD_HIGH_START_CLUSTER_OFFSET
    542  fe18		       b1 f7		      LDA	(_dirReadPointer),Y
    543  fe1a		       85 de		      STA	_openedCluster + 2
    544  fe1c		       c8		      INY
    545  fe1d		       b1 f7		      LDA	(_dirReadPointer),Y
    546  fe1f		       85 df		      STA	_openedCluster + 3
    547  fe21		       4c 62 fc 	      JMP	_OPEN_CLUSTER
    548  fe24							; the end here
    549  fe24
    550  fe24							; After the cluster is opened this routine either read the next page inside the cluster or figures out via FAT
    551  fe24							; where the next cluster is and reads it
    552  fe24							; Changes X & Y
    553  fe24				   _READ_NEXT_SECTOR
    554  fe24					      SUBROUTINE
    555  fe24							; Increase the current opened sector and see if it still fit in the cluster
    556  fe24		       e6 e0		      INC	_openedSectorInCluster
    557  fe26		       a5 d7		      LDA	_sectorsPerCluster
    558  fe28		       c5 e0		      CMP	_openedSectorInCluster
    559  fe2a		       f0 1c		      BEQ	.nextCluster
    560  fe2c							; Increase opened sector number
    561  fe2c		       e6 e1		      INC	_openedSector
      0  fe2e					      IF_ZERO
      0  fe2e					      IF_EQ
      1  fe2e				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe2e		       d0 0a		      BNE	.tmp
      3  fe2e				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe2e				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe30					      INCLUDE	"STACKPUSH.ASM"
     22  fe30					      LIST	ON
------- FILE if_eq
    563  fe30		       e6 e2		      INC	_openedSector+1
      0  fe32					      IF_ZERO
      0  fe32					      IF_EQ
      1  fe32				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe32		       d0 06		      BNE	.tmp
      3  fe32				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe32				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe34					      INCLUDE	"STACKPUSH.ASM"
     22  fe34					      LIST	ON
------- FILE if_eq
    565  fe34		       e6 e3		      INC	_openedSector+2
      0  fe36					      IF_ZERO
      0  fe36					      IF_EQ
      1  fe36				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  fe36		       d0 02		      BNE	.tmp
      3  fe36				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  fe36				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 3 PASS 3
      0  fe38					      INCLUDE	"STACKPUSH.ASM"
     22  fe38					      LIST	ON
------- FILE if_eq
    567  fe38		       e6 e4		      INC	_openedSector+3
      0  fe3a					      END_IF
      1  fe3a				   _STRUCT_MAC_LABEL_72
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe3a					      INCLUDE	"STACKPOP.ASM"
     21  fe3a					      LIST	ON
------- FILE end_if
      0  fe3a					      END_IF
      1  fe3a				   _STRUCT_MAC_LABEL_71
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe3a					      INCLUDE	"STACKPOP.ASM"
     21  fe3a					      LIST	ON
------- FILE end_if
      0  fe3a					      END_IF
      1  fe3a				   _STRUCT_MAC_LABEL_70
------- FILE STACKPOP.ASM LEVEL 3 PASS 3
      0  fe3a					      INCLUDE	"STACKPOP.ASM"
     21  fe3a					      LIST	ON
------- FILE end_if
      0  fe3a					      FOR_X	0, UP_TO, 4
      1  fe3a				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fe3a				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fe3a				  -	      ERR
      4  fe3a					      ENDIF
      5  fe3a				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fe3a				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fe3a				  -	      ERR
      8  fe3a					      ENDIF
      9  fe3a				  -	      IF	[ 0 == ACCUM ]
     10  fe3a				  -	      TAX
     11  fe3a					      ELSE
     12  fe3a				  -	      IF	[ 0 == Y_REG ]
     13  fe3a				  -	      PHA
     14  fe3a				  -	      TYA
     15  fe3a				  -	      TAX
     16  fe3a				  -	      PLA
     17  fe3a					      ELSE
     18  fe3a					      IF	[ 0 != X_REG ]
     19  fe3a		       a2 00		      LDX	#0
     20  fe3c					      ENDIF
     21  fe3c					      ENDIF
     22  fe3c					      ENDIF
     23  fe3c				   _TO_PUSH_3 SET	4
     24  fe3c				   _TO_PUSH_2 SET	UP_TO
     25  fe3c				   _STRUCT_MAC_LABEL_73
     26  fe3c				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe3c				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe3c					      INCLUDE	"STKPUSH3.ASM"
     22  fe3c					      LIST	ON
------- FILE for_x
    572  fe3c		       b5 e1		      LDA	_openedSector,X
    573  fe3e		       95 c8		      STA	sdSector,X
      0  fe40					      NEXT_X
      1  fe40				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe40				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe40				  -	      DEX
      4  fe40				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe40				  -	      BNE	.loop
      6  fe40				  -	      ELSE
      7  fe40				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe40				  -	      BPL	.loop
      9  fe40				  -	      ELSE
     10  fe40				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe40				  -	      BMI	.loop
     12  fe40				  -	      ELSE
     13  fe40				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe40				  -	      CPX	_STK_LVL_3
     15  fe40				  -	      ELSE
     16  fe40				  -	      CPX	#_STK_LVL_3
     17  fe40				  -	      ENDIF
     18  fe40				  -	      BNE	.loop
     19  fe40				  -	      ENDIF
     20  fe40				  -	      ENDIF
     21  fe40				  -	      ENDIF
     22  fe40					      ELSE
     23  fe40		       e8		      INX
     24  fe41				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe41				  -	      BNE	.loop
     26  fe41					      ELSE
     27  fe41				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe41				  -	      BMI	.loop
     29  fe41					      ELSE
     30  fe41				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe41				  -	      BPL	.loop
     32  fe41					      ELSE
     33  fe41				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe41				  -	      CPX	_STK_LVL_3
     35  fe41					      ELSE
     36  fe41		       e0 04		      CPX	#_STK_LVL_3
     37  fe43					      ENDIF
     38  fe43		       d0 f7		      BNE	.loop
     39  fe45					      ENDIF
     40  fe45					      ENDIF
     41  fe45					      ENDIF
     42  fe45					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe45					      INCLUDE	"STACKPOP3.ASM"
     19  fe45					      LIST	ON
------- FILE next_x
    575  fe45		       4c 67 f9 	      JMP	READ_SD_SECTOR
    576  fe48				   .nextCluster
    577  fe48							; Read sd sector _fatSector + ( _openedCluster * 4 ) / sectorSize
    578  fe48							;   = 3rd, 2 and 1st bytes shifted left
    579  fe48		       a5 dd		      LDA	_openedCluster+1
    580  fe4a		       85 c8		      STA	sdSector
    581  fe4c		       a5 de		      LDA	_openedCluster+2
    582  fe4e		       85 c9		      STA	sdSector+1
    583  fe50		       a5 df		      LDA	_openedCluster+3
    584  fe52		       85 ca		      STA	sdSector+2
    585  fe54		       a9 00		      LDA	#0
    586  fe56		       85 cb		      STA	sdSector+3
    587  fe58		       a5 dc		      LDA	_openedCluster
    588  fe5a		       0a		      ASL
    589  fe5b		       26 c9		      ROL	sdSector+1
    590  fe5d		       26 ca		      ROL	sdSector+2
    591  fe5f		       26 cb		      ROL	sdSector+3
    592  fe61							; carry = 0
    593  fe61							; we can add _fatSector
    594  fe61		       a5 c8		      LDA	sdSector
    595  fe63		       65 cf		      ADC	_fatSector
    596  fe65		       85 c8		      STA	sdSector
    597  fe67		       a5 c9		      LDA	sdSector+1
    598  fe69		       65 d0		      ADC	_fatSector+1
    599  fe6b		       85 c9		      STA	sdSector+1
    600  fe6d		       a5 ca		      LDA	sdSector+2
    601  fe6f		       65 d1		      ADC	_fatSector+2
    602  fe71		       85 ca		      STA	sdSector+2
    603  fe73		       a5 cb		      LDA	sdSector+3
    604  fe75		       65 d2		      ADC	_fatSector+3
    605  fe77		       85 cb		      STA	sdSector+3
    606  fe79
    607  fe79		       20 67 f9 	      JSR	READ_SD_SECTOR
      0  fe7c					      RTS_IF_NE
      1  fe7c		       f0 01		      BEQ	.tmp
      2  fe7e		       60		      RTS
      3  fe7f				   .tmp
    609  fe7f
    610  fe7f							; And read 4 bytes of the next fat cluster by offset ( _openedCluster * 4 ) % sectorSize
    611  fe7f							; 0x?FFFFFF8 - 0x?FFFFFFF is the end-of-chain marker
    612  fe7f
    613  fe7f		       a9 00		      LDA	#<sdPageStart
    614  fe81		       85 c8		      STA	_sdHalfPageStart
    615  fe83		       06 dc		      ASL	_openedCluster
    616  fe85		       06 dc		      ASL	_openedCluster
    617  fe87							; Bit in carry shows what half of the page to use
    618  fe87		       a9 7e		      LDA	#>sdPageStart
    619  fe89		       69 00		      ADC	#0	; Adds the carry here
    620  fe8b		       85 c9		      STA	_sdHalfPageStart+1
    621  fe8d
    622  fe8d							; Write next cluster to _openedCluster
    623  fe8d		       a5 dc		      LDA	_openedCluster
    624  fe8f		       a8		      TAY
      0  fe90					      FOR_X	0, UP_TO, 4
      1  fe90				  -	      IF	[ !(0 == ACCUM || 0 == X_REG || 0 == Y_REG || 0 < $100) ]
      2  fe90				  -	      ECHO	"Index must be one of: ACCUM, X_REG, Y_REG of value below $100"
      3  fe90				  -	      ERR
      4  fe90					      ENDIF
      5  fe90				  -	      IF	[ !(UP_TO == UP_TO || UP_TO == DOWN_TO) ]
      6  fe90				  -	      ECHO	"Direction must be UP_TO or DOWN_TO"
      7  fe90				  -	      ERR
      8  fe90					      ENDIF
      9  fe90				  -	      IF	[ 0 == ACCUM ]
     10  fe90				  -	      TAX
     11  fe90					      ELSE
     12  fe90				  -	      IF	[ 0 == Y_REG ]
     13  fe90				  -	      PHA
     14  fe90				  -	      TYA
     15  fe90				  -	      TAX
     16  fe90				  -	      PLA
     17  fe90					      ELSE
     18  fe90					      IF	[ 0 != X_REG ]
     19  fe90		       a2 00		      LDX	#0
     20  fe92					      ENDIF
     21  fe92					      ENDIF
     22  fe92					      ENDIF
     23  fe92				   _TO_PUSH_3 SET	4
     24  fe92				   _TO_PUSH_2 SET	UP_TO
     25  fe92				   _STRUCT_MAC_LABEL_74
     26  fe92				   _TO_PUSH_1 SET	_STRUC_MAC_I
     27  fe92				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STKPUSH3.ASM LEVEL 3 PASS 3
      0  fe92					      INCLUDE	"STKPUSH3.ASM"
     22  fe92					      LIST	ON
------- FILE for_x
    626  fe92		       b1 c8		      LDA	(_sdHalfPageStart),Y
    627  fe94		       95 dc		      STA	_openedCluster,X
    628  fe96		       c8		      INY
      0  fe97					      NEXT_X
      1  fe97				   .loop      set	_STRUCT_MAC_LABEL_,_STK_LVL_1
      2  fe97				  -	      IF	[ _STK_LVL_2 == DOWN_TO ]
      3  fe97				  -	      DEX
      4  fe97				  -	      IF	[ _STK_LVL_3 == 0 ]
      5  fe97				  -	      BNE	.loop
      6  fe97				  -	      ELSE
      7  fe97				  -	      IF	[ _STK_LVL_3 == $FF || _STK_LVL_3 == -1 || _STK_LVL_3 == NEG_NRs ]
      8  fe97				  -	      BPL	.loop
      9  fe97				  -	      ELSE
     10  fe97				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     11  fe97				  -	      BMI	.loop
     12  fe97				  -	      ELSE
     13  fe97				  -	      IF	[ _STK_LVL_3 > $102 ]
     14  fe97				  -	      CPX	_STK_LVL_3
     15  fe97				  -	      ELSE
     16  fe97				  -	      CPX	#_STK_LVL_3
     17  fe97				  -	      ENDIF
     18  fe97				  -	      BNE	.loop
     19  fe97				  -	      ENDIF
     20  fe97				  -	      ENDIF
     21  fe97				  -	      ENDIF
     22  fe97					      ELSE
     23  fe97		       e8		      INX
     24  fe98				  -	      IF	[ _STK_LVL_3 == 0 ]
     25  fe98				  -	      BNE	.loop
     26  fe98					      ELSE
     27  fe98				  -	      IF	[ _STK_LVL_3 == POS_NRs ]
     28  fe98				  -	      BMI	.loop
     29  fe98					      ELSE
     30  fe98				  -	      IF	[ _STK_LVL_3 == NEG_NRs ]
     31  fe98				  -	      BPL	.loop
     32  fe98					      ELSE
     33  fe98				  -	      IF	[ _STK_LVL_3 > $102 ]
     34  fe98				  -	      CPX	_STK_LVL_3
     35  fe98					      ELSE
     36  fe98		       e0 04		      CPX	#_STK_LVL_3
     37  fe9a					      ENDIF
     38  fe9a		       d0 f6		      BNE	.loop
     39  fe9c					      ENDIF
     40  fe9c					      ENDIF
     41  fe9c					      ENDIF
     42  fe9c					      ENDIF
------- FILE STACKPOP3.ASM LEVEL 3 PASS 3
      0  fe9c					      INCLUDE	"STACKPOP3.ASM"
     19  fe9c					      LIST	ON
------- FILE next_x
    630  fe9c
    631  fe9c							; Check if it is the end-of-chain
    632  fe9c		       a5 dd		      LDA	_openedCluster+1
    633  fe9e		       c9 ff		      CMP	#$FF
    634  fea0		       d0 19		      BNE	.notEOC
    635  fea2		       a5 de		      LDA	_openedCluster+2
    636  fea4		       c9 ff		      CMP	#$FF
    637  fea6		       d0 13		      BNE	.notEOC
    638  fea8		       a5 dc		      LDA	_openedCluster
    639  feaa		       29 f8		      AND	#$F8
    640  feac		       c9 f8		      CMP	#$F8
    641  feae		       d0 0b		      BNE	.notEOC
    642  feb0		       a5 df		      LDA	_openedCluster+3
    643  feb2		       29 0f		      AND	#$F
    644  feb4		       c9 0f		      CMP	#$F
    645  feb6		       d0 03		      BNE	.notEOC
    646  feb8		       a9 19		      LDA	#IO_FAT_END_OF_CLUSTERS
    647  feba		       60		      RTS
    648  febb				   .notEOC
    649  febb		       4c 62 fc 	      JMP	_OPEN_CLUSTER
------- FILE bootloader.asm
      6  febe
      7  febe							; Don't forget to restore A from stack in iterrupt
      8  febe		       00 fe	   INTERRUPT_INDIRECT =	$FE	; $ $FF
      9  febe
     10 U00f9					      SEG.U	zpVars
     11 U00f9		       00 00	   codeStart  ds	2
     12 U00fb		       00 00	   codePointer ds	2
     13 U00fd		       00	   fatStatus  ds	1
     14 U00fe
     15  febe					      SEG	code
     16  febe				   main
     17  febe		       a9 ff		      LDA	#$FF
     18  fec0		       85 fd		      STA	fatStatus
     19  fec2		       20 4f fb 	      JSR	INIT_FAT
     20  fec5		       d0 15		      BNE	fail
      0  fec7					      WRITE_WORD	INIT_FILE_NAME, filenamePointer
      1  fec7		       a9 e1		      LDA	#<INIT_FILE_NAME
      2  fec9		       85 cd		      STA	filenamePointer
      3  fecb		       a9 fe		      LDA	#>INIT_FILE_NAME
      4  fecd		       85 ce		      STA	filenamePointer+1
     22  fecf		       20 2a fc 	      JSR	OPEN_FILE_BY_NAME
     23  fed2		       d0 08		      BNE	fail
     24  fed4		       20 eb fe 	      JSR	COPY_FILE
     25  fed7		       d0 03		      BNE	fail
     26  fed9		       6c f9 00 	      JMP	(codeStart)
     27  fedc				   fail
     28  fedc		       85 fd		      STA	fatStatus
     29  fede				   emptyLoop
     30  fede		       4c de fe 	      JMP	emptyLoop
     31  fee1
     32  fee1				   INIT_FILE_NAME
      0  fee1					      STRING	"/init.run"
      1  fee1		       2f 69 6e 69*	      DC	"/init.run"
      2  feea		       00		      DC	$0
     34  feeb
     35  feeb				   COPY_FILE
     36  feeb					      SUBROUTINE
     37  feeb		       20 a5 fc 	      JSR	READ_NEXT_HALF_SECTOR
      0  feee					      RTS_IF_NE
      1  feee		       f0 01		      BEQ	.tmp
      2  fef0		       60		      RTS
      3  fef1				   .tmp
     39  fef1							; first two bytes are code start
     40  fef1		       a0 00		      LDY	#0
     41  fef3		       b1 e9		      LDA	(half_sector_pointer),Y
     42  fef5		       85 f9		      STA	codeStart
     43  fef7		       85 fb		      STA	codePointer
     44  fef9		       c8		      INY
     45  fefa		       b1 e9		      LDA	(half_sector_pointer),Y
     46  fefc		       85 fa		      STA	codeStart+1
     47  fefe		       85 fc		      STA	codePointer+1
     48  ff00		       c8		      INY
     49  ff01		       a2 00		      LDX	#0
      0  ff03					      BEGIN
      1  ff03				   _STRUCT_MAC_LABEL_75
      2  ff03				   _TO_PUSH_1 SET	_STRUC_MAC_I
      3  ff03				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 2 PASS 3
      0  ff03					      INCLUDE	"STACKPUSH.ASM"
     22  ff03					      LIST	ON
------- FILE begin
     51  ff03				   .loop
     52  ff03		       b1 e9		      LDA	(half_sector_pointer),Y
     53  ff05		       81 fb		      STA	(codePointer,X)
     54  ff07		       e6 fb		      INC	codePointer
     55  ff09		       d0 02		      BNE	.skipUpper
     56  ff0b		       e6 fc		      INC	codePointer+1
     57  ff0d				   .skipUpper
     58  ff0d		       c8		      INY
     59  ff0e		       c4 eb		      CPY	half_sector_size
     60  ff10		       d0 f1		      BNE	.loop
     61  ff12		       20 a5 fc 	      JSR	READ_NEXT_HALF_SECTOR
      0  ff15					      WHILE_ZERO
      0  ff15					      IF_EQ
      1  ff15				   .tmp       set	_STRUCT_MAC_LABEL_,_STRUC_MAC_I
      2  ff15		       d0 05		      BNE	.tmp
      3  ff15				   _TO_PUSH_1 SET	_STRUC_MAC_I
      4  ff15				   _STRUC_MAC_I SET	_STRUC_MAC_I + 1
------- FILE STACKPUSH.ASM LEVEL 2 PASS 3
      0  ff17					      INCLUDE	"STACKPUSH.ASM"
     22  ff17					      LIST	ON
------- FILE if_eq
     63  ff17		       a0 00		      LDY	#0
      0  ff19					      REPEAT_
      1  ff19				   .tmp       set	_STRUCT_MAC_LABEL_,_STK_LVL_2
      2  ff19		       4c 03 ff 	      JMP	.tmp
      3  ff1c				   _STRUCT_MAC_LABEL_76
------- FILE STACKPOP2.ASM LEVEL 2 PASS 3
      0  ff1c					      INCLUDE	"STACKPOP2.ASM"
     20  ff1c					      LIST	ON
------- FILE repeat_
     65  ff1c		       c9 01		      CMP	#IO_END_OF_FILE
      0  ff1e					      RTS_IF_NE
      1  ff1e		       f0 01		      BEQ	.tmp
      2  ff20		       60		      RTS
      3  ff21				   .tmp
     67  ff21		       a9 00		      LDA	#0
     68  ff23		       60		      RTS
     69  ff24
     70  ff24				   interruptHandler
     71  ff24		       6c fe 00 	      JMP	($FE)
     72  ff27
      0  ff27					      RESET_VECTOR	main, interruptHandler, interruptHandler
      1  fffa					      ORG	$FFFA
      2  fffa		       24 ff		      DC.W	interruptHandler
      3  fffc					      ORG	$FFFC
      4  fffc		       be fe		      DC.W	main
      5  fffe					      ORG	$FFFE
      6  fffe		       24 ff		      DC.W	interruptHandler
     74  10000
------- FILE checkSegments.asm LEVEL 2 PASS 3
      0  10000					       INCLUDE	"checkSegments.asm"
      1 U00fe					      SEG.U	zpVars
      2 U00fe		       00 fe	   _ZP_VARS_END =	.
      3 U00fe
      4  10000					       SEG	code
      5  10000			00 01 00 00 _CODE_END  =	.
      6  10000
      7 U8000					      SEG.U	upperRam
      8 U8000		       80 00	   _UPPER_RAM_END =	.
      9 U8000
 Zero page usage:  $fe
     10 U8000					      ECHO	"Zero page usage: ", _ZP_VARS_END
     11 U8000
     12 U8000				  -	      IF	_ZP_VARS_END > $FF
     13 U8000				  -	      ECHO	"Overuse of Zero page."
     14 U8000				  -	      ERR
     15 U8000					      ENDIF
     16 U8000
     17 U8000				  -	      IF	CODE_START < UPPER_RAM_START
     18 U8000				  -	      ECHO	"Free RAM: ", UPPER_RAM_START - _CODE_END
     19 U8000				  -
     20 U8000				  -	      IF	_CODE_END > UPPER_RAM_START
     21 U8000				  -	      ECHO	"Code is overlaps with upper ram reserved"
     22 U8000				  -	      ERR
     23 U8000				  -	      ENDIF
     24 U8000					      ENDIF
     25 U8000
 Free reserved upper RAM:  $0
     26 U8000					      ECHO	"Free reserved upper RAM: ", $8000 - _UPPER_RAM_END
     27 U8000
     28 U8000				  -	      IF	_UPPER_RAM_END > $8000
     29 U8000				  -	      ECHO	"Reserved upper RAM goes over hardware RAM"
     30 U8000				  -	      ERR
     31 U8000					      ENDIF
     32 U8000
------- FILE bootloader.asm
     76 U8000				  -	      IF	_ZP_VARS_END > $FE
     77 U8000				  -	      ECHO	"ZP vars uses interrup indirect jump"
     78 U8000				  -	      ERR
     79 U8000					      ENDIF
     80 U8000
